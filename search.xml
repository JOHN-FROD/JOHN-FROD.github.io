<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>高级数据操作</title>
    <url>/2021/02/03/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><h3 id="多数据插入"><a href="#多数据插入" class="headerlink" title="多数据插入"></a>多数据插入</h3><p>只要写一次insert指令，但是可以直接插入多条记录</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(字段列表)] <span class="keyword">values</span>(值列表), (值列表)…;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202164155169.png" alt="image-20210202164155169"></p>
<h3 id="主键冲突"><a href="#主键冲突" class="headerlink" title="主键冲突"></a>主键冲突</h3><p>主键冲突：在有的表中，使用的是业务主键（字段有业务含义），但是往往在进行数据插入的时候，又不确定数据表中是否已经存在对应的主键。</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202170558780.png" alt="image-20210202170558780"></p>
<ol>
<li>主键冲突更新：</li>
</ol>
<p>类似插入数据语法，如果插入的过程中主键冲突，那么采用更新方法。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> 表名 [(字段列表)] <span class="keyword">values</span>(值列表) <span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> 字段 = 新值;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202171903475.png" alt="image-20210202171903475"></p>
<p>2、 主键冲突替换：</p>
<p>当主键冲突之后，干掉原来的数据，重新插入进去。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Replace</span> <span class="keyword">into</span> [(字段列表)] <span class="keyword">values</span>(值列表);</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202172205947.png" alt="image-20210202172205947"></p>
<h3 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h3><p>蠕虫复制：一分为二，成倍的增加。从已有的数据中获取数据，并且将获取到的数据插入到数据表中</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> 表名 [(字段列表)] <span class="keyword">select</span> */字段列表 <span class="keyword">from</span> 表;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202174525318.png" alt="image-20210202174525318"></p>
<p><strong>注意：</strong></p>
<ol>
<li><p>蠕虫复制的确通常是重复数据，没有太大业务意义：可以在短期内快速增加表的数据量，从而可以测试表的压力，还可以通过大量数据来测试表的效率（索引）</p>
</li>
<li><p> 蠕虫复制虽好，但是要注意主键冲突。</p>
</li>
</ol>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><ol>
<li>在更新数据的时候，特别要注意：通常一定是跟随条件更新</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> 表名 <span class="keyword">set</span> 字段名 = 新值 <span class="keyword">where</span> 判断条件;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>如果没有条件，是全表更新数据。但是可以使用limit 来限制更新的数量；</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> 表名 <span class="keyword">set</span> 字段名 = 新值 [<span class="keyword">where</span> 判断条件] <span class="keyword">limit</span> 数量; </span><br></pre></td></tr></table></figure>
<p>改变4个a变成e</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> my_simple <span class="keyword">set</span> <span class="keyword">name</span> = ‘e’ <span class="keyword">where</span> <span class="keyword">name</span> = ‘a’ <span class="keyword">limit</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202175109347.png" alt="image-20210202175109347"></p>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><ol>
<li><p>删除数据的时候尽量不要全部删除，应该使用where进行 判定；</p>
</li>
<li><p>删除数据的时候可以使用limit来限制要删除的具体数量</p>
</li>
</ol>
<p>Delete删除数据的时候无法重置auto_increment</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202175716150.png" alt="image-20210202175716150"></p>
<p>Mysql有一个能够重置表选项中的自增长的语法;</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Truncate 表名; 		//==&gt;drop ==&gt;create</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202175856711.png" alt="image-20210202175856711"></p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>完整的查询指令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">select</span>选项 字段列表 <span class="keyword">from</span> 数据源 <span class="keyword">where</span>条件 <span class="keyword">group</span> <span class="keyword">by</span>分组 <span class="keyword">having</span>条件 <span class="keyword">order</span> <span class="keyword">by</span>排序 <span class="keyword">limit</span>限制;</span><br></pre></td></tr></table></figure>
<p>Select选项：系统该如何对待查询得到的结果</p>
<p>All：默认的，表示保存所有的记录</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202195449435.png" alt="image-20210202195509950"></p>
<p>Distinct：去重，去除重复的记录，只保留一条（所有的字段都相同）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202195449435.png" alt="image-20210202195449435"></p>
<p>字段列表：有的时候需要从多张表获取数据，在获取数据的时候，可能存在不同表中有同名的字段，需要将同名的字段命名成不同名的：别名 alias</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">字段名 [as] 别名</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202195838373.png" alt="image-20210202195838373"></p>
<h3 id="From数据源"><a href="#From数据源" class="headerlink" title="From数据源"></a>From数据源</h3><p>From是为前面的查询提供数据：数据源只要是一个符合二维表结构的数据即可。</p>
<h4 id="单表数据"><a href="#单表数据" class="headerlink" title="单表数据"></a>单表数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">From 表名;</span><br></pre></td></tr></table></figure>
<h4 id="多表数据"><a href="#多表数据" class="headerlink" title="多表数据"></a>多表数据</h4><p>从多张表获取数据，基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">from 表1,表2…</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202200204061.png" alt="image-20210202200204061"></p>
<p>结果：两张表的记录数相乘，字段数拼接</p>
<p>本质：从第一张表取出一条记录，去拼凑第二张表的所有记录，保留所有结果。得到的结果在数学上有一个专业的说法：笛卡尔积，这个结果出了给数据库造成压力，没有其他意义：应该尽量避免出现笛卡尔积。</p>
<h4 id="动态数据"><a href="#动态数据" class="headerlink" title="动态数据"></a>动态数据</h4><p>From后面跟的数据不是一个实体表，而是一个从表中查询出来得到的二维结果表（子查询）。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">from (<span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表) <span class="keyword">as</span> 别名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202200630599.png" alt="image-20210202200630599"></p>
<h3 id="Where子句"><a href="#Where子句" class="headerlink" title="Where子句"></a>Where子句</h3><p>Where字句：用来从数据表获取数据的时候，然后进行条件筛选。</p>
<p> 数据获取原理：针对表去对应的磁盘处获取所有的记录（一条条），where的作用就是在拿到一条结果就开始进行判断，判断是否符合条件：如果符合就保存下来，如果不符合直接舍弃（不放到内存中）</p>
<p>Where是通过运算符进行结果比较来判断数据。</p>
<h3 id="Group-by子句"><a href="#Group-by子句" class="headerlink" title="Group by子句"></a>Group by子句</h3><p>Group by表示分组的含义：根据指定的字段，将数据进行分组：分组的目标是为了统计</p>
<h4 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h4><p>基本语法： </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group by 字段名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202202118076.png" alt="image-20210202202118076"></p>
<p>Group by是为了分组后进行数据统计的，如果只是想看数据显示，那么group by没什么含义：group by将数据按照指定的字段分组之后，只会保留每组的第一条记录。</p>
<p>利用一些统计函数：（聚合函数）</p>
<p>count()：统计每组中的数量，如果统计目标是字段，那么不统计为空NULL字段，如果为*那么代表统计记录</p>
<p>avg()：求平均值</p>
<p>sum()：求和</p>
<p>max()：求最大值</p>
<p>min()：求最小值</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202202919761.png" alt="image-20210202202919761"></p>
<p>Group_concat()：为了将分组中指定的字段进行合并（字符串拼接）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202203214011.png" alt="image-20210202203214011"></p>
<h4 id="多分组"><a href="#多分组" class="headerlink" title="多分组"></a>多分组</h4><p>将数据按照某个字段进行分组之后，对已经分组的数据进行再次分组</p>
<p> 基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group by 字段1,字段2; 	//先按照字段1进行排序，之后将结果再按照字段2进行排序，以此类推。</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202204051331.png" alt="image-20210202204051331"></p>
<h4 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h4><p>Mysql中，分组默认有排序的功能：按照分组字段进行排序，默认是升序</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group by 字段 [asc|desc]，字段 [asc|desc]</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202204259895.png" alt="image-20210202204259895"></p>
<h4 id="回溯统计"><a href="#回溯统计" class="headerlink" title="回溯统计"></a>回溯统计</h4><p>当分组进行多分组之后，往上统计的过程中，需要进行层层上报，将这种层层上报统计的过程称之为回溯统计：每一次分组向上统计的过程都会产生一次新的统计数据，而且当前数据对应的分组字段为NULL。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">group by 字段 [asc|desc] <span class="keyword">with</span> <span class="keyword">rollup</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202205036929.png" alt="image-20210202205036929"></p>
<p>多分组回溯统计</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202205036929.png" alt="image-20210202205308366"></p>
<h3 id="Having子句"><a href="#Having子句" class="headerlink" title="Having子句"></a>Having子句</h3><p>Having的本质和where一样，是用来进行数据条件筛选。</p>
<ol>
<li>Having是在group by子句之后：可以针对分组数据进行统计筛选，但是where不行</li>
</ol>
<p>查询班级人数大于等于4个以上的班级</p>
<p>Where不能使用聚合函数：聚合函数是用在group by分组的时候，where已经运行完毕</p>
<p>Having在group by分组之后，可以使用聚合函数或者字段别名（where是从表中取出数据，别名是在数据进入到内存之后才有的）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202210945795.png" alt="image-20210202210945795"></p>
<p>强调：having是在group by之后，group by是在where之后：where的时候表示将数据从磁盘拿到内存，where之后的所有操作都是内存操作。</p>
<h3 id="Order-by子句"><a href="#Order-by子句" class="headerlink" title="Order by子句"></a>Order by子句</h3><p>Order by排序：根据校对规则对数据进行排序</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">order by 字段 [asc|desc];       //asc升序，默认的</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202211211080.png" alt="image-20210202211211080"></p>
<p>Order by也可以像group by一样进行多字段排序：先按照第一个字段进行排序，然后再按照第二个字段进行排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Order by 字段1 规则,字段2 规则;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202211351221.png" alt="image-20210202211351221"></p>
<h3 id="Limit子句"><a href="#Limit子句" class="headerlink" title="Limit子句"></a>Limit子句</h3><p>Limit限制子句：主要是用来限制记录数量获取</p>
<h4 id="记录数限制"><a href="#记录数限制" class="headerlink" title="记录数限制"></a>记录数限制</h4><p>纯粹的限制获取的数量：从第一条到指定的数量</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit 数量;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202211547883.png" alt="image-20210202211547883"></p>
<p>Limit通常在查询的时候如果限定为一条记录的时候，使用的比较多：有时候获取多条记录并不能解决业务问题，但是会增加服务器的压力。</p>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>利用limit来限制获取指定区间的数据。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">limit offset,length;   	//offset偏移量：从哪开始，length就是具体的获取多少条记录</span><br></pre></td></tr></table></figure>
<p>Mysql中记录的数量从0开始</p>
<p>Limit 0,2; 表示获取前两条记录</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202211751605.png" alt="image-20210202211751605"></p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202211838240.png" alt="image-20210202211838240"></p>
<p>注意：limit后面的length表示最多获取对应数量，但是如果数量不够，系统不会强求</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202211824015.png" alt="image-20210202211824015"></p>
<h2 id="查询中的运算符"><a href="#查询中的运算符" class="headerlink" title="查询中的运算符"></a>查询中的运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>+、-、*、/、%</p>
<p>基本算术运算：通常不在条件中使用，而是用于结果运算（select 字段中）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202220941715.png" alt="image-20210202220941715"></p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>&gt;、&gt;=、&lt;、&lt;=、=、&lt;&gt;</p>
<p>通常是用来在条件中进行限定结果</p>
<p>=：在mysql中，没有对应的 ==比较符号，就是使用=来进行相等判断</p>
<p>&lt;=&gt;：相等比较</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221233574.png" alt="image-20210202221233574"></p>
<p>特殊应用：就是在字段结果中进行比较运算</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221508097.png" alt="image-20210202221508097"></p>
<p>在条件判断的时候，还有有对应的比较运算符：计算区间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Between 条件1 and 条件2;		//闭区间查找</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221632673.png" alt="image-20210202221632673"></p>
<p>Between中条件1必须小于条件2，反过来不可以</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221722572.png" alt="image-20210202221722572"></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>and、or、not</p>
<p>and：逻辑与</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221827339.png" alt="image-20210202221827339"></p>
<p>or：逻辑或</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202221916855.png" alt="image-20210202221916855"></p>
<p>not：逻辑非</p>
<h3 id="In运算符"><a href="#In运算符" class="headerlink" title="In运算符"></a>In运算符</h3><p>In：在什么里面，是用来替代=，当结果不是一个值，而是一个结果集的时候</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">in (结果1,结果2,结果3…)		//只要当前条件在结果集中出现过，那么就成立</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202222100602.png" alt="image-20210202222100602"></p>
<h3 id="Is运算符"><a href="#Is运算符" class="headerlink" title="Is运算符"></a>Is运算符</h3><p>Is是专门用来判断字段是否为NULL的运算符</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">is null / is not null</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202222324678.png" alt="image-20210202222324678"></p>
<h3 id="Like运算符"><a href="#Like运算符" class="headerlink" title="Like运算符"></a>Like运算符</h3><p>Like运算符：是用来进行模糊匹配（匹配字符串）</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">like ‘匹配模式’;</span><br></pre></td></tr></table></figure>
<p> 匹配模式中，有两种占位符：</p>
<p>_：匹配对应的单个字符</p>
<p>%：匹配多个字符</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202222501980.png" alt="image-20210202222501980"></p>
<h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>联合查询是可合并多个相似的选择查询的结果集。等同于将一个表追加到另一个表，从而实现将两个表的查询组合到一起，使用谓词为UNION或UNION ALL。</p>
<p> 联合查询：将多个查询的结果合并到一起（纵向合并）：字段数不变，多个查询的记录数合并。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol>
<li><p>将同一张表中不同的结果（需要对应多条查询语句来实现），合并到一起展示数据</p>
<p>男生身高升序排序，女生身高降序排序</p>
</li>
<li><p>最常见：在数据量大的情况下，会对表进行分表操作，需要对每张表进行部分数据统计，使用联合查询来讲数据存放到一起显示。</p>
<p>QQ1表获取在线数据</p>
<p>QQ2表获取在线数据 —》将所有在线的数据显示出来</p>
</li>
</ol>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>基本语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Select 语句 Union [union 选项] Select 语句;</span><br></pre></td></tr></table></figure>
<p>Union选项：与select选项基本一样</p>
<ul>
<li>Distinct：去重，去掉完全重复的数据（默认的）</li>
</ul>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203125848085.png" alt="image-20210203125848085"></p>
<ul>
<li>All：保存所有的结果</li>
</ul>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203125909251.png" alt="image-20210203125909251"></p>
<p><strong>注意细节：</strong>union理论上只要保证字段数一样，不需要每次拿到的数据对应的字段类型一致。永远只保留第一个select语句对应的字段名字。</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203130100920.png" alt="image-20210203130100920"></p>
<h3 id="Order-by的使用"><a href="#Order-by的使用" class="headerlink" title="Order by的使用"></a>Order by的使用</h3><ol>
<li>在联合查询中，如果要使用order by，那么对应的select语句必须使用括号括起来</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203130402708.png" alt="image-20210203130402708"></p>
<ol start="2">
<li>orderby在联合查询中若要生效，必须配合使用limit：而limit后面必须跟对应的限制数量（通常可以使用一个较大的值：大于对应表的记录数）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203130520207.png" alt="image-20210203130520207"></p>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><p>连接查询：将多张表连到一起进行查询（会导致记录数行和字段数列发生改变）</p>
<h3 id="连接查询的意义"><a href="#连接查询的意义" class="headerlink" title="连接查询的意义"></a>连接查询的意义</h3><p>在关系型数据库设计过程中，实体（表）与实体之间是存在很多联系的。在关系型数据库表的设计过程中，遵循着关系来设计：一对一，一对多和多对多，通常在实际操作的过程中，需要利用这层关系来保证数据的完整性。</p>
<h3 id="连接查询分类"><a href="#连接查询分类" class="headerlink" title="连接查询分类"></a>连接查询分类</h3><p>连接查询一共有以下几类：</p>
<ul>
<li><p>交叉连接</p>
</li>
<li><p>内连接</p>
</li>
<li><p>外连接：左外连接（左连接）和右外连接（右连接）</p>
</li>
<li><p>自然连接</p>
</li>
</ul>
<h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h3><p>交叉连接：将两张表的数据与另外一张表彼此交叉</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ol>
<li><p>从第一张表依次取出每一条记录</p>
</li>
<li><p>取出每一条记录之后，与另外一张表的全部记录挨个匹配</p>
</li>
<li><p>没有任何匹配条件，所有的结果都会进行保留</p>
</li>
<li><p>记录数 = 第一张表记录数 * 第二张表记录数；字段数 = 第一张表字段数 + 第二张表字段数（笛卡尔积）</p>
</li>
</ol>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">表1 cross join 表2;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203131410259.png" alt="image-20210203131410259"></p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>交叉连接产生的结果是笛卡尔积，没有实际应用。</p>
<p>本质：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">from 表1,表2;</span><br></pre></td></tr></table></figure>


<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><p>内连接：inner join，从一张表中取出所有的记录去另外一张表中匹配：利用匹配条件进行匹配，成功了则保留，失败了放弃。</p>
<h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ol>
<li><p>从第一张表中取出一条记录，然后去另外一张表中进行匹配</p>
</li>
<li><p>利用匹配条件进行匹配：</p>
<p>2.1 匹配到：保留，继续向下匹配</p>
<p>2.2 匹配失败：向下继续，如果全表匹配失败，结束</p>
</li>
</ol>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">表1 [inner] join 表2 on 匹配条件;</span><br></pre></td></tr></table></figure>
<ol>
<li>如果内连接没有条件（允许），那么其实就是交叉连接（避免）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132128041.png" alt="image-20210203132128041"></p>
<ol start="2">
<li>使用匹配条件进行匹配</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132218790.png" alt="image-20210203132218790"></p>
<ol start="3">
<li>因为表的设计通常容易产生同名字段，尤其是ID，所以为了避免重名出现错误，通常使用表名.字段名，来确保唯一性</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132326158.png" alt="image-20210203132326158"></p>
<ol start="4">
<li>通常，如果条件中使用到对应的表名，而表名通常比较长，所以可以通过表别名来简化</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132503852.png" alt="image-20210203132503852"></p>
<ol start="5">
<li>内连接匹配的时候，必须保证匹配到才会保存</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132715803.png" alt="image-20210203132715803"></p>
<ol start="6">
<li>内连接因为不强制必须使用匹配条件（on）因此可以在数据匹配完成之后，使用where条件来限制，效果与on一样（建议使用on）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203132850279.png" alt="image-20210203132850279"></p>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>内连接通常是在对数据有精确要求的地方使用：必须保证两种表中都能进行数据匹配。</p>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>外链接：outer join，按照某一张表作为主表（表中所有记录在最后都会保留），根据条件去连接另外一张表，从而得到目标数据。</p>
<p> 外连接分为两种：左外连接（left join），右外连接（right join）</p>
<ul>
<li><p>左连接：左表是主表</p>
</li>
<li><p>右连接：右表是主表</p>
</li>
</ul>
<h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ol>
<li><p>确定连接主表：左连接就是left join左边的表为主表；right join就是右边为主表</p>
</li>
<li><p>拿主表的每一条记录，去匹配另外一张表（从表）的每一条记录</p>
</li>
<li><p>如果满足匹配条件：保留；不满足即不保留</p>
</li>
<li><p>如果主表记录在从表中一条都没有匹配成功，那么也要保留该记录：从表对应的字段值都未NULL</p>
</li>
</ol>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><p>基本语法：</p>
<p>左连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">主表 left join 从表 on 连接条件;</span><br></pre></td></tr></table></figure>
<p>右连接：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">从表 right join 主表 on连接条件;</span><br></pre></td></tr></table></figure>
<p> 左连接对应的主表数据在左边；右连接对应的主表数据在右边：</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203150620682.png" alt="image-20210203150620682"></p>
<p>右连接查看数据</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203150715164.png" alt="image-20210203150715164"></p>
<p><strong>特点：</strong></p>
<ol>
<li><p>外连接中主表数据记录一定会保存：连接之后不会出现记录数少于主表（内连接可能）</p>
</li>
<li><p>左连接和右连接其实可以互相转换，但是数据对应的位置（表顺序）会改变</p>
</li>
</ol>
<h4 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h4><p>非常常用的一种获取的数据方式：作为数据获取对应主表以及其他数据（关联）</p>
<h3 id="Using关键字"><a href="#Using关键字" class="headerlink" title="Using关键字"></a>Using关键字</h3><p>是在连接查询中用来代替对应的on关键字的，进行条件匹配。</p>
<h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><ol>
<li><p>在连接查询时，使用on的地方用using代替</p>
</li>
<li><p>使用using的前提是对应的两张表连接的字段是同名（类似自然连接自动匹配）</p>
</li>
<li><p>如果使用using关键字，那么对应的同名字段，最终在结果中只会保留一个。</p>
</li>
</ol>
<h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">表1 [inner,left,right] join 表2 using(同名字段列表); 	//连接字段</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210203151711963.png" alt="image-20210203151711963"></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>Shell脚本</title>
    <url>/2021/01/29/Shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="一、shell介绍"><a href="#一、shell介绍" class="headerlink" title="一、shell介绍"></a>一、shell介绍</h2><ul>
<li>什么是shell</li>
<li>shell功能</li>
</ul>
<hr>
<h3 id="1-什么是shell"><a href="#1-什么是shell" class="headerlink" title="1.什么是shell"></a>1.什么是shell</h3><p>shell是一个程序，采用C语言编写，是用户和Linux内核沟通的桥梁。它既是一种命令语言，又是一种解释性的编程语言。通过一个图标来查看以下设立了的作用</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/00_shell%E4%BB%8B%E7%BB%8D.png"></p>
<blockquote>
<p><strong>扩展知识</strong></p>
<p>kernel（内核）：为软件服务，接收用户或软件指令驱动硬件，完成工作；</p>
<p>shell：命令解释器</p>
<p>user：用户接口，对接用户</p>
</blockquote>
<p>从上图可以看出，shell在操作系统中起到了承接用户和系统内核的作用。那为什么步直接用户对内核呢？</p>
<p>原因很简单，因为内核处理的都是二进制，而用户处理的都是高级语言。简而言之，如果没有shell，你希望告诉你喜欢的妹子：我爱你。你需要经过以下步骤：</p>
<ol>
<li>将“我爱你”翻译成二进制</li>
<li>告诉内核</li>
<li>内核通过网卡发送给你的妹子</li>
<li>妹子计算机网卡收到你发的二进制</li>
<li>网卡交给内核</li>
<li>内核交给妹子</li>
<li>妹子看到都是一串01组成的数字，o my god，二进制不是人人都懂的，你的表白也就石沉大海了。</li>
</ol>
<p>为了让所有人都能够快速、方便地使用计算机，我们打的系统开发人员通过shell解决了这个问题。使任何一个希望通过计算机来工作、娱乐的人都能够快速操作计算机。</p>
<h3 id="2-shell功能"><a href="#2-shell功能" class="headerlink" title="2. shell功能"></a>2. shell功能</h3><ul>
<li>命令行解释功能</li>
<li>启动程序</li>
<li>输入输出重定向</li>
<li>管道连接</li>
<li>文件名置换(echo /*)</li>
<li>变量维护</li>
<li>环境控制</li>
<li>shell编程</li>
</ul>
<h2 id="二、shell语法"><a href="#二、shell语法" class="headerlink" title="二、shell语法"></a>二、shell语法</h2><ul>
<li>如何书写一个shell脚本</li>
<li>shell脚本运行</li>
<li>shell中的特殊符号</li>
<li>管道</li>
<li>重定向</li>
<li>shell中数学运算</li>
<li>脚本退出</li>
</ul>
<hr>
<p>**shell脚本就是将完成一个任务的所有命令按照执行的先后顺序，自上而下写入到一个文本文件中，然后给予执行权限。</p>
<h3 id="1-如何书写一个shell脚本"><a href="#1-如何书写一个shell脚本" class="headerlink" title="1.如何书写一个shell脚本"></a>1.如何书写一个shell脚本</h3><p>shell脚本的命名：</p>
<p>名字要有意义，最好不要用a、b、c、d、1、2、3、4这中方式命名；虽然在linux系统中，文件没有扩展名的概念，依然建议你用.sh结尾；名字不要太长，最好能在30个字节以内解决。例如check_memory.sh</p>
<p>shell脚本格式：</p>
<p>shell脚本开头必须指定脚本运行环境，以<code>#!</code>这个特殊符号组合了组成。如： #!/bin/bash 指定该脚本是运行解析由/bin/bash来完成的：</p>
<p>shell中的注释使用<code>#</code>号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shell脚本中，最好加入脚本说明字段</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Author: xxx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Created Time: xxxx/xx/xx xx:xx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Release:1.0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">Script Description: first shell study script</span></span><br></pre></td></tr></table></figure>


<h3 id="2-如何运行一个shell脚本"><a href="#2-如何运行一个shell脚本" class="headerlink" title="2.如何运行一个shell脚本"></a>2.如何运行一个shell脚本</h3><p>脚本运行需要执行权限，当我们给一个文件赋予执行权限后，该脚本就可以运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x filename</span><br></pre></td></tr></table></figure>
<p>如果不希望赋予脚本执行权限，那么可以使用bash命令来运行未给予执行权限的脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash filename</span><br></pre></td></tr></table></figure>


<h3 id="3-shell中的特殊符号"><a href="#3-shell中的特殊符号" class="headerlink" title="3. shell中的特殊符号"></a>3. shell中的特殊符号</h3><table>
<thead>
<tr>
<th align="center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">~</td>
<td>家目录        # cd ~ 代表进入用户家目录</td>
</tr>
<tr>
<td align="center">!</td>
<td>执行历史命令            ~~执行上一条命令</td>
</tr>
<tr>
<td align="center">$</td>
<td>变量中取内容符</td>
</tr>
<tr>
<td align="center">+ - * / %</td>
<td>对应数学运算    加 减 乘 除 取余</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td>后台执行</td>
</tr>
<tr>
<td align="center">*</td>
<td>型号是shell中的通配符，匹配所有</td>
</tr>
<tr>
<td align="center">?</td>
<td>问号是shell中的通配符，匹配除回车以外的一个字符</td>
</tr>
<tr>
<td align="center">;</td>
<td>分号可以在shell中一行执行多个命令，命令hi加用分号分隔</td>
</tr>
<tr>
<td align="center">|</td>
<td>管道符，上一个命令的输出作为下一个命令的输入    cat filename | grep “abc”</td>
</tr>
<tr>
<td align="center">\</td>
<td>转义字符</td>
</tr>
<tr>
<td align="center">``</td>
<td>反引号 命令中执行命令        echo “today is /<code>date +%F/</code>”</td>
</tr>
<tr>
<td align="center">‘ ‘</td>
<td>单引号，脚本中字符串要用单引号引起来，但不同于双引号的是，单引号不解释变量</td>
</tr>
<tr>
<td align="center">“ “</td>
<td>双引号，脚本中出现的字符串可以用双引号引起来</td>
</tr>
</tbody></table>
<h3 id="4-shell中管道的运用"><a href="#4-shell中管道的运用" class="headerlink" title="4. shell中管道的运用"></a>4. shell中管道的运用</h3><p>|  管道符在shell中使用是最多的，很多组合命令都需要通过组合命令来完成输出。管道符其实就是下一个命令对上一个命令的输出做处理。</p>
<h3 id="5-shell重定向"><a href="#5-shell重定向" class="headerlink" title="5. shell重定向"></a>5. shell重定向</h3><ol>
<li>&gt;    重定向输入  覆盖原数据</li>
<li>&gt;&gt;  重定向追加输入，在原数据的末尾添加</li>
<li>&lt;    重定向输出     wc -l &lt; /etc/passwd</li>
<li>&lt;&lt;  重定向追加输出  fdisk /dev/sdb &lt;</li>
</ol>
<h3 id="6-shell数学运算"><a href="#6-shell数学运算" class="headerlink" title="6. shell数学运算"></a>6. shell数学运算</h3><p>expr 命令：只能做整数运算，格式比较古板，注意空格</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expr 1 + 1</span><br><span class="line">expr 5 - 2</span><br><span class="line">expr 5 \* 2</span><br><span class="line">expr 5 / 2</span><br><span class="line">expr 5 % 2</span><br></pre></td></tr></table></figure>
<p>使用bc计算器处理浮点运算，sacle=2代表小数点保留两位</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;scale=2;3+100&quot;|bc</span><br><span class="line">echo &quot;scale=2;100-3&quot;|bc</span><br><span class="line">echo &quot;scale=2;100/3&quot;|bc</span><br><span class="line">echo &quot;scale=2;100*3&quot;|bc</span><br></pre></td></tr></table></figure>
<p>双小圆括号运算，在shell中(())也可以用来做数学运算</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span>+<span class="number">3</span>))</span><br><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span><span class="number">-3</span>)) </span><br><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span>%<span class="number">3</span>))</span><br><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span>*<span class="number">3</span>))</span><br><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span>/<span class="number">3</span>))</span><br><span class="line"><span class="keyword">echo</span> $(( <span class="number">100</span>**<span class="number">3</span>))		<span class="comment">//开方运算    </span></span><br></pre></td></tr></table></figure>


<h3 id="7-退出脚本"><a href="#7-退出脚本" class="headerlink" title="7.退出脚本"></a>7.退出脚本</h3><p>exit NUM：退出脚本，释放系统资源，NUM代表一个整数，代表返回值。</p>
<h2 id="三、shell格式化输出"><a href="#三、shell格式化输出" class="headerlink" title="三、shell格式化输出"></a>三、shell格式化输出</h2><ul>
<li>echo命令</li>
<li>颜色输出</li>
</ul>
<hr>
<p><strong>一个程序需要有0个或以上输入，一个或更多输出</strong></p>
<h3 id="1-echo命令介绍"><a href="#1-echo命令介绍" class="headerlink" title="1. echo命令介绍"></a>1. echo命令介绍</h3><p>echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。 该命令的一般格式为:echo [ -n ]字符串</p>
<p>其中选项n表示输出文字后不换行;字符串能加引号，也能不加引号。用echo命令输出加引号的字符串时，将字符串原样输出;用echo命令输出不加引号的字符串时，将字符串中的各个单词作为字符串输出，各字符串之间用一个空格分割。</p>
<p>功能说明:显示文字。</p>
<p>语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo [-ne][字符串]	</span><br><span class="line">echo [--help][--version] </span><br></pre></td></tr></table></figure>
<p>补充说明：echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开,并在最后加上换行号。</p>
<p>命令选项：</p>
<p>-n：不要在最后自动换行；</p>
<p>-e：若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出:</p>
<p>​    转义字符：</p>
<table>
<thead>
<tr>
<th align="center">转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\a</td>
<td>发出警告声</td>
</tr>
<tr>
<td align="center">\b</td>
<td>删除前一个字符</td>
</tr>
<tr>
<td align="center">\c</td>
<td>最后不加上换行符号</td>
</tr>
<tr>
<td align="center">\f</td>
<td>换行但光标仍旧停留在原来的位置</td>
</tr>
<tr>
<td align="center">\n</td>
<td>换行且光标移至行首</td>
</tr>
<tr>
<td align="center">\r</td>
<td>光标移至行首，但不换行</td>
</tr>
<tr>
<td align="center">\t</td>
<td>插入tab</td>
</tr>
<tr>
<td align="center">\v</td>
<td>与\f相同</td>
</tr>
<tr>
<td align="center">\\</td>
<td>插入\字符</td>
</tr>
<tr>
<td align="center">\nnn</td>
<td>插入nnn(八进制)所代表的ASCII字符</td>
</tr>
</tbody></table>
<p>举例：输出一个菜单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo -e &quot;\t\t\t\tFruit Shop&quot;</span><br><span class="line">echo -e &quot;\t1) Apple&quot;</span><br><span class="line">echo -e &quot;\t2) Orange&quot;</span><br><span class="line">echo -e &quot;\t3) Banana&quot;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">			Fruit Shop</span><br><span class="line">1) Apple</span><br><span class="line">2) Orange</span><br><span class="line">3) Banana</span><br></pre></td></tr></table></figure>


<h3 id="2-颜色代码"><a href="#2-颜色代码" class="headerlink" title="2.颜色代码"></a>2.颜色代码</h3><p>脚本中echo显示内容带颜色显示,echo显示带颜色，需要使用参数-e</p>
<p>格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e “\033[字背景颜色；文字颜色m字符串\033[0m”</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e “\033[41;36m something here \033[0m”</span><br></pre></td></tr></table></figure>
<ol>
<li><p>字背景颜色和文字颜色之间是英文的””</p>
</li>
<li><p>文字颜色后面有个m</p>
</li>
<li><p>字符串前后可以没有空格，如果有的话，输出也是同样有空格</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">下面是相应的字和背景颜色，可以自己来尝试找出不同颜色搭配</span><br><span class="line">　　例</span><br><span class="line">　　echo -e “\033[31m 红色字 \033[0m”</span><br><span class="line">　　echo -e “\033[34m 黄色字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;33m 红底黄字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;37m 红底白字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">字颜色：30—–37</span><br><span class="line">　　echo -e “\033[30m 黑色字 \033[0m”</span><br><span class="line">　　echo -e “\033[31m 红色字 \033[0m”</span><br><span class="line">　　echo -e “\033[32m 绿色字 \033[0m”</span><br><span class="line">　　echo -e “\033[33m 黄色字 \033[0m”</span><br><span class="line">　　echo -e “\033[34m 蓝色字 \033[0m”</span><br><span class="line">　　echo -e “\033[35m 紫色字 \033[0m”</span><br><span class="line">　　echo -e “\033[36m 天蓝字 \033[0m”</span><br><span class="line">　　echo -e “\033[37m 白色字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">字背景颜色范围：40—–47</span><br><span class="line">　　echo -e “\033[40;37m 黑底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[41;37m 红底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[42;37m 绿底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[43;37m 黄底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[44;37m 蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[45;37m 紫底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[46;37m 天蓝底白字 \033[0m”</span><br><span class="line">　　echo -e “\033[47;30m 白底黑字 \033[0m”</span><br><span class="line">　　</span><br><span class="line">最后面控制选项说明</span><br><span class="line">　　\033[0m 关闭所有属性</span><br><span class="line">　　\033[1m 设置高亮度</span><br><span class="line">　　\033[4m 下划线</span><br><span class="line">　　\033[5m 闪烁</span><br><span class="line">　　\033[7m 反显</span><br><span class="line">　　\033[8m 消隐</span><br><span class="line">　　\033[30m — \33[37m </span><br><span class="line">设置前景色</span><br><span class="line">　　\033[40m — \33[47m 设置背景色</span><br><span class="line">　　\033[nA 光标上移n行</span><br><span class="line">　　\033[nB 光标下移n行</span><br><span class="line">　　\033[nC 光标右移n行</span><br><span class="line">　　\033[nD 光标左移n行</span><br><span class="line">　　\033[y;xH设置光标位置</span><br><span class="line">　　\033[2J 清屏</span><br><span class="line">　　\033[K 清除从光标到行尾的内容</span><br><span class="line">　　\33[s 保存光标位置</span><br><span class="line">　　\033[u 恢复光标位置</span><br><span class="line">　　\033[?25l 隐藏光标</span><br><span class="line">　　\033[?25h 显示光标</span><br></pre></td></tr></table></figure>


<h2 id="四、shell基本输入"><a href="#四、shell基本输入" class="headerlink" title="四、shell基本输入"></a>四、shell基本输入</h2><ul>
<li>read命令</li>
</ul>
<hr>
<h3 id="1-read命令"><a href="#1-read命令" class="headerlink" title="1. read命令"></a>1. read命令</h3><p>默认接受键盘的输入，回车符代表输入结束</p>
<table>
<thead>
<tr>
<th align="center">read 命令选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-p</td>
<td>打印信息</td>
</tr>
<tr>
<td align="center">-t</td>
<td>限定时间</td>
</tr>
<tr>
<td align="center">-s</td>
<td>不回显</td>
</tr>
<tr>
<td align="center">-n</td>
<td>输入字符个数</td>
</tr>
</tbody></table>
<h2 id="五、shell变量"><a href="#五、shell变量" class="headerlink" title="五、shell变量"></a>五、shell变量</h2><ul>
<li>变量介绍</li>
<li>变量分类</li>
<li>变量管理</li>
</ul>
<hr>
<h3 id="1-变量介绍"><a href="#1-变量介绍" class="headerlink" title="1.变量介绍"></a>1.变量介绍</h3><ol>
<li> 在编程中，我们总有一些数据需要临时存放在内存，以待后续使用时快速读出。内存在系统启动的时候被按照1B一个单位划分为若干个块，然后统一</li>
<li> 编号(16进制编号)，并对内存的使用情况做记录，保存在内存跟踪表中。</li>
</ol>
<p>变量：变量是编程中最常用的一种临时在内存中存取数据的一种方式。</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/kcxvft.png" alt="img"></p>
<p>从图片可以看出，当我们在脚本中定义变量存值的时候，可以从以下方面看到变化：</p>
<ol>
<li><p>内存占用：如果存的是一个字符则占用1个字节，如果存的是字符串则是字符串的长度加1个字节长度(\0是一个特殊字符，代表字符串结束)。</p>
</li>
<li><p>变量名与内存空间关系：计算机中会将对应的内存空间和变量名称绑定在一起，此时代表这段内存空间已经被程序占用，其他程序不可复用；然后将变量名对应的值存在对应内存地址的空间里。</p>
</li>
</ol>
<h3 id="2-变量分类"><a href="#2-变量分类" class="headerlink" title="2.变量分类"></a>2.变量分类</h3><ol>
<li>本地变量：用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</li>
<li>全局变量：所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件中</li>
<li>用户自定义变量：用户自定义，比如脚本中的变量</li>
</ol>
<h3 id="3-定义变量"><a href="#3-定义变量" class="headerlink" title="3.定义变量"></a>3.定义变量</h3><h4 id="3-1定义变量"><a href="#3-1定义变量" class="headerlink" title="3.1定义变量"></a>3.1定义变量</h4><p>变量格式：<code>变量名=值</code></p>
<p><strong>在shell编程中的变量名和等号之间不能有空格</strong></p>
<p>变量命名规则：</p>
<ol>
<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>
<li>中间不能有空格，可以使用下划线（_）。</li>
<li>不能使用标点符号。</li>
<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VAR1=1</span><br><span class="line"></span><br><span class="line">age=18</span><br><span class="line"></span><br><span class="line">name=&#x27;baism&#x27;</span><br><span class="line"></span><br><span class="line">score=88.8</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：字符串要用单引号或双引号引起来</p>
<h4 id="3-2读取变量内容"><a href="#3-2读取变量内容" class="headerlink" title="3.2读取变量内容"></a>3.2读取变量内容</h4><p>读取变量内容符:<code>$</code></p>
<p>读取方法：<code>$变量名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $name</span><br><span class="line">echo $school</span><br><span class="line">echo $age</span><br><span class="line">echo $score</span><br></pre></td></tr></table></figure>
<h4 id="3-3取消变量unset"><a href="#3-3取消变量unset" class="headerlink" title="3.3取消变量unset"></a>3.3取消变量unset</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset name</span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure>
<h4 id="3-4定义全局变量export"><a href="#3-4定义全局变量export" class="headerlink" title="3.4定义全局变量export"></a>3.4定义全局变量export</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export name=&#x27;Tom&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：</p>
<ol>
<li><p>上述设置的变量其实都是一次性变量，系统重启就会丢失。</p>
</li>
<li><p>如果希望本地变量或者全局变量可以永久使用，可以将需要设置的变量写入变量文件中即可。</p>
</li>
</ol>
<h4 id="3-5定义永久变量"><a href="#3-5定义永久变量" class="headerlink" title="3.5定义永久变量"></a>3.5定义永久变量</h4><p>本地变量：用户私有变量，只有本用户可以使用，保存在家目录下的.bash_profile、.bashrc文件中</p>
<p>全局变量：所有用户都可以使用，保存在/etc/profile、/etc/bashrc文件中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本地变量</span></span><br><span class="line">tail -1 ~/.bash_profile</span><br><span class="line">name=&#x27;baism&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">全局变量</span></span><br><span class="line">tail -1 /etc/profile</span><br><span class="line">export age=30</span><br></pre></td></tr></table></figure>


<h2 id="六、shell数组"><a href="#六、shell数组" class="headerlink" title="六、shell数组"></a>六、shell数组</h2><ul>
<li>数组介绍</li>
<li>基本数组</li>
<li>关联数组</li>
<li>案列分享</li>
</ul>
<hr>
<h3 id="1-数组介绍"><a href="#1-数组介绍" class="headerlink" title="1.数组介绍"></a>1.数组介绍</h3><p>一个变量只能存一个值，但是现实中又又很多值需要存储，那么变量就有些拘谨了。比如做一个学员信息表，一个班50个人，每个人6条信息，我们需要定义300个变量才能完成。恐怖恐怖，这只是一个班的学生，一个学校呢？一个市呢？……我想静静了！</p>
<p>仔细想想上述的案例，一个学生六个信息:ID、姓名、性别、年龄、成绩、班级。可不可以定义六个变量就能存储这六类信息呢？答案是当然可以的！变量不行，我们就用数组。</p>
<h3 id="2-基本数组"><a href="#2-基本数组" class="headerlink" title="2.基本数组"></a>2.基本数组</h3><p>数组可以让用户一次赋予多个值，需要读取数据时只需通过索引调用就可以方便读出了。</p>
<h4 id="2-1数组语法"><a href="#2-1数组语法" class="headerlink" title="2.1数组语法"></a>2.1数组语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">数组名称=(元素1 元素2 元素3 ...)</span><br></pre></td></tr></table></figure>
<h4 id="2-2数组读出"><a href="#2-2数组读出" class="headerlink" title="2.2数组读出"></a>2.2数组读出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;数组名称[索引]&#125;</span></span><br></pre></td></tr></table></figure>
<p>索引默认是元素在数组中的排队编号，默认第一个从0开始</p>
<h4 id="2-3数组赋值"><a href="#2-3数组赋值" class="headerlink" title="2.3数组赋值"></a>2.3数组赋值</h4><p><strong>方法一：一次赋一个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array0[0]=&#x27;tom&#x27;</span><br><span class="line">array0[1]=&#x27;jarry&#x27;</span><br><span class="line">array0[2]=&#x27;natasha&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>方法二： 一次赋多个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array2=(tom jack alice)</span><br><span class="line">array3=(cat /etc/passwd) 	#希望是将该文件中的每一个行作为一个元素赋值给数组array3</span><br><span class="line">array4=(ls /var/ftp/Shell/for*)</span><br><span class="line">array5=(tom jack alice “bash shell”)</span><br></pre></td></tr></table></figure>
<h4 id="2-4查看数组"><a href="#2-4查看数组" class="headerlink" title="2.4查看数组"></a>2.4查看数组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare -a</span><br><span class="line">declare -a array1=&#x27;([0]=”pear” [1]=”apple” [2]=”orange” [3]=”peach”)&#x27;</span><br><span class="line">declare -a array2=&#x27;([0]=”tom” [1]=”jack” [2]=”alice”)&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="2-5访问数组元素"><a href="#2-5访问数组元素" class="headerlink" title="2.5访问数组元素"></a>2.5访问数组元素</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;array1[0]&#125; 		#访问数组中的第一个元素</span><br><span class="line">echo $&#123;array1[@]&#125; 		#访问数组中所有元素 等同于 echo $&#123;array1[*]&#125;</span><br><span class="line">echo $&#123;#array1[@]&#125; 		#统计数组元素的个数</span><br><span class="line">echo $&#123;!array2[@]&#125; 		#获取数组元素的索引</span><br><span class="line">echo $&#123;array1[@]:1&#125; 	#从数组下标1开始</span><br><span class="line">echo $&#123;array1[@]:1:2&#125; 	#从数组下标1开始，访问两个元素</span><br></pre></td></tr></table></figure>
<h4 id="2-6遍历数组"><a href="#2-6遍历数组" class="headerlink" title="2.6遍历数组"></a>2.6遍历数组</h4><p>默认数组通过数组元素的个数进行遍历</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;ass_array2[index1]&#125;</span><br><span class="line">echo $&#123;ass_array2[index2]&#125;</span><br><span class="line">echo $&#123;ass_array2[index3]&#125;</span><br><span class="line">echo $&#123;ass_array2[index4]&#125;</span><br></pre></td></tr></table></figure>
<p>方法二： 针对关联数组可以通过数组元素的索引进行遍历</p>
<h3 id="3-关联数组"><a href="#3-关联数组" class="headerlink" title="3.关联数组"></a>3.关联数组</h3><p>关联数组可以允许用户自定义数组的索引，这样使用起来更加方便、高效。</p>
<h4 id="3-1定义关联数组"><a href="#3-1定义关联数组" class="headerlink" title="3.1定义关联数组"></a>3.1定义关联数组</h4><p>申明关联数组变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare -A ass_array1</span><br><span class="line">declare -A ass_array2</span><br></pre></td></tr></table></figure>
<h4 id="3-2关联数组赋值"><a href="#3-2关联数组赋值" class="headerlink" title="3.2关联数组赋值"></a>3.2关联数组赋值</h4><p><strong>方法一： 一次赋一个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">数组名[索引]=变量值</span><br><span class="line">ass_array1[index1]=pear</span><br><span class="line">ass_array1[index2]=apple</span><br><span class="line">ass_array1[index3]=orange</span><br><span class="line">ass_array1[index4]=peach</span><br></pre></td></tr></table></figure>
<p><strong>方法二： 一次赋多个值</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ass_array2=([index1]=tom [index2]=jack [index3]=alice [index4]=’bash shell’)</span><br></pre></td></tr></table></figure>
<h4 id="3-3查看数组"><a href="#3-3查看数组" class="headerlink" title="3.3查看数组"></a>3.3查看数组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">declare -A</span><br><span class="line">declare -A ass_array1=’([index4]=”peach” [index1]=”pear” [index2]=”apple” [index3]=”orange” )’</span><br><span class="line">declare -A ass_array2=’([index4]=”bash shell” [index1]=”tom” [index2]=”jack” [index3]=”alice” )’</span><br></pre></td></tr></table></figure>
<h4 id="3-4访问数组元素"><a href="#3-4访问数组元素" class="headerlink" title="3.4访问数组元素"></a>3.4访问数组元素</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;ass_array2[index2]&#125; 		#访问数组中的第二个元数</span><br><span class="line">echo $&#123;ass_array2[@]&#125; 			#访问数组中所有元数 等同于 echo $&#123;array1[*]&#125;</span><br><span class="line">echo $&#123;#ass_array2[@]&#125; 			#获得数组元数的个数</span><br><span class="line">echo $&#123;!ass_array2[@]&#125; 			#获得数组元数的索引</span><br></pre></td></tr></table></figure>
<h4 id="3-5遍历数组"><a href="#3-5遍历数组" class="headerlink" title="3.5遍历数组"></a>3.5遍历数组</h4><p>通过数组元数的索引进行遍历,针对关联数组可以通过数组元素的索引进行遍历</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;ass_array2[index1]&#125;</span><br><span class="line">echo $&#123;ass_array2[index2]&#125;</span><br><span class="line">echo $&#123;ass_array2[index3]&#125;</span><br><span class="line">echo $&#123;ass_array2[index4]&#125;</span><br></pre></td></tr></table></figure>


<h3 id="4-案例分享——学员信息系统"><a href="#4-案例分享——学员信息系统" class="headerlink" title="4.案例分享——学员信息系统"></a>4.案例分享——学员信息系统</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for ((i=0;i&lt;3;i++))</span><br><span class="line">   do</span><br><span class="line">      read -p &quot;输入第$((i + 1))个人名: &quot; name[$i]</span><br><span class="line">      read -p &quot;输入第$[$i + 1]个年龄: &quot; age[$i]</span><br><span class="line">      read -p &quot;输入第`expr $i + 1`个性别: &quot; gender[$i]</span><br><span class="line">done</span><br><span class="line">clear</span><br><span class="line">      echo -e &quot;\t\t\t\t学员查询系统&quot;</span><br><span class="line">while :</span><br><span class="line">   do</span><br><span class="line">      cp=0</span><br><span class="line"><span class="meta">#</span><span class="bash">      <span class="built_in">echo</span> -e <span class="string">&quot;\t\t\t\t学员查询系统&quot;</span></span></span><br><span class="line">      read -p &quot;输入要查询的姓名: &quot; xm</span><br><span class="line">      [ $xm == &quot;Q&quot; ]&amp;&amp;exit</span><br><span class="line">      for ((i=0;i&lt;3;i++))</span><br><span class="line">         do</span><br><span class="line">              if [ &quot;$xm&quot; == &quot;$&#123;name[$i]&#125;&quot; ];then</span><br><span class="line">                  echo &quot;$&#123;name[$i]&#125; $&#123;age[$i]&#125; $&#123;gender[$i]&#125;&quot;</span><br><span class="line">                  cp=1</span><br><span class="line">              fi</span><br><span class="line">      done</span><br><span class="line">      [ $cp -eq 0 ]&amp;&amp;echo &quot;not found student&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="七、shell流程控制-if判断语句"><a href="#七、shell流程控制-if判断语句" class="headerlink" title="七、shell流程控制-if判断语句"></a>七、shell流程控制-if判断语句</h2><ul>
<li>shell中的五大运算</li>
<li>if语法</li>
</ul>
<hr>
<p>当我们在写程序的时候，时常对上一步执行是否成功如何判断苦恼，当我们今天学习了if就可以解决你的苦恼。if语句在我们程序中就是用来做判断的，以后大家不管学习什么语言，以后只要涉及到判断的部分，大家就可以直接拿if来使用，不同的语言之间的if只是语法不同，原理是相同的。</p>
<h3 id="1-shell中的运算"><a href="#1-shell中的运算" class="headerlink" title="1. shell中的运算"></a>1. shell中的运算</h3><h4 id="1-1数学比较运算"><a href="#1-1数学比较运算" class="headerlink" title="1.1数学比较运算"></a>1.1数学比较运算</h4><p>运算符解释：</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-eq</td>
<td>等于</td>
</tr>
<tr>
<td align="center">-gt</td>
<td>大于</td>
</tr>
<tr>
<td align="center">-lt</td>
<td>小于</td>
</tr>
<tr>
<td align="center">-ge</td>
<td>大于或等于</td>
</tr>
<tr>
<td align="center">-le</td>
<td>小于或等于</td>
</tr>
<tr>
<td align="center">-ne</td>
<td>不等于</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">test 1 -eq 1;$?		#0（shell中0为真，1为假）</span><br><span class="line">test 1 -lt 1;$?		#1	</span><br></pre></td></tr></table></figure>
<h4 id="1-2字符串比较运算"><a href="#1-2字符串比较运算" class="headerlink" title="1.2字符串比较运算"></a>1.2字符串比较运算</h4><p>运算符解释，注意字符串一定别忘了使用引号引起来</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td>等于</td>
</tr>
<tr>
<td align="center">!=</td>
<td>不等于</td>
</tr>
<tr>
<td align="center">-n</td>
<td>检查字符串的长度是否大于0</td>
</tr>
<tr>
<td align="center">-z</td>
<td>检查字符串的长度是否为0</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">test &#x27;abc&#x27; -n</span><br></pre></td></tr></table></figure>
<h4 id="1-3文件比较与检查"><a href="#1-3文件比较与检查" class="headerlink" title="1.3文件比较与检查"></a>1.3文件比较与检查</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-d</td>
<td>检查文件是否存在且为目录</td>
</tr>
<tr>
<td align="center">-e</td>
<td>检查文件是否存在</td>
</tr>
<tr>
<td align="center">-f</td>
<td>检查文件是否存在且为文件</td>
</tr>
<tr>
<td align="center">-r</td>
<td>检查文件是否存在且可读</td>
</tr>
<tr>
<td align="center">-s</td>
<td>检查文件是否存在且不为空</td>
</tr>
<tr>
<td align="center">-w</td>
<td>检查文件是否存在且可写</td>
</tr>
<tr>
<td align="center">-x</td>
<td>检查文件是否存在且可执行</td>
</tr>
<tr>
<td align="center">-O</td>
<td>检查文件是否存在并且被当前用户拥有</td>
</tr>
<tr>
<td align="center">-G</td>
<td>检查文件是否存在并且默认组为当前用户组</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file1 -nt file2  检查file1是否比file2新</span><br><span class="line">file1 -ot file2  检查file1是否比file2旧</span><br><span class="line">file1 -ef file2  检查file1是否与file2是同一个文件</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">test -d /opt/shell;echo $?		#0</span><br><span class="line">test -e /opt/shell/shell_05.sh;echo $?		#0</span><br></pre></td></tr></table></figure>
<h4 id="1-4逻辑运算"><a href="#1-4逻辑运算" class="headerlink" title="1.4逻辑运算"></a>1.4逻辑运算</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&amp;&amp;</td>
<td>逻辑与运算</td>
</tr>
<tr>
<td align="center">||</td>
<td>逻辑或运算</td>
</tr>
<tr>
<td align="center">！</td>
<td>逻辑非运算</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 1 -eq 1 ] &amp;&amp; [ 2 -eq 2 ];then echo &quot;yes&quot;;else echo &quot;no&quot;;fi		#yes</span><br></pre></td></tr></table></figure>
<p><strong>逻辑运算注意事项：逻辑与 或 运算都需要两个或以上条件，逻辑非运算只能一个条件。</strong></p>
<h4 id="1-5赋值运算"><a href="#1-5赋值运算" class="headerlink" title="1.5赋值运算"></a>1.5赋值运算</h4><p>=：赋值运算符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=10   </span><br><span class="line">name=&#x27;baism&#x27;</span><br></pre></td></tr></table></figure>


<h3 id="2-if语法"><a href="#2-if语法" class="headerlink" title="2. if语法"></a>2. if语法</h3><h4 id="2-1语法一：单if语句"><a href="#2-1语法一：单if语句" class="headerlink" title="2.1语法一：单if语句"></a>2.1语法一：单if语句</h4><p>适用范围:只需要一步判断，条件返回真干什么或者条件返回假干什么。</p>
<p>语句格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ condition ]           #condition 值为true or false</span><br><span class="line">   then</span><br><span class="line">      commands</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>判断当前用户是不是root，如果不是那么返回”ERROR: need to be root so that!“</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if[ $USER != &#x27;root&#x27; ]</span><br><span class="line">	then</span><br><span class="line">		echo &quot;ERROR:need to be so that&quot;</span><br><span class="line">		exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="2-2语法二：if-then-else语句"><a href="#2-2语法二：if-then-else语句" class="headerlink" title="2.2语法二：if-then-else语句"></a>2.2语法二：if-then-else语句</h4><p>适用范围:两步判断，条件为真干什么，条件为假干什么。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ condition ]</span><br><span class="line">     then</span><br><span class="line">          commands1</span><br><span class="line">else</span><br><span class="line">          commands2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>判断当前登录用户是管理员还是普通用户,如果是管理员输出”hey admin“ 如果是普通用户输出”hey guest“</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $USER == &#x27;root&#x27; ]</span><br><span class="line">	then </span><br><span class="line">		echo &quot;hey admin&quot;</span><br><span class="line">else </span><br><span class="line">		echo &quot;hey guest&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<h4 id="2-3语法三：if-then-elif语句"><a href="#2-3语法三：if-then-elif语句" class="headerlink" title="2.3语法三：if-then-elif语句"></a>2.3语法三：if-then-elif语句</h4><p>适用范围:多于两个以上的判断结果，也就是多于一个以上的判断条件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ condition 1]</span><br><span class="line">     then</span><br><span class="line">            commands1</span><br><span class="line">elif [ condition 2]</span><br><span class="line">     then</span><br><span class="line">             commands2</span><br><span class="line">  .......</span><br><span class="line">else</span><br><span class="line">            commandsX</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>通过一个脚本，判断两个整数的关系。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $1 -gt $2 ]</span><br><span class="line">	then</span><br><span class="line">        echo &quot;$1 &gt; $2&quot;</span><br><span class="line">elif [ $1 -eq $2 ]</span><br><span class="line">	then</span><br><span class="line">        echo &quot;$1 = $2&quot;</span><br><span class="line">else</span><br><span class="line">        echo &quot;$1 &lt; $2&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>


<h3 id="3-if高级应用"><a href="#3-if高级应用" class="headerlink" title="3. if高级应用"></a>3. if高级应用</h3><ol>
<li>条件符号使用双圆括号，可以在条件中植入数学表达式</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if (( 100%3+1&gt;1 ));then</span><br><span class="line">	echo &quot;yes&quot;</span><br><span class="line">else</span><br><span class="line">	echo &quot;no&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p><strong>注意 双小圆括号中的比较运算符 使用的是我们传统的比较运算符 &gt;&gt;= == &lt;&lt;= !=</strong></p>
<ol start="2">
<li>使用双方括号,可以在条件中使用通配符</li>
</ol>
<p>为字符串提供高级功能，模式匹配 r* 匹配r开头的字符串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in r1 rr2 cc rr3</span><br><span class="line">	do</span><br><span class="line">		if [[ $i == r* ]];then</span><br><span class="line">			echo $i</span><br><span class="line">		fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>为字符串提供高级功能，模式匹配 r* 匹配r开头的字符串</p>
<h2 id="八、shell流程控制-for循环语句"><a href="#八、shell流程控制-for循环语句" class="headerlink" title="八、shell流程控制-for循环语句"></a>八、shell流程控制-for循环语句</h2><ul>
<li>for循环介绍</li>
</ul>
<ul>
<li>for语法</li>
<li>循环控制</li>
</ul>
<hr>
<p>脚本在执行任务的时候，总会遇到需要循环执行的时候，比如说我们需要脚本每隔五分钟执行一次ping的操作，除了计划任务，我们还可以使用脚本来完成，那么我们就用到了循环语句。</p>
<h3 id="1-for-循环介绍"><a href="#1-for-循环介绍" class="headerlink" title="1. for 循环介绍"></a>1. for 循环介绍</h3><p>很多人把for循环叫做条件循环，或者for i in 。其实前者说的就是for的特性，for循环的次数和给予的条件是成正比的，也就是你给5个条件，那么他就循环5次；后者说的是for的语法。</p>
<p>循环的优点：</p>
<ol>
<li>节省内存（完成同一个任务）</li>
<li>结构更清晰</li>
<li>节省时间成本</li>
</ol>
<h3 id="2-for语法"><a href="#2-for语法" class="headerlink" title="2. for语法"></a>2. for语法</h3><h4 id="2-1-for-语法一"><a href="#2-1-for-语法一" class="headerlink" title="2.1 for 语法一"></a>2.1 for 语法一</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for var in value1 value2 ......</span><br><span class="line">    do</span><br><span class="line">        commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>循环输出1-9数字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 1 9`		#seq 1 9 是从1数到9</span><br><span class="line">	do</span><br><span class="line">		echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h4 id="2-2-for语法二"><a href="#2-2-for语法二" class="headerlink" title="2.2 for语法二"></a>2.2 for语法二</h4><p>C式的for命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for ((变量;条件;自增减运算  ))</span><br><span class="line">   do</span><br><span class="line">          代码块</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>输出1-9</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for (( i=1;i&lt;10;i++ ))</span><br><span class="line">	do</span><br><span class="line">		echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>for循环使用多个变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for (( a=0,b=9;a&lt;10;a++,b-- ))</span><br><span class="line">	do</span><br><span class="line">		echo $a,$b</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>for 无限循环 使用((;;)) 条件可以实现无线循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for ((;;))</span><br><span class="line">	do</span><br><span class="line">		echo &quot;hehe&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h3 id="3-循环控制语句"><a href="#3-循环控制语句" class="headerlink" title="3.循环控制语句"></a>3.循环控制语句</h3><h4 id="3-1-sleep-N-脚本执行到该步休眠N秒"><a href="#3-1-sleep-N-脚本执行到该步休眠N秒" class="headerlink" title="3.1 sleep N 脚本执行到该步休眠N秒"></a>3.1 sleep N 脚本执行到该步休眠N秒</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `seq 9 -1 0`</span><br><span class="line">	do</span><br><span class="line">		echo -n -e &quot;\b$i&quot;</span><br><span class="line">		sleep 1</span><br><span class="line">done</span><br><span class="line">echo</span><br></pre></td></tr></table></figure>
<h4 id="3-2-continue-跳过循环中的某次循环"><a href="#3-2-continue-跳过循环中的某次循环" class="headerlink" title="3.2 continue 跳过循环中的某次循环"></a>3.2 continue 跳过循环中的某次循环</h4><p>默认循环输出1-9，但是使用continue跳过输出5</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for (( i=1;i&lt;10;i++ ))</span><br><span class="line">	do</span><br><span class="line">		if [ $i -eq 5 ]</span><br><span class="line">			then</span><br><span class="line">				continue</span><br><span class="line">			else</span><br><span class="line">            	echo $i</span><br><span class="line">            fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h4 id="3-3-break-跳出循环继续执行后续代码"><a href="#3-3-break-跳出循环继续执行后续代码" class="headerlink" title="3.3 break 跳出循环继续执行后续代码"></a>3.3 break 跳出循环继续执行后续代码</h4><p>默认循环输出1-9，当输出到5的时候跳出循环</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for (( i=1;i&lt;10;i++ ))</span><br><span class="line">	do</span><br><span class="line">		echo $i</span><br><span class="line">		if [ $i -eq 5 ]</span><br><span class="line">			then</span><br><span class="line">				break</span><br><span class="line">            fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h4 id="3-4实例"><a href="#3-4实例" class="headerlink" title="3.4实例"></a>3.4实例</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">监控主机存活的脚本</span></span><br><span class="line">for ((;;))</span><br><span class="line">	do</span><br><span class="line">		ping -c1 $1 &amp;&gt;/dev/null		#-c1是是发送一个请求包，并将返回数据放进回收站</span><br><span class="line">		if [ $? -eq 0 ]</span><br><span class="line">			then </span><br><span class="line">				echo &quot;`date +&quot;%F %H:%M:%S&quot;`: $1 is UP&quot;</span><br><span class="line">			else </span><br><span class="line">				echo &quot;`date +&quot;%F %H:%M:%S&quot;`: $1 is DOWN&quot;</span><br><span class="line">			fi</span><br><span class="line"><span class="meta">		#</span><span class="bash">脚本节奏控制 生产环境下建议1分钟及以上</span></span><br><span class="line">		sleep 3</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="九、shell流程控制-while循环语句"><a href="#九、shell流程控制-while循环语句" class="headerlink" title="九、shell流程控制-while循环语句"></a>九、shell流程控制-while循环语句</h2><ul>
<li>while循环介绍</li>
<li>while循环语法</li>
<li>while实战</li>
</ul>
<hr>
<h3 id="1-while循环介绍"><a href="#1-while循环介绍" class="headerlink" title="1. while循环介绍"></a>1. while循环介绍</h3><p>while在shell中也是负责循环的语句，和for一样。因为功能一样，很多人在学习和工作中的脚本遇到循环到底该使用for还是while呢？很多人不知道，就造就了有人一遇到循环就是for或者一位的while。我个人认为可以按照我说的这个思想来使用，既知道循环次数就可以用for，比如说一天需要循环24次；如果不知道代码要循环多少次，那就用while，比如我们作业中要求写的猜数字，每个人猜对一个数字的次数都是不能固定的，也是未知的。所以这样的循环我就建议大家用while了。</p>
<h3 id="2-while循环语法"><a href="#2-while循环语法" class="headerlink" title="2.while循环语法"></a>2.while循环语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while  [ condition ]      #注意，条件为真while才会循环，条件为假，while停止循环</span><br><span class="line"> do</span><br><span class="line">             commands</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>丈母娘选女婿条件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read -p &quot;money:&quot; money</span><br><span class="line">read -p &quot;car:&quot; car</span><br><span class="line">read -p &quot;house:&quot; house</span><br><span class="line">while [ $money -lt 100000 ] || [ $car -lt 1 ] || [ $house -lt 1 ]</span><br><span class="line">	do</span><br><span class="line">		echo &quot;不行&quot;</span><br><span class="line">		read -p &quot;money:&quot; money</span><br><span class="line">		read -p &quot;car:&quot; car</span><br><span class="line">		read -p &quot;house:&quot; house</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;给你了&quot;</span><br></pre></td></tr></table></figure>


<h3 id="3-while实战"><a href="#3-while实战" class="headerlink" title="3. while实战"></a>3. while实战</h3><ol>
<li>使用while 遍历文件内容</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用<span class="keyword">while</span>遍历文件内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">while read i</span><br><span class="line">	do</span><br><span class="line">		echo &quot;$i&quot;</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用while读出文件中的列，IFS指定默认的列分隔符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用<span class="keyword">while</span>读出文件中的列，IFS指定默认的列分隔符</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">IFS=$&quot;:&quot;</span><br><span class="line">while read f1 f2 f3 f4 f5 f6 f7</span><br><span class="line">	do</span><br><span class="line">		echo &quot;$f1 $f2 $f3&quot;</span><br><span class="line">done &lt; /etc/passwd		</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>九九乘法表</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">九九乘法表</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">n=1</span><br><span class="line">while [ $n -lt 10 ];do</span><br><span class="line">	for ((m=1;m&lt;=$n;m++));do</span><br><span class="line">		echo -n -e &quot;$m*$n=$((m*n))\t&quot;</span><br><span class="line">	done</span><br><span class="line">	echo</span><br><span class="line">	n=$((n+1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="十、shell流程控制-until循环语句"><a href="#十、shell流程控制-until循环语句" class="headerlink" title="十、shell流程控制-until循环语句"></a>十、shell流程控制-until循环语句</h2><ul>
<li>until介绍</li>
<li>until语法</li>
<li>案例分享</li>
</ul>
<hr>
<h3 id="1-until介绍"><a href="#1-until介绍" class="headerlink" title="1. until介绍"></a>1. until介绍</h3><p>和while正好相反，until是条件为假开始执行，条件为真停止执行。</p>
<h3 id="2-until语法"><a href="#2-until语法" class="headerlink" title="2. until语法"></a>2. until语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">until [ condition ]      #注意，条件为假until才会循环，条件为真，until停止循环</span><br><span class="line"> do</span><br><span class="line">         commands代码块</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h3 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h3><ol>
<li>打印10-20数字</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">init_num=10</span><br><span class="line">until [ $init_num -gt 20 ]</span><br><span class="line">   do</span><br><span class="line">       echo $init_num</span><br><span class="line">       init_num=$((init_num + 1))</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="十一、shell流程控制-case条件判断语句"><a href="#十一、shell流程控制-case条件判断语句" class="headerlink" title="十一、shell流程控制-case条件判断语句"></a>十一、shell流程控制-case条件判断语句</h2><ul>
<li>case介绍</li>
<li>case语法</li>
<li>shell特殊变量</li>
</ul>
<hr>
<h3 id="1-case介绍"><a href="#1-case介绍" class="headerlink" title="1. case介绍"></a>1. case介绍</h3><p>在生产环境中，我们总会遇到一个问题需要根据不同的状况来执行不同的预案，那么我们要处理这样的问题就要首先根据可能出现的情况写出对应预案，根据出现的情况来加载不同的预案。</p>
<p><strong>特点：根据给予的不同条件执行不同的代码块</strong></p>
<h3 id="2-case语法"><a href="#2-case语法" class="headerlink" title="2. case语法"></a>2. case语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case 变量  in </span><br><span class="line">条件1）</span><br><span class="line">           执行代码块1</span><br><span class="line">;;</span><br><span class="line">条件2）</span><br><span class="line">           执行代码块2</span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p><strong>注意：每个代码块执行完毕要以;;结尾代表结束，case结尾要以倒过来写的esac来结束。</strong></p>
<p>案例说明</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">read -p &quot;NUM: &quot; N</span><br><span class="line">case $N in</span><br><span class="line">1)</span><br><span class="line">   echo haha</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">  echo hehe</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">   echo heihei</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">   echo bye</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>


<h3 id="3-shell特殊变量"><a href="#3-shell特殊变量" class="headerlink" title="3. shell特殊变量"></a>3. shell特殊变量</h3><p>特殊参数：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$*</td>
<td>代表所有参数，其间隔为IFS内定参数的第一个字元</td>
</tr>
<tr>
<td align="center">$@</td>
<td>与*星号类同。不同之处在於不参照IFS</td>
</tr>
<tr>
<td align="center">$#</td>
<td>代表参数数量</td>
</tr>
<tr>
<td align="center">$</td>
<td>执行上一个指令的返回值</td>
</tr>
<tr>
<td align="center">$-</td>
<td>最近执行的foreground pipeline的选项参数</td>
</tr>
<tr>
<td align="center">$N</td>
<td>shell的第几个外传参数</td>
</tr>
<tr>
<td align="center">$_</td>
<td>显示出最後一个执行的命令</td>
</tr>
<tr>
<td align="center">$$</td>
<td>本身的Process ID</td>
</tr>
<tr>
<td align="center">$0</td>
<td>脚本的名字</td>
</tr>
</tbody></table>
<h2 id="十二、shell函数"><a href="#十二、shell函数" class="headerlink" title="十二、shell函数"></a>十二、shell函数</h2><ul>
<li>函数介绍</li>
<li>函数语法</li>
<li>函数应用</li>
<li>实战</li>
</ul>
<hr>
<h3 id="1-函数介绍"><a href="#1-函数介绍" class="headerlink" title="1.函数介绍"></a>1.函数介绍</h3><p>在写代码的时候，我们很多人习惯从头写到结束，完成以后在一起测试。但是到测试阶段才发现：错误一大堆，上帝啊！弄死我吧！</p>
<p>为了解决这个问题，建议大家把代码模块化，一个模块实现一个功能，哪怕是一个很小的功能都可以，这样的话我们写代码就会逻辑上比较简单，代码量比较少，排错简单，这也就是函数的好处。</p>
<p>函数的优点：</p>
<ol>
<li>代码模块化，调用方便，节省内存</li>
<li>代码模块化，代码量少，排错简单</li>
<li>代码模块化，可以改变代码的执行顺序</li>
</ol>
<h3 id="2-函数的语法"><a href="#2-函数的语法" class="headerlink" title="2.函数的语法"></a>2.函数的语法</h3><p>语法一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">函数名 () &#123;</span><br><span class="line">    代码块</span><br><span class="line">    return N</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>语法二：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function 函数名 &#123;</span><br><span class="line">      代码块</span><br><span class="line">      return N</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>


<h3 id="3-函数的应用"><a href="#3-函数的应用" class="headerlink" title="3.函数的应用"></a>3.函数的应用</h3><h4 id="3-1定义一个函数"><a href="#3-1定义一个函数" class="headerlink" title="3.1定义一个函数"></a>3.1定义一个函数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">print () &#123;</span><br><span class="line">    echo &quot;welcome to ayitula&quot;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function hello &#123;</span><br><span class="line">    echo &quot;hello world&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>print 和 hello就是函数的名字，函数名字命名参考变量一节中的变量命名规则</p>
<h4 id="3-2函数应用"><a href="#3-2函数应用" class="headerlink" title="3.2函数应用"></a>3.2函数应用</h4><p>定义好函数后，如果想调用该函数，只需通过函数名调用即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">N1 () &#123;</span><br><span class="line">	echo &quot;`date +%F`&quot;</span><br><span class="line">&#125;</span><br><span class="line">N2 () &#123;</span><br><span class="line">	echo -e &quot;\t\t\t\twelcome to ayitula&quot;</span><br><span class="line">	echo -e &quot;\n&quot;</span><br><span class="line">&#125;</span><br><span class="line">N3 () &#123;</span><br><span class="line">	echo &quot;1) 剪子&quot;</span><br><span class="line">	echo &quot;2) 石头&quot;</span><br><span class="line">	echo &quot;3) 布&quot;</span><br><span class="line">&#125;</span><br><span class="line">N4 () &#123;</span><br><span class="line">	echo -e &quot;\n\n\n&quot;</span><br><span class="line">	read -p &quot;请输入代码: &quot; DL</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">调用代码</span></span><br><span class="line">N2</span><br><span class="line">N1</span><br><span class="line">N3</span><br><span class="line">N4</span><br></pre></td></tr></table></figure>


<h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4.实战"></a>4.实战</h3><p> nginx启动管理脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">nginx service manage script</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">variables</span></span><br><span class="line">nginx_install_doc=/usr/local/nginx</span><br><span class="line">proc=nginx</span><br><span class="line">nginxd=$nginx_install_doc/sbin/nginx</span><br><span class="line">pid_file=$nginx_install_doc/logs/nginx.pid</span><br><span class="line">nginx_process_id=`cat $pid_fileps`</span><br><span class="line">ngnix_process_num=`ps aux |grep nginx_process_id|grep -v &quot;grep&quot;|wc -l`</span><br><span class="line"><span class="meta">#</span><span class="bash">Source <span class="keyword">function</span> library</span></span><br><span class="line">if [ -f /etc/init.d/functions ];then</span><br><span class="line">	. /etc/init.d/functions</span><br><span class="line">else</span><br><span class="line">	echo &quot;not found /etc/init.d/functions&quot;</span><br><span class="line">	exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="keyword">function</span></span></span><br><span class="line">start () &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash">如果nginx没有启动直接启动，否则报错已经启动</span></span><br><span class="line">if [ -f $pid_file ];tnen</span><br><span class="line">	if [ -f $pid_file ]&amp;&amp;[ $ngnix_process_num -ge 1 ];then</span><br><span class="line">		echo &quot;nginx running ......&quot;</span><br><span class="line">	else</span><br><span class="line">		if [ -f $pid_file ]&amp;&amp;[ $ngnix_process_num -lt 1 ];then</span><br><span class="line">		rm -f $pid_file	</span><br><span class="line">        echo &quot;ngin start `daemon $nginxd`&quot;</span><br><span class="line">	fi</span><br><span class="line">	echo &quot;ngin start `daemon $nginxd`&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stop () &#123;</span><br><span class="line">	if [ -f $pid_file ]&amp;&amp;[ $ngnix_process_num -ge 1 ];then</span><br><span class="line">		action &quot;ngnix stop&quot; killall -s QUIT $proc</span><br><span class="line">		rm -f $pid_file</span><br><span class="line">	else</span><br><span class="line">		action &quot;nginx stop&quot; killall -s QUIT $proc 2&gt;/dev/null</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">restart () &#123;</span><br><span class="line">	stop</span><br><span class="line">	sleep 1</span><br><span class="line">	start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reload () &#123;</span><br><span class="line">	if [ -f $pid_file ]&amp;&amp;[ $ngnix_process_num -ge 1 ];then</span><br><span class="line">		action &quot;nginx reload&quot; killall -s HUP $proc</span><br><span class="line">	else</span><br><span class="line">		action &quot;nginx reload&quot; killall -s HUP $proc	2&gt;/dev/null</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status () &#123;</span><br><span class="line">	if [ -f $pid_file ]&amp;&amp;[ $ngnix_process_num -ge 1 ];then</span><br><span class="line">		echo &quot;nginx running ...&quot;</span><br><span class="line">	else</span><br><span class="line">		echo &quot;nginx stop&quot;</span><br><span class="line">	fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">callable</span></span><br><span class="line">case $1 in</span><br><span class="line">start) start;;</span><br><span class="line">stop) stop;;</span><br><span class="line">restart) restart;;</span><br><span class="line">reload) reload;;</span><br><span class="line">status) status;;</span><br><span class="line">*) echo &quot;USAGE:$0 start|stop|restart|reload|status&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>


<h2 id="十三、正则表达式"><a href="#十三、正则表达式" class="headerlink" title="十三、正则表达式"></a>十三、正则表达式</h2><ul>
<li>正则表达式介绍</li>
<li>特殊字符</li>
<li>POSIX特殊字符</li>
</ul>
<hr>
<h3 id="1-正则表达式介绍"><a href="#1-正则表达式介绍" class="headerlink" title="1.正则表达式介绍"></a>1.正则表达式介绍</h3><p>正则表达式是一种文本模式匹配，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它是一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串、将匹配的子串替换或者从某个字符串中取出某个条件的子串。</p>
<p>正则表达式就像数学公式一样，我们可以通过正则表达式提供的一些特殊字符来生成一个匹配对应字符串的公式，用此来从海量数据中匹配出自己想要的数据。</p>
<p>正则表达式是一个三方产品，被常用计算机语言广泛使用，比如：shell、PHP、python、java、js等！</p>
<p>shell也支持正则表达式，但不是所有的命令都支持正则表达式，常见的的命令中只有grep、sed、awk命令支持正则表达式。</p>
<h3 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2.特殊字符"></a>2.特殊字符</h3><p>定位符使用技巧：同时锚定开头和结尾，做精确匹配；单一锚定开头和结尾，做模糊匹配。</p>
<table>
<thead>
<tr>
<th align="center">定位符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">锚定开头 ^a 以a开头 默认锚定一个字符</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">锚定结尾 a$ 以a结尾 默认锚定一个字符</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾的字符串</span></span><br><span class="line">egrep &quot;^ac$&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">模糊匹配  以a开头的字符串</span></span><br><span class="line">egrep &quot;^a&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">模糊匹配 以c结尾的字符串</span></span><br><span class="line">egrep &quot;c$&quot; file  </span><br></pre></td></tr></table></figure>
<p>匹配符:匹配字符串</p>
<table>
<thead>
<tr>
<th align="center"><strong>匹配符</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">.</td>
<td align="left">匹配除回车以外的任意字符</td>
</tr>
<tr>
<td align="center">( )</td>
<td align="left">字符串分组</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td align="left">定义字符类，匹配括号中的一个字符</td>
</tr>
<tr>
<td align="center">[ ^ ]</td>
<td align="left">表示否定括号中出现字符类中的字符,取反</td>
</tr>
<tr>
<td align="center">\</td>
<td align="left">转义字符</td>
</tr>
<tr>
<td align="center">|</td>
<td align="left">或</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间任意  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a.c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间不包含a-z,0-9  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[^a-z0-9]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以e开头f结尾  中间是*号  长度为三个字节的字符串  e*f</span></span><br><span class="line">egrep &quot;^e\*f$&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头b或c结尾  中间是任意  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a.(b|c)$&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">模糊匹配  以cc结尾的字符串   因为$只能锚定单个字符，如果是一个字符串就需要用()来做定义</span></span><br><span class="line">egrep &quot;(cc)$&quot; file</span><br></pre></td></tr></table></figure>
<p>限定符:对前面的字符或者字符串做限定说明</p>
<table>
<thead>
<tr>
<th align="center"><strong>限定符</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">*</td>
<td align="left">某个字符之后加星号表示该字符不出现或出现多次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="left">与星号相似，但略有变化，表示该字符出现一次或不出现</td>
</tr>
<tr>
<td align="center">+</td>
<td align="left">与星号相似，表示其前面字符出现一次或多次，但必须出现一次</td>
</tr>
<tr>
<td align="center">{n,m}</td>
<td align="left">某个字符之后出现，表示该字符最少n次，最多m次</td>
</tr>
<tr>
<td align="center">{m}</td>
<td align="left">正好出现了m次</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间是有b或者没有b 长度不限的字符串</span></span><br><span class="line">egrep &quot;^ab*c$&quot; file</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间只出现一次b或者没有b的字符串</span></span><br><span class="line">egrep &quot;^ab?c$&quot; file </span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间是有b且至少出现一次 长度不限的字符串</span></span><br><span class="line">egrep &quot;^ab+c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间是有b且至少出现两次最多出现四次 长度不限的字符串</span></span><br><span class="line">egrep &quot;^ab&#123;2,4&#125;c$&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间是有b且正好出现三次的字符串</span></span><br><span class="line">egrep &quot;^ab&#123;3&#125;c$&quot; file </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配 以a开头 c结尾 中间是有b且至少出现一次的字符串</span></span><br><span class="line">egrep &quot;^ab&#123;1,&#125;c$&quot; file</span><br></pre></td></tr></table></figure>


<h3 id="3-POSIX特殊字符"><a href="#3-POSIX特殊字符" class="headerlink" title="3. POSIX特殊字符"></a>3. POSIX特殊字符</h3><table>
<thead>
<tr>
<th align="center"><strong>特殊字符</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">[:alnum:]</td>
<td align="left">匹配任意字母字符0-9 a-z A-Z</td>
</tr>
<tr>
<td align="center">[:alpha:]</td>
<td align="left">匹配任意字母，大写或小写</td>
</tr>
<tr>
<td align="center">[:digit:]</td>
<td align="left">数字 0-9</td>
</tr>
<tr>
<td align="center">[:graph:]</td>
<td align="left">非空字符( 非空格控制字符)</td>
</tr>
<tr>
<td align="center">[:lower:]</td>
<td align="left">小写字符a-z</td>
</tr>
<tr>
<td align="center">[:upper:]</td>
<td align="left">大写字符A-Z</td>
</tr>
<tr>
<td align="center">[:cntrl:]</td>
<td align="left">控制字符</td>
</tr>
<tr>
<td align="center">[:print:]</td>
<td align="left">非空字符( 包括空格)</td>
</tr>
<tr>
<td align="center">[:punct:]</td>
<td align="left">标点符号</td>
</tr>
<tr>
<td align="center">[:blank:]</td>
<td align="left">空格和TAB字符</td>
</tr>
<tr>
<td align="center">[:xdigit:]</td>
<td align="left">16 进制数字</td>
</tr>
<tr>
<td align="center">[:space:]</td>
<td align="left">所有空白字符( 新行、空格、制表符)</td>
</tr>
</tbody></table>
<p><strong>注意 <code>[[ ]]</code> 双中括号的意思:  第一个中括号是匹配符<code>[]</code>匹配中括号中的任意一个字符，第二个<code>[]</code>是格式 如[:digit:]</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间a-zA-Z0-9任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:alnum:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是a-zA-Z任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:alpha:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是0-9任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:digit:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是a-z任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:lower:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是A-Z任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:upper:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是非空任意字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:print:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是符号字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:punct:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是空格或者TAB符字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:blank:]]c$&quot; file</span><br><span class="line">egrep &quot;^a[[:space:]]c$&quot; file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">精确匹配  以a开头c结尾  中间是十六进制字符  长度为三个字节的字符串</span></span><br><span class="line">egrep &quot;^a[[:xdigit:]]c$&quot; file</span><br></pre></td></tr></table></figure>
<p>案例</p>
<ol>
<li>匹配合法的IP地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">egrep &#x27;^((25[0-5]|2[0-4][[:digit:]]|[01]?[[:digit:]][[:digit:]]?).)&#123;3&#125;(25[0-5]|2[0-4][[:digit:]]|[01]?[[:digit:]][[:digit:]]?)$&#x27; —color ip.txt</span><br></pre></td></tr></table></figure>
<ol>
<li>匹配座机电话号码</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">egrep &#x27;^[[:graph:]]&#123;12&#125;$” number |egrep “^(0[1-9][0-9][0-9]?)-[1-9][0-9]&#123;6,7&#125;$&#x27;</span><br></pre></td></tr></table></figure>


<h2 id="十四、shell对文件的操作"><a href="#十四、shell对文件的操作" class="headerlink" title="十四、shell对文件的操作"></a>十四、shell对文件的操作</h2><ul>
<li>简介</li>
<li>sed命令</li>
<li>sed小技巧</li>
<li>实战</li>
</ul>
<hr>
<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>在shell脚本编写中，时常会用到对文件的相关操作，比如增加内容，修改内容，删除部分内容，查看部分内容等，但是上述举例的这些操作一般都是需要在文本编辑器中才能操作，常用的文本编辑器如：gedit、vim、nano等又是交互式文本编辑器，脚本无法自己独立完成，必须有人参与才可以完成。如果这样的话又违背了我们编写脚本的意愿(全部由机器来完成，减少人的工作压力，提升工作效率)。emm….如何才能让这些操作全部脚本自己就搞定，而不需要人的参与，而且又能按照我们的脚本预案来完成呢？</p>
<p>为了解决上述问题，linux为大家提供了一些命令,比如Perl、sed等命令，今天我就着重为大家介绍一下sed命令。</p>
<h3 id="2-sed命令"><a href="#2-sed命令" class="headerlink" title="2.sed命令"></a>2.sed命令</h3><p>sed是linux中提供的一个外部命令,它是一个行(流)编辑器，非交互式的对文件内容进行增删改查的操作，使用者只能在命令行输入编辑命令、指定文件名，然后在屏幕上查看输出。它和文本编辑器有本质的区别。</p>
<blockquote>
<p><strong>区别：</strong></p>
<p>文本编辑器: 编辑对象是文件</p>
<p>行编辑器：编辑对象是文件中的行</p>
</blockquote>
<p>也就是前者一次处理一个文本，而后者是一次处理一个文本中的一行。这个是我们应该弄清楚且必须牢记的，否者可能无法理解sed的运行原理和使用精髓。</p>
<h4 id="2-1-sed数据处理原理"><a href="#2-1-sed数据处理原理" class="headerlink" title="2.1 sed数据处理原理"></a>2.1 sed数据处理原理</h4><p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210128150037313.png" alt="image-20210128150037313"></p>
<h4 id="2-2-sed命令"><a href="#2-2-sed命令" class="headerlink" title="2.2 sed命令"></a>2.2 sed命令</h4><p>语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed [options] &#x27;&#123;command&#125;[flags]&#x27; [filename]</span><br></pre></td></tr></table></figure>
<p>命令选项[options]</p>
<table>
<thead>
<tr>
<th align="center">选项[options]</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-e script</td>
<td>将脚本中指定的命令添加到处理输入时执行的命令中  多条件，一行中要有多个操作</td>
</tr>
<tr>
<td align="center">-f script</td>
<td>将文件中指定的命令添加到处理输入时执行的命令中</td>
</tr>
<tr>
<td align="center">-n</td>
<td>抑制自动输出</td>
</tr>
<tr>
<td align="center">-i</td>
<td>编辑文件内容</td>
</tr>
<tr>
<td align="center">-i.bak</td>
<td>修改时同时创建.bak备份文件</td>
</tr>
<tr>
<td align="center">-r</td>
<td>使用扩展的正则表达式</td>
</tr>
<tr>
<td align="center">!</td>
<td>取反 （跟在模式条件后与shell有所区别）</td>
</tr>
</tbody></table>
<p>常用内部命令{command}</p>
<table>
<thead>
<tr>
<th align="center">命令{command}</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td>在匹配后面添加</td>
</tr>
<tr>
<td align="center">i</td>
<td>在匹配前面添加</td>
</tr>
<tr>
<td align="center">p</td>
<td>打印</td>
</tr>
<tr>
<td align="center">d</td>
<td>删除</td>
</tr>
<tr>
<td align="center">s</td>
<td>查找替换</td>
</tr>
<tr>
<td align="center">c</td>
<td>更改</td>
</tr>
<tr>
<td align="center">y</td>
<td>转换   N D P</td>
</tr>
</tbody></table>
<p>标志位[flags]</p>
<table>
<thead>
<tr>
<th align="center">标志[flags]</th>
<th>定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数字</td>
<td>表示新文本替换的模式</td>
</tr>
<tr>
<td align="center">g</td>
<td>表示用新文本替换现有文本的全部实例</td>
</tr>
<tr>
<td align="center">p</td>
<td>表示打印原始的内容</td>
</tr>
<tr>
<td align="center">w filename</td>
<td>将替换的结果写入文件</td>
</tr>
</tbody></table>
<h5 id="2-2-1-sed内部命令说明"><a href="#2-2-1-sed内部命令说明" class="headerlink" title="2.2.1 sed内部命令说明"></a>2.2.1 sed内部命令说明</h5><ol>
<li>文件内容增加操作,将数据追加到某个位置之后，使用命令a。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在data1的每行后追加一行新数据内容: append data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;a\append data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第二行后新开一行追加数据: append data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2a\append data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第二到四行每行后新开一行追加数据: append data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2,4a\append data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">匹配字符串追加: 找到包含<span class="string">&quot;3 the&quot;</span>的行，在其后新开一行追加内容: append data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;/3 the/a\append data &quot;haha&quot;&#x27; data1</span><br></pre></td></tr></table></figure>
<p>​    <strong>//开启匹配模式  /要匹配的字符串/</strong></p>
<ol start="2">
<li>文件内容增加操作,将数据插入到某个位置之前，使用命令i。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在data1的每行前插入一行新数据内容: insert data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;i\insert data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第二行前新开一行插入数据: insert data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2i\insert data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在第二到四行每行前新开一行插入数据: insert data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2,4i\insert data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">匹配字符串插入: 找到包含<span class="string">&quot;3 the&quot;</span>的行，在其前新开一行插入内容: insert data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;/3 the/i\insert data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>文件内容修改操作—替换,将一行中匹配的内容替换为新的数据，使用命令s。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从标准输出流中做替换，将<span class="built_in">test</span>替换为text</span></span><br><span class="line">echo &quot;this is a test&quot; |sed &#x27;s/test/text/&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1中每行的dog替换为cat</span></span><br><span class="line">sed &#x27;s/dog/cat/&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1中第二行的dog替换为cat</span></span><br><span class="line">sed &#x27;2s/dog/cat/&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1中第二到第四行的dog替换为cat</span></span><br><span class="line">sed &#x27;2,4s/dog/cat/&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">匹配字符串替换:将包含字符串<span class="string">&quot;3 the&quot;</span>的行中的dog替换为cat</span></span><br><span class="line">sed &#x27;/3 the/s/dog/cat/&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>文件内容修改操作—更改,将一行中匹配的内容替换为新的数据，使用命令c。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将data1文件中的所有行的内容更改为: change data <span class="string">&quot;data&quot;</span></span></span><br><span class="line">sed &#x27;c\change data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1文件第二行的内容更改为: change data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2c\change data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1文件中的第二、三、四行的内容更改为：change data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;2,4c\change data &quot;haha&quot;&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将data1文件中包含<span class="string">&quot;3 the&quot;</span>的行内容更改为: change data <span class="string">&quot;haha&quot;</span></span></span><br><span class="line">sed &#x27;/3 the/c\change data &quot;data&quot;&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>文件内容修改操作—字符转换，将一行中匹配的内容替换为新的数据，使用命令y。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将data1中的a b c字符转换为对应的 A  B  C字符</span></span><br><span class="line">sed &#x27;y/abc/ABC/&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>文件内容删除，将文件中的指定数据删除，使用命令d。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除文件data1中的所有数据</span></span><br><span class="line">sed &#x27;d&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件data1中的第三行数据</span></span><br><span class="line">sed &#x27;3d&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件data1第三到第四行的数据</span></span><br><span class="line">sed &#x27;3,4d&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">删除文件data1中包含字符串<span class="string">&quot;3 the&quot;</span>的行</span></span><br><span class="line">sed &#x27;/3 the/d&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>文件内容查看，将文件内容输出到屏幕，使用命令p。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印data1文件内容</span></span><br><span class="line">sed &#x27;p&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印data1文件第三行的内容</span></span><br><span class="line">sed &#x27;3p&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印data1文件第二、三、四行内容</span></span><br><span class="line">sed &#x27;2,4p&#x27; data1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印data1文件包含字符串<span class="string">&quot;3 the&quot;</span>的行</span></span><br><span class="line">sed &#x27;/3 the/p&#x27; data1</span><br></pre></td></tr></table></figure>
<p>可以看得出，打印内容是重复的行，原因是打印了指定文件内容一次，又将读入缓存的所有数据打印了一次，所以会看到这样的效果，如果不想看到这样的结果，可以加命令选项-n抑制内存输出即可</p>
<h5 id="2-2-2命令选项说明"><a href="#2-2-2命令选项说明" class="headerlink" title="2.2.2命令选项说明"></a>2.2.2命令选项说明</h5><ol>
<li>在命令行中使用多个命令 -e</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将brown替换为green dog替换为cat</span></span><br><span class="line">sed -e &#x27;s/brown/green/;s/dog/cat/&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>从文件读取编辑器命令 -f 适用于日常重复执行的场景</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1)将命令写入文件</span></span><br><span class="line">vim abc</span><br><span class="line">s/brown/green/</span><br><span class="line">s/dog/cat/</span><br><span class="line">s/fox/elephant/</span><br><span class="line"><span class="meta">#</span><span class="bash">2)使用-f命令选项调用命令文件</span></span><br><span class="line">sed -f abc data1 </span><br></pre></td></tr></table></figure>
<ol start="3">
<li>抑制内存输出 -n</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印data1文件的第二行到最后一行内容  $最后的意思</span></span><br><span class="line">sed -n &#x27;2,$p&#x27; data1 </span><br></pre></td></tr></table></figure>
<ol start="4">
<li>使用正则表达式 -r</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印data1中以字符串<span class="string">&quot;3 the&quot;</span>开头的行内容</span></span><br><span class="line">sed -n  -r &#x27;/^(3 the)/p&#x27; data1</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>从上述的演示中，大家可以看出，数据处理只是在缓存中完成的，并没有实际修改文件内容，如果需要修改文件内容可以直接使用-i命令选项。在这里我需要说明的是-i是一个不可逆的操作，一旦修改，如果想复原就很困难，几乎不可能，所以建议大家在操作的时候可以备份一下源文件。-i命令选项提供了备份功能，比如参数使用-i.bak，那么在修改源文件的同时会先备份一个以.bak结尾的源文件，然后再进行修改操作。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行替换命令并修改文件</span></span><br><span class="line">sed -i.bak &#x27;s/brown/green/&#x27; data1</span><br></pre></td></tr></table></figure>
<h5 id="2-2-3标志"><a href="#2-2-3标志" class="headerlink" title="2.2.3标志"></a>2.2.3标志</h5><ol>
<li>数字标志：此标志是一个非零正数，默认情况下，执行替换的时候，如果一行中有多个符合的字符串，如果没有标志位定义，那么只会替换第一个字符串，其他的就被忽略掉了，为了能精确替换，可以使用数字位做定义。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">替换一行中的第二处dog为cat</span></span><br><span class="line">sed &#x27;s/dog/cat/2&#x27; data2</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>g标志:将一行中的所有符合的字符串全部执行替换</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将data1文件中的所有dog替换为cat</span></span><br><span class="line">sed &#x27;s/dog/cat/g&#x27; data2</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>p标志：打印文本内容，类似于-p命令选项</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将data2文件第三行中的dog换成cat并打印</span></span><br><span class="line">sed  &#x27;3s/dog/cat/p&#x27; data2</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>w filename标志:将修改的内容存入filename文件中</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将data2文件第三行中的dog换成cat并保存在text文件中</span></span><br><span class="line">sed  &#x27;3s/dog/cat/w text&#x27; data2</span><br></pre></td></tr></table></figure>


<h3 id="3-sed小技巧"><a href="#3-sed小技巧" class="headerlink" title="3. sed小技巧"></a>3. sed小技巧</h3><p>$= 统计文本有多少行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">统计data2有多少行</span></span><br><span class="line">sed -n &#x27;$=&#x27; data2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印data2内容时加上行号</span></span><br><span class="line">sed  &#x27;=&#x27; data2</span><br></pre></td></tr></table></figure>


<h3 id="4-实战-1"><a href="#4-实战-1" class="headerlink" title="4.实战"></a>4.实战</h3><p>DNS监测WEB服务状态，并根据其状态实现高可用解析</p>
<p>场景：通过DNS进行单域名多条A记录解析做负载均衡。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">CP1=0</span><br><span class="line">CP2=0</span><br><span class="line">while :</span><br><span class="line">  do</span><br><span class="line"><span class="meta">#</span><span class="bash">tong</span></span><br><span class="line">     ping -c1 192.168.18.240 &gt; /dev/null</span><br><span class="line">     if [ $? -eq 1 ] &amp;&amp; [ $CP1 -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">           sed -i &#x27;/192.168.18.240/s/^/;/&#x27; /var/named/baidu.zone</span><br><span class="line">           /etc/init.d/named reload</span><br><span class="line">           CP1=1</span><br><span class="line">      fi</span><br><span class="line"><span class="meta">#</span><span class="bash">butong</span></span><br><span class="line">     ping -c1 192.168.18.240 &gt; /dev/null </span><br><span class="line">     if [ $? -eq 0 ] &amp;&amp; [ $CP1 -eq 1 ]</span><br><span class="line">        then</span><br><span class="line">            sed -i &#x27;/192.168.18.240/s/;//&#x27; /var/named/baidu.zone</span><br><span class="line">            /etc/init.d/named reload</span><br><span class="line">            CP1=0</span><br><span class="line">     fi </span><br><span class="line">    ping -c1 192.168.18.241 &gt; /dev/null</span><br><span class="line">    if [ $? -eq 1 ] &amp;&amp; [ $CP2 -eq 0 ]</span><br><span class="line">        then</span><br><span class="line">          sed -i &#x27;/192.168.18.241/s/^/;/&#x27; /var/named/baidu.zone</span><br><span class="line">          /etc/init.d/named reload</span><br><span class="line">          CP2=1</span><br><span class="line">    fi</span><br><span class="line">       ping -c1 192.168.18.241 &gt; /dev/null</span><br><span class="line">     if [ $? -eq 0 ] &amp;&amp; [ $CP2 -eq 1 ]</span><br><span class="line">        then</span><br><span class="line">            sed -i &#x27;/192.168.18.241/s/;//&#x27; /var/named/baidu.zone</span><br><span class="line">            /etc/init.d/named reload</span><br><span class="line">            CP2=0</span><br><span class="line">     fi</span><br><span class="line">sleep 5</span><br><span class="line">done</span><br></pre></td></tr></table></figure>


<h2 id="十五、shell对输出流的处理"><a href="#十五、shell对输出流的处理" class="headerlink" title="十五、shell对输出流的处理"></a>十五、shell对输出流的处理</h2><ul>
<li>awk介绍</li>
<li>awk基本用法</li>
<li>awk高级用法</li>
<li>awk小技巧</li>
</ul>
<hr>
<p>在日常计算机管理中，总会有很多数据输出到屏幕或者文件，这些输出包含了标准输出、标准错误输出。默认情况下，这些信息全部输出到默认输出设备—-屏幕。然而，大量的数据输出中，只有一小部分是我们需要重点关注的，我们需要把我们需要的或者关注的这些信息过滤或者提取以备后续需要时调用。早先的学习中，我们学过使用grep来过滤这些数据，使用cut、tr命令提出某些字段，但是他们都不具备提取并处理数据的能力，都必须先过滤，再提取转存到变量，然后在通过变量提取去处理，比如：</p>
<p>内存使用率的统计步骤：</p>
<ol>
<li>通过free -m提取出内存总量，赋值给变量 memory_totle</li>
<li>通过free -m提取出n内存使用量，赋值给变量memory_use</li>
<li>通过数学运算计算内存使用率</li>
</ol>
<p>需要执行多步才能得到内存使用率，那么有没有一个命令能够集过滤、提取、运算为一体呢？当然，就是今天我要给大家介绍的命令：awk</p>
<p>平行命令还有gawk、pgawk、dgawk</p>
<h3 id="1-awk介绍"><a href="#1-awk介绍" class="headerlink" title="1. awk介绍"></a>1. awk介绍</h3><p>awk是一种可以处理数据、产生格式化报表的语言，功能十分强大。awk 认为文件中的每一行是一条记录 记录与记录的分隔符为换行符,每一列是一个字段 字段与字段的分隔符默认是一个或多个空格或tab制表符.</p>
<p>awk的工作方式是读取数据，将每一行数据视为一条记录（record）每条记录以字段分隔符分成若干字段，然后输出各个字段的值.</p>
<p>awk语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk [options] [BEGIN]&#123;program&#125; [END][file]</span><br></pre></td></tr></table></figure>
<p>常用命令选项</p>
<table>
<thead>
<tr>
<th align="center">选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-F fs</td>
<td>指定描绘一行中数据字段的文件分隔符  默认为空格</td>
</tr>
<tr>
<td align="center">-f file</td>
<td>指定读取程序的文件名</td>
</tr>
<tr>
<td align="center">-v var=value</td>
<td>定义awk程序中使用的变量和默认值</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>awk 程序脚本由左大括号和右大括号定义。脚本命令必须放置在两个大括号之间。由于awk命令行假定脚本是单文本字符串，所以必须将脚本包括在单引号内。</p>
<p>awk程序运行优先级是:</p>
<ol>
<li>BEGIN: 在开始处理数据流之前执行，可选项</li>
<li>program: 如何处理数据流，必选项</li>
<li>END: 处理完数据流后执行，可选项</li>
</ol>
<h3 id="2-awk的基本用法—-awk数据提取功能"><a href="#2-awk的基本用法—-awk数据提取功能" class="headerlink" title="2. awk的基本用法—-awk数据提取功能"></a>2. awk的基本用法—-awk数据提取功能</h3><h4 id="2-1-awk对字段-列-的提取"><a href="#2-1-awk对字段-列-的提取" class="headerlink" title="2.1 awk对字段(列)的提取"></a>2.1 awk对字段(列)的提取</h4><p>字段提取:提取一个文本中的一列数据并打印输出</p>
<p>字段相关内置变量</p>
<table>
<thead>
<tr>
<th align="center">变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$0</td>
<td>表示整行文本</td>
</tr>
<tr>
<td align="center">$1</td>
<td>表示文本行中的第一个数据字段</td>
</tr>
<tr>
<td align="center">$2</td>
<td>表示文本行中的第二个数据字段</td>
</tr>
<tr>
<td align="center">$N</td>
<td>表示文本行中的第N个数据字段</td>
</tr>
<tr>
<td align="center">$NF</td>
<td>表示文本行中的最后一个数据字段</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">读入<span class="built_in">test</span>每行数据并把每行数据打印出来</span></span><br><span class="line">awk &#x27;&#123;print $0&#125;&#x27; test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>第六个字段</span></span><br><span class="line">awk &#x27;&#123;print $6&#125;&#x27; test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>最后一个字段</span></span><br><span class="line">awk &#x27;&#123;print $NF&#125;&#x27; test</span><br></pre></td></tr></table></figure>
<h4 id="2-2命令选项详解"><a href="#2-2命令选项详解" class="headerlink" title="2.2命令选项详解"></a>2.2命令选项详解</h4><p>-F: 指定字段与字段的分隔符</p>
<p>当输出的数据流字段格式不是awk默认的字段格式时，我们可以使用-F命令选项来重新定义数据流字段分隔符。比如：处理的文件是/etc/passwd，希望打印第一列、第三列、最后一列</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -F &#x27;:&#x27; &#x27;&#123;print $1,$3,$NF&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<p>​    <strong>可以看的出，awk输出字段默认的分隔符也是空格</strong></p>
<p>-f file: 如果awk命令是日常重复工作，而又没有太多变化，可以将程序写入文件，每次使用-f调用程序文件就好，方便，高效。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -f abc test  #abc是文件名</span><br></pre></td></tr></table></figure>
<p>-v 定义变量，既然作者写awk的时候就是按着语言去写的，那么语言中最重要的要素—-变量肯定不能缺席，所以可以使用-v命令选项定义变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">定义一个变量 name=baism，然后调用变量读出数据</span></span><br><span class="line">awk -v name=&#x27;baism&#x27; &#x27;BEGIN&#123;print name&#125;&#x27;		</span><br></pre></td></tr></table></figure>
<h4 id="2-3-awk对记录-行-的提取"><a href="#2-3-awk对记录-行-的提取" class="headerlink" title="2.3 awk对记录(行)的提取"></a>2.3 awk对记录(行)的提取</h4><p>记录提取：提取一个文本中的一行并打印输出</p>
<p>记录的提取方法有两种：a、通过行号 b、通过正则匹配</p>
<p>记录相关内置变量</p>
<p>NR: 指定行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">提取<span class="built_in">test</span>第三行数据</span></span><br><span class="line">awk &#x27;NR==3&#123;print $0&#125;&#x27; test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定行的第一个字段精确匹配字符串为3</span></span><br><span class="line">awk &#x27;$1==&quot;3&quot;&#123;print $0&#125;&#x27; test</span><br></pre></td></tr></table></figure>
<h4 id="2-4-awk对字符串提取"><a href="#2-4-awk对字符串提取" class="headerlink" title="2.4 awk对字符串提取"></a>2.4 awk对字符串提取</h4><p>记录和字段的汇合点就是字符串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>第三行的第六个字段</span></span><br><span class="line">awk &#x27;NR==3&#123;print $6&#125;&#x27; test</span><br></pre></td></tr></table></figure>
<h4 id="2-5-awk程序的优先级"><a href="#2-5-awk程序的优先级" class="headerlink" title="2.5 awk程序的优先级"></a>2.5 awk程序的优先级</h4><p>关于awk程序的执行优先级，BEGIN是优先级最高的代码块，是在执行PROGRAM之前执行的，不需要提供数据源，因为不涉及到任何数据的处理，也不依赖与PROGRAM代码块；PROGRAM是对数据流干什么，是必选代码块，也是默认代码块。所以在执行时必须提供数据源；END是处理完数据流后的操作，如果需要执行END代码块，就必须需要PROGRAM的支持，单个无法执行。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;print &quot;hello ayitula&quot;&#125;&#123;print $0&#125;END&#123;print &quot;bye ayitula&quot;&#125;&#x27; test</span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;hello world&quot;&#125;&#x27;</span><br></pre></td></tr></table></figure>


<h3 id="3-awk高级用法"><a href="#3-awk高级用法" class="headerlink" title="3. awk高级用法"></a>3. awk高级用法</h3><p>awk是一门语言，那么就会符合语言的特性，除了可以定义变量外，还可以定义数组，还可以进行运算，流程控制，我们接下来看看吧。</p>
<h4 id="3-1-awk定义数组"><a href="#3-1-awk定义数组" class="headerlink" title="3.1 awk定义数组"></a>3.1 awk定义数组</h4><p>数组定义方式: 数组名[索引]=值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">定义数组array，有两个元素，分别是100，200，打印数组元素</span></span><br><span class="line">awk &#x27;BEGIN&#123;array[0]=100;array[1]=200;print array[0],array[1]&#125;&#x27;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-awk运算"><a href="#3-2-awk运算" class="headerlink" title="3.2 awk运算"></a>3.2 awk运算</h4><table>
<thead>
<tr>
<th align="center">运算类型</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">赋值运算</td>
<td>=</td>
</tr>
<tr>
<td align="center">比较运算</td>
<td>&gt;   &gt;=   ==   &lt;   &lt;=   !=</td>
</tr>
<tr>
<td align="center">数学运算</td>
<td>+   -   *  /   %   **   ++   —</td>
</tr>
<tr>
<td align="center">逻辑运算</td>
<td>&amp;&amp;  ||</td>
</tr>
<tr>
<td align="center">匹配运算</td>
<td>~   !~</td>
</tr>
</tbody></table>
<ol>
<li>赋值运算：主要是对变量或者数组赋值</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk -v name=&#x27;baism&#x27; &#x27;BEGIN&#123;print name&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;school=&quot;ayitula&quot;;print school&#125;&#x27;</span><br><span class="line">awk &#x27;BEGIN&#123;array[0]=100;print array[0]&#125;&#x27;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>比较运算，如果比较的是字符串则按ascii编码顺序表比较。如果结果返回为真则用1表示，如果返回为假则用0表示</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;print &quot;a&quot; &gt;= &quot;b&quot; &#125;&#x27;		#0</span><br><span class="line">awk &#x27;BEGIN&#123;print &quot;a&quot; &lt;= &quot;b&quot; &#125;&#x27;		#1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输出<span class="built_in">test</span>文件中第一个字段大于4的那一行</span></span><br><span class="line">awk &#x27;$1&gt;4&#123;print $0&#125;&#x27; test  </span><br><span class="line"></span><br><span class="line">awk &#x27;BEGIN&#123;print 100 &gt;= 1 &#125;&#x27;		#1</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>数学运算</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;print 100+3 &#125;&#x27;		#103</span><br><span class="line">awk &#x27;BEGIN&#123;print 10**3 &#125;&#x27;		#1000</span><br><span class="line">awk -v &#x27;count=0&#x27; &#x27;BEGIN&#123;count++;print count&#125;&#x27;		#1</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>逻辑运算</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;BEGIN&#123;print 100&gt;=2 &amp;&amp; 100&gt;=3 &#125;&#x27;		#1</span><br><span class="line">awk &#x27;BEGIN&#123;print 100&gt;=2 || 1&gt;=100 &#125;&#x27;		#1</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>匹配运算</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">匹配/etc/passwd文件中，第一个字段是ro开头的那一行</span></span><br><span class="line">awk -F &#x27;:&#x27; &#x27;$1 ~ &quot;^ro&quot; &#123;print $0&#125;&#x27; /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">匹配/etc/passwd文件中，第一个字段不是ro开头的那一行</span></span><br><span class="line">awk -F &#x27;:&#x27; &#x27;$1 !~ &quot;^ro&quot; &#123;print $0&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<h4 id="3-3-awk-环境变量"><a href="#3-3-awk-环境变量" class="headerlink" title="3.3 awk 环境变量"></a>3.3 awk 环境变量</h4><table>
<thead>
<tr>
<th align="center"><strong>变量</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">FIELDWIDTHS</td>
<td>以空格分隔的数字列表，用空格定义每个数据字段的精确宽度</td>
</tr>
<tr>
<td align="center">FS</td>
<td>输入字段分隔符号</td>
</tr>
<tr>
<td align="center">OFS</td>
<td>输出字段分隔符号</td>
</tr>
<tr>
<td align="center">RS</td>
<td>输入记录分隔符</td>
</tr>
<tr>
<td align="center">ORS</td>
<td>输出记录分隔符号</td>
</tr>
</tbody></table>
<ol>
<li>FIELDWIDTHS:重定义列宽并打印，注意不可以使用$0打印所有，因为$0是打印本行全内容，不会打印你定义的字段</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输出/etc/passwd文件第一行中的第1，2，3列，并且第一列是5个字符，第二列2个字符，第三列8个字符</span></span><br><span class="line">awk &#x27;BEGIN&#123;FIELDWIDTHS=&quot;5 2 8&quot;&#125;NR==1&#123;print $1,$2,$3&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>FS:指定数据源中字段分隔符，类似命令选项-F</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定数据源字段的分隔符为<span class="string">&#x27;:&#x27;</span></span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;&#125;NR==1&#123;print $1,$3,$NF&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>OFS:指定输出到屏幕后字段的分隔符</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定数据源字段的分隔符为<span class="string">&#x27;:&#x27;</span>，并指定输出字段的分隔符为<span class="string">&#x27;-&#x27;</span></span></span><br><span class="line">awk &#x27;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;-&quot;&#125;NR==1&#123;print $1,$3,$NF&#125;&#x27; /etc/passwd</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>RS:指定输入记录（行）的分隔符，默认是回车</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">把输入所有记录（行）的分隔符都设置为空</span></span><br><span class="line">awk &#x27;BEGIN&#123;RS=&quot;&quot;&#125;&#123;print $1,$13,$25,$37,$49&#125;&#x27; test</span><br></pre></td></tr></table></figure>
<p><strong>将记录的分隔符修改为空行后，所有的行会变成一行，所以所有字段就在一行了。</strong></p>
<ol start="5">
<li>ORS:输出到屏幕后记录（行）的分隔符，默认为回车</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">把输入所有记录（行）的分隔符都设置为空，输出记录（行）的分隔符设置为*</span></span><br><span class="line">awk &#x27;BEGIN&#123;RS=&quot;&quot;;ORS=&quot;*&quot;&#125;&#123;print $1,$13,$25,$37,$49&#125;&#x27; test</span><br></pre></td></tr></table></figure>
<h4 id="3-4流程控制"><a href="#3-4流程控制" class="headerlink" title="3.4流程控制"></a>3.4流程控制</h4><ol>
<li>if判断语句</li>
<li>for循环语句</li>
<li>while循环语句</li>
<li>do…while语句</li>
<li>循环控制</li>
</ol>
<p>if判断语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印<span class="variable">$1</span>大于5的行</span></span><br><span class="line">awk &#x27;&#123;if($1&gt;5)print $0&#125;&#x27; num</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">假如<span class="variable">$1</span>大于5则除以2输出，否则乘以2输出</span></span><br><span class="line">awk &#x27;&#123;if($1&gt;5)print $1/2;else print $1*2&#125;&#x27; num</span><br></pre></td></tr></table></figure>
<p>for循环语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将一行中的数据都加起来  <span class="variable">$1</span>+<span class="variable">$2</span>+<span class="variable">$3</span></span></span><br><span class="line">awk &#x27;&#123;sum=0;for (i=1;i&lt;4;i++)&#123;sum+=$i&#125;print sum&#125;&#x27; num2</span><br></pre></td></tr></table></figure>
<p>while循环语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将文件中的每行的数值累加，和大于或等于150就停止累加</span></span><br><span class="line">awk &#x27;&#123;sum=0;i=1;while(sum&lt;150)&#123;sum+=$i;i++&#125;print sum&#125;&#x27; num2</span><br></pre></td></tr></table></figure>
<p>do…while循环语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk &#x27;&#123;sum=0;i=1;do&#123;sum+=$i;i++&#125;while(sum&lt;150);print sum&#125;&#x27; num2</span><br></pre></td></tr></table></figure>
<p>循环控制语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">累加每行数值，和大于150停止累加</span></span><br><span class="line">awk &#x27;&#123;sum=0;i=1;while(i&lt;4)&#123;sum+=$i;if (sum&gt;150)&#123;break&#125;;i++;&#125;;print sum&#125;&#x27; num2</span><br></pre></td></tr></table></figure>


<h3 id="4-awk小技巧"><a href="#4-awk小技巧" class="headerlink" title="4. awk小技巧"></a>4. awk小技巧</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>文本的行数</span> </span><br><span class="line">awk &#x27;END&#123;print NR&#125;&#x27; test</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>文本最后一行内容</span></span><br><span class="line">awk &#x27;END&#123;print $0&#125;&#x27; test </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">打印<span class="built_in">test</span>文本列数</span></span><br><span class="line">awk &#x27;END&#123;print NF&#125;&#x27; test </span><br></pre></td></tr></table></figure>


<h3 id="5-实战"><a href="#5-实战" class="headerlink" title="5.实战"></a>5.实战</h3><p>练习一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat contacts </span><br><span class="line">Riley Mullen</span><br><span class="line">123 Main Street</span><br><span class="line">Chicago,IL 60602</span><br><span class="line">(312)555-1234</span><br><span class="line">Riley Mullen</span><br><span class="line">123 Main Street</span><br><span class="line">Chicago,IL 60602</span><br><span class="line">(312)555-1234</span><br><span class="line">Riley Mullen</span><br><span class="line">123 Main Street</span><br><span class="line">Chicago,IL 60602</span><br><span class="line">(312)555-1234</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">期望输出</span></span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line"></span><br><span class="line">[root@www ~]# awk &#x27;BEGIN&#123;RS=&quot;&quot;;FS=&quot;\n&quot;&#125;&#123;print $1,$4&#125;&#x27; contacts </span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line">Riley Mullen (312)555-1234</span><br><span class="line">Riley Mullen (312)555-1234</span><br></pre></td></tr></table></figure>
<p>练习二</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat ip</span><br><span class="line">192.168.1</span><br><span class="line">192.168.2</span><br><span class="line">192.168.3</span><br><span class="line">172.16.3</span><br><span class="line">192.16.1</span><br><span class="line">192.16.2</span><br><span class="line">192.16.3</span><br><span class="line">10.0.4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">期望输出</span></span><br><span class="line">192.168.1-192.168.3</span><br><span class="line">172.16.3</span><br><span class="line">192.16.3-192.16.1</span><br><span class="line">10.0.4</span><br><span class="line"></span><br><span class="line">[root@www ~]# awk &#x27;BEGIN&#123;RS=&quot;&quot;;OFS=&quot;\n&quot;&#125;&#123;print $1 &quot;-&quot; $3,$4,$7 &quot;-&quot; $4,$8&#125;&#x27; ip</span><br><span class="line">192.168.1-192.168.3</span><br><span class="line">172.16.3</span><br><span class="line">192.16.3-172.16.3</span><br><span class="line">10.0.4</span><br></pre></td></tr></table></figure>
<p>练习三</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cat num</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">期望求出<span class="variable">$1</span>字段的和</span></span><br><span class="line">[root@www ~]# awk &#x27;&#123;sum+=$1&#125;END&#123;print sum&#125;&#x27; num</span><br><span class="line">45</span><br></pre></td></tr></table></figure>
<p>练习四</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">统计当前所有连接状态的数量</span></span><br><span class="line">[root@www ~]# netstat -antpl|awk &#x27;&#123;array[$6]+=1&#125;END&#123;for (i in array)print array[i],i&#125;&#x27;</span><br><span class="line">5 LISTEN</span><br><span class="line">1 established)</span><br><span class="line">1 Foreign</span><br></pre></td></tr></table></figure>
<p>练习五</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用awk命令     获取100以内能被7整除，而且包含7的数字</span></span><br><span class="line">awk &#x27;BEGIN&#123;for (i=1;i&lt;101;i++) &#123;if (i%7==0 &amp;&amp; i ~ &quot;7&quot;) &#123;print i&#125;&#125;&#125;&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
  </entry>
  <entry>
    <title>数据库基础</title>
    <url>/2021/02/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h2><p>数据库（Database）是按照数据结构来组织、存储和管理数据的建立在计算机存储设备上的仓库。</p>
<p>数据库：存储数据的仓库</p>
<h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="网络数据库"><a href="#网络数据库" class="headerlink" title="网络数据库"></a>网络数据库</h3><p>网络数据库是指把数据库技术引入到计算机网络系统中，借助网络技术将存储于数据库中的大量信息及时发布出去；而计算机网络借助于成熟的数据库技术对网络中的各种数据进行有效管理，并实现用户与网络中的数据库进行实时动态数据交换。</p>
<h3 id="层级数据库"><a href="#层级数据库" class="headerlink" title="层级数据库"></a>层级数据库</h3><p>层次结构模型实质上是一种由根结点的定向有序树（在数学中“树”被定义为一个无回的连通图）。</p>
<h3 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h3><p>关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。</p>
<p>数据库的另外一种区分方式：基于存储介质</p>
<p>​    存储介质分为两种：磁盘和内存</p>
<p>​        1、关系型数据库：存储在磁盘中</p>
<p>​        2、非关系型数据库：存储在内存中</p>
<h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>关系数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方式来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。关系模型是由埃德加·科德于1970年首先提出的，并配合“科德十二定律”。现如今虽然对此模型由一些批评意见，但它还是数据存储的传统标准。关系模型由关系数据结构、关系操作集合、关系完整性约束三部分组成。</p>
<p>关系数据结构：指的是数据以什么方式来存储，是一种二维表的形式存储</p>
<p>​    本质：二维表</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>年龄</th>
<th>身高</th>
<th>体重</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>30</td>
<td>187</td>
<td>70</td>
</tr>
<tr>
<td>李四</td>
<td>40</td>
<td>175</td>
<td>65</td>
</tr>
</tbody></table>
<p>关系操作集合：如何来关联和管理对应的存储数据，SQL指令</p>
<p>​    获取张三的年纪：已知条件为姓名</p>
<p>​    select 年龄 from 二维表 where 姓名 = 张三;</p>
<p>关系完整性约束：数据内部有对应的关联关系，以及数据与数据之间也有对应的关联关系</p>
<p>​    表内约束：对应的具体列只能放对应的数据（不能乱放）</p>
<p>​    表间约束：自然界各实体都是有着对应的关联关系（外键）</p>
<h3 id="典型的关系型数据库"><a href="#典型的关系型数据库" class="headerlink" title="典型的关系型数据库"></a>典型的关系型数据库</h3><p>Oracle、DB2、Microsoft SQL Server、Microsoft Access、MySQL、SQLite</p>
<p>小型关系型数据库：Microsoft Access，SQLite</p>
<p>中型关系型数据库：Microsoft SQL Server，MySQL</p>
<p>大型关系型数据库：Oracle、DB2</p>
<p>MySQL当前跟Oracle是一个公司的：隶属于Oracle</p>
<h2 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h2><h3 id="SQL基本介绍"><a href="#SQL基本介绍" class="headerlink" title="SQL基本介绍"></a>SQL基本介绍</h3><p><strong>结构化查询语言(Structured Query Language)**简称SQL，是一种特殊目的的</strong>编程**语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。</p>
<p>SQL就是专门为关系型数据库而设计出来的。</p>
<h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ol>
<li>数据查询语言（DQL:Data Query Language）：</li>
</ol>
<p>其语句，也称为“数据检索语句”，用以从表中获得数据，确定数据怎样在应用程序给出。保留字SELECT是DQL（也是所有SQL）用得最多的动词，其他DQL常用的保留字有WHERE，ORDER BY，GROUP BY和HAVING。这些DQL保留字常与其他类型的SQL语句一起使用。</p>
<p><strong>专门用于查询数据：</strong>代表指令为select/show</p>
<ol start="2">
<li>数据操作语言（DML：Data Manipulation Language）：</li>
</ol>
<p>其语句包括动词INSERT，UPDATE和DELETE。它们分别用于添加，修改和删除表中的行。也称为动作查询语言。</p>
<p><strong>专门用于写数据：</strong>代表指令为insert，update和delete</p>
<ol start="3">
<li>事务处理语言（TPL）：</li>
</ol>
<p>它的语句能确保被DML语句影响的表的所有行及时得以更新。TPL语句包括BEGIN TRANSACTION，COMMIT和ROLLBACK。（不是所有的关系型数据库都提供事务安全处理）</p>
<p><strong>专门用于事务安全处理：</strong>transaction</p>
<ol start="4">
<li>数据控制语言（DCL）：</li>
</ol>
<p>它的语句通过GRANT或REVOKE获得许可，确定单个用户和用户组对数据库对象的访问。某些RDBMS可用GRANT或REVOKE控制对表单个列的访问。</p>
<p><strong>专门用于权限管理：</strong>代表指令为grant和revoke</p>
<ol start="5">
<li>数据定义语言（DDL）：</li>
</ol>
<p>数据定义语言（DDL）：</p>
<p>其语句包括动词CREATE和DROP。在数据库中创建新表或删除表（CREAT TABLE 或 DROP TABLE）；为表加入索引等。DDL包括许多与人数据库目录中获得数据有关的保留字。它也是动作查询的一部分。</p>
<p><strong>专门用于结构管理：</strong>代表指令create和drop（alter）</p>
<h2 id="MySQL基本介绍"><a href="#MySQL基本介绍" class="headerlink" title="MySQL基本介绍"></a>MySQL基本介绍</h2><p>MySQL是一个关系型数据库管理系统，由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品。MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。</p>
<ol>
<li><p>Mysql是一种开源免费的数据库产品</p>
</li>
<li><p>Mysql对PHP的支持是最好（wamp或者lamp）</p>
<p>Mysql中用到的操作指令就是SQL指令</p>
</li>
</ol>
<h3 id="启动和停止MySQL服务"><a href="#启动和停止MySQL服务" class="headerlink" title="启动和停止MySQL服务"></a>启动和停止MySQL服务</h3><p>Mysql是一种C/S结构：客户端和服务端</p>
<p>服务端对应的软件：Mysqld.exe</p>
<h4 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h4><p>通过Windows下打开cmd控制器，然后使用命令进行管理</p>
<p>Net start 服务（mysql）：开启服务</p>
<p>Net stop mysql：关闭服务</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201094550224.png" alt="image-20210201094550224"></p>
<h4 id="系统服务方式"><a href="#系统服务方式" class="headerlink" title="系统服务方式"></a>系统服务方式</h4><p>前提：在安装的Mysql的时候将mysql添加到Windows的服务中去了</p>
<p>方式1进入服务：</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201094711157.png" alt="image-20210201094711157"></p>
<p>方式2进入服务：通过命令行：services.msc</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201094736779.png" alt="image-20210201094736779"></p>
<p>通过服务对Mysql服务器进行管理</p>
<p>方案1：右键服务，然后选择开启或者停止</p>
<p>方案2：双击服务，进入到服务详情界面，可以点击开启或者停止按钮</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201094849505.png" alt="image-20210201094849505"></p>
<h3 id="登录和退出MySQL系统"><a href="#登录和退出MySQL系统" class="headerlink" title="登录和退出MySQL系统"></a>登录和退出MySQL系统</h3><p>通过客户端（mysql.exe）与服务器进行连接认证，就可以进行操作</p>
<p>通常：服务端与客户端不在同一台电脑上</p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><ol>
<li><p>找到mysql.exe（通过cmd控制台：如果在安装的时候指定了mysql.exe所在的路径为环境变量，就可以直接访问；如果没有，那么就必须进入到mysql.exe所在路径）</p>
</li>
<li><p>输入对应的服务器地址：-h：host -h[IP地址/域名]</p>
</li>
<li><p>  输入服务器中Mysql监听的端口： -P:port    –P:3306</p>
</li>
<li><p>输入用户名：-u:username    -u:root</p>
</li>
<li><p>  输入密码：-p：password    –p:root</p>
</li>
</ol>
<p>连接认证基本语法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Mysql.exe/mysql  -h主机地址  -P端口  -u用户名  -p密码</span><br></pre></td></tr></table></figure>
<p><strong>注意事项</strong></p>
<ol>
<li><p>通常端口都可以默认：mysql坚挺的端口通常都是3306</p>
</li>
<li><p>密码的输入可以先输入-p，直接换行，然后再以密文方式输入密码</p>
</li>
</ol>
<h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>断开与服务器的连接：通常Mysql提供的服务器数量有限，一旦客户端用完，建议就应该断开连接。</p>
<p>建议方式：使用SQL提供的指令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Exit;       //exit带分号</span><br><span class="line"></span><br><span class="line">\q;     //quit缩写</span><br></pre></td></tr></table></figure>


<h3 id="Mysql服务端架构"><a href="#Mysql服务端架构" class="headerlink" title="Mysql服务端架构"></a>Mysql服务端架构</h3><p>Mysql服务端架构有以下几层构成：</p>
<ol>
<li>数据库管理系统（最外层）：DBMS，专门管理服务器端的所有内容</li>
<li>数据库（第二层）：DB，专门用于存储数据的仓库（可以有很多个）</li>
<li>二维数据表（第三层）：Table，专门用于存储具体实体的数据</li>
<li>字段（第四层）：Field，具体存储某种类型的数据（实际存储单元）</li>
</ol>
<p>数据库中常用的几个关键字</p>
<p>Row：行</p>
<p>Column：列（field）</p>
<h2 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h2><p>数据库是数据存储的最外层（最大单元）</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名字 [库选项];</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201102450283.png" alt="image-20210201102450283"></p>
<p>库选项：数据库的相关属性</p>
<p>​    字符集：charset 字符集，代表着当前数据库下的所有表存储的数据默认指定的字符集（如果当前不指定，那么采用DBMS默认的）</p>
<p>​    校对集：collate 校对集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">database</span> 数据库名字 <span class="keyword">charset</span> 字符集名称;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201102741428.png" alt="image-20210201102741428"></p>
<h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><p>每当用户通过SQL指令创建一个数据库，那么系统就会产生一个对应的存储数据的文件夹（data）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201102857300.png" alt="image-20210201102857300"></p>
<p>其实，每个数据库文件夹下都有一个opt文件，保存的是对应的数据库选项。</p>
<h4 id="显示全部"><a href="#显示全部" class="headerlink" title="显示全部"></a>显示全部</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201103240303.png" alt="image-20210201103240303"></p>
<p>information_schema：保存数据库所有的结构信息（库，表）</p>
<p>mysql：核心数据库：权限关系</p>
<p>performance_schema：效率库</p>
<h4 id="显示部分"><a href="#显示部分" class="headerlink" title="显示部分"></a>显示部分</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">&#x27;匹配模式&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>_：匹配当前位置单个字符</p>
<p>%：匹配指定位置多个字符</p>
<p>获取以my开头的全部数据库： ‘my%’;</p>
<p>获取m开头，后面第一个字母不确定，最后为database的数据库；’m_database’;</p>
<p>获取以database结尾的数据库：’%database’;</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201103737787.png" alt="image-20210201103737787"></p>
<h4 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名字;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201103914965.png" alt="image-20210201103914965"></p>
<p>看到的指令并非原始指令，已经被系统加工过</p>
<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>为什么要选择数据库？因为数据是存储到数据表，表存在数据库下。如果要操作数据，那么必须进入到对应的数据库才行。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名字;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201104122369.png" alt="image-20210201104122369"></p>
<p>Database changed：表示当前已经进入到指定的数据库环境</p>
<h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>修改数据库字符集(库选项)：字符集和校对集</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名字 <span class="keyword">charset</span> = 字符集;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201104414913.png" alt="image-20210201104414913"></p>
<p>一旦修改成功，那么对应的opt文件中就会体现</p>
<blockquote>
<p>是否可以修改数据库名字？mysql5.5之前是可以修改的rename命令；但是5.5之后就不可以。</p>
</blockquote>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名字;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201105437039.png" alt="image-20210201105437039"></p>
<p>删除虽简单，但是切记要做好安全操作：确保里面数据没有问题。（重要）</p>
<p>删除数据库之后：对应的存储数据的文件夹也会被删除（opt文件也被删除）</p>
<h2 id="数据表操作"><a href="#数据表操作" class="headerlink" title="数据表操作"></a>数据表操作</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><h4 id="普通创建表"><a href="#普通创建表" class="headerlink" title="普通创建表"></a>普通创建表</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(字段名 字段类型 [字段属性], 字段名 字段类型 [字段属性],…) [表选项];</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201110015941.png" alt="image-20210201110015941"></p>
<p>以上错误说明：表必须放到对应的数据库下：有两种方式可以将表挂入到指定的数据库下</p>
<ol>
<li>​    在数据表名字前面加上数据库名字，用“.”连接即可：<code>数据库.数据表</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201110101965.png" alt="image-20210201110101965"></p>
<ol start="2">
<li>在创建数据表之前先进入到某个具体的数据库即可：<code>use 数据库名字</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201110434257.png" alt="image-20210201110434257"></p>
<p>表选项：与数据库选项类似</p>
<p>​    Engine：存储引擎，mysql提供的具体存储数据的方式，默认有一个innodb（5.5以前默认是myisam）</p>
<p>​    Charset：字符集，只对当前自己表有效（级别比数据库高）</p>
<p>​    Collate：校对集</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201110836086.png" alt="image-20210201110836086"></p>
<h3 id="复制已有表结构"><a href="#复制已有表结构" class="headerlink" title="复制已有表结构"></a>复制已有表结构</h3><p>从已经存在的表复制一份（只复制结构：如果表中有数据不复制）</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 新表名 <span class="keyword">like</span> 表名;  //只要使用数据库.表名，就可以在任何数据库下访问其他数据库的表名</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201111250023.png" alt="image-20210201111250023"></p>
<p>从mydatabase2下取到的表</p>
<h3 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h3><p>每当一张数据表创建，那么就会在对应的数据库下创建一些文件（与存储引擎有关）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201112403130.png" alt="image-20210201112403130"></p>
<p>frm代表结构文件</p>
<p>注意：这个结构文件来自于innodb存储引擎，innodb存储引擎所有的文件都存储在外部的ibdata文件中</p>
<h4 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201112559373.png" alt="image-20210201112559373"></p>
<h4 id="匹配显示表"><a href="#匹配显示表" class="headerlink" title="匹配显示表"></a>匹配显示表</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">&#x27;匹配模式&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201112720840.png" alt="image-20210201112720840"></p>
<h3 id="显示表结构"><a href="#显示表结构" class="headerlink" title="显示表结构"></a>显示表结构</h3><p>本质含义：显示表中所包含的字段信息（名字，类型，属性等）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Describe</span> 表名;</span><br><span class="line"></span><br><span class="line">Desc 表名;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">columns</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201112947679.png" alt="image-20210201112947679"></p>
<h3 id="显示表创建语句"><a href="#显示表创建语句" class="headerlink" title="显示表创建语句"></a>显示表创建语句</h3><p>查看数据表创建时的语句：此语句看到的结果已经不是用户之前自己输入的。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201113452531.png" alt="image-20210201113452531"></p>
<p>Mysql中有多种语句结束符</p>
<p>;与\g：所表示的效果是一样的，都是字段在上排横着，下面跟对应的数据</p>
<p>\G：字段在左侧竖着，数据在右侧横着</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201113626708.png" alt="image-20210201113626708"></p>
<h3 id="设置表属性"><a href="#设置表属性" class="headerlink" title="设置表属性"></a>设置表属性</h3><p>表属性指的就是表选项：engine，charset和collate</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 表选项 [=] 值;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201113933085.png" alt="image-20210201113933085"></p>
<p><strong>注意：</strong>如果数据库已经确定了，里面有很多数据了，不要轻易修改表选项（字符集影响不大）</p>
<h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p>修改表名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rename</span> <span class="keyword">table</span> 旧表名 <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201114309171.png" alt="image-20210201114309171"></p>
<p>修改表选项：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 表选项 [=] 新值;</span><br></pre></td></tr></table></figure>
<p>新增字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> [<span class="keyword">column</span>] 新字段名 列类型 [列属性] [位置<span class="keyword">first</span>/<span class="keyword">after</span> 字段名];</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201114623028.png" alt="image-20210201114623028"></p>
<p>​    特点：默认是加到表的最后面</p>
<p>​    字段位置：字段想要存放的位置</p>
<p>​    First：在某某之前（最前面），第一个字段</p>
<p>​    After 字段名：放在某个具体的字段之后（默认的）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201114746399.png" alt="image-20210201114746399"></p>
<p>修改字段名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> 旧字段名 新字段名 字段类型 [列属性] [新位置];</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201115050718.png" alt="image-20210201115050718"></p>
<p>修改字段类型（属性）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 字段名 新类型 [新属性] [新位置];</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201115223432.png" alt="image-20210201115223432"></p>
<p>删除字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201115336444.png" alt="image-20210201115336444"></p>
<h3 id="删除表结构"><a href="#删除表结构" class="headerlink" title="删除表结构"></a>删除表结构</h3><p>基础语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名[,表名<span class="number">2</span>…]，可以同时删除多个数据表;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201115613273.png" alt="image-20210201115613273"></p>
<p>批量删除表</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201115645049.png" alt="image-20210201115645049"></p>
<h2 id="数据基础操作"><a href="#数据基础操作" class="headerlink" title="数据基础操作"></a>数据基础操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>本质含义：将数据以SQL的形式存储到指定的数据表（字段）里面</p>
<p>基本语法：向表中指定字段插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> 表名[(字段列表)] <span class="keyword">values</span>(对应字段列表);</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201151129149.png" alt="image-20210201151129149"></p>
<ol>
<li>注意：后面（values中）对应的值列表只需要与前面的字段列表相对应即可（不一定与表结构完全一致）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201151743065.png" alt="image-20210201151743065"></p>
<ol start="2">
<li>注意：字段列表并不一定非要有所有的表中字段</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201151820315.png" alt="image-20210201151820315"></p>
<p>基本语法：向表中所有字段插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span> (对应表结构);	//值列表必须与字段列表一致</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201151949831.png" alt="image-20210201151949831"></p>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>查询表中全部数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名; 		/<span class="comment">/*表示匹配所有的字段</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201152142137.png" alt="image-20210201152142137"></p>
<p>查询表中部分字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名;  //字段列表使用逗号“,”隔开</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201153136573.png" alt="image-20210201153136573"></p>
<p>简单条件查询数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表<span class="comment">/* from 表名 where 字段名 = 值;	//mysql中没有==符号</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201153328037.png" alt="image-20210201153328037"></p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];	//如果没有where条件：意味着系统会自动删除该表所有数据（慎用）</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201153537780.png" alt="image-20210201153537780"></p>
<h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><p>更新：将数据进行修改（通常是修改部分字段数据）</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名 = 新值 [<span class="keyword">where</span> 条件];		//如果没有where条件，那么所有的表中对应的那个字段都会被修改成统一值。</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201153813400.png" alt="image-20210201153813400"></p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="字符编码概念"><a href="#字符编码概念" class="headerlink" title="字符编码概念"></a>字符编码概念</h3><p>字符(Character)是各种文字和符号的总称，包括各国家文字、标点符号、图形符号、数字等。</p>
<p>在计算机中所看到的任何内容都是字符构成的。</p>
<p>字符编码（character code）是计算机针对各种符号，在计算机中的一种二进制存储代号。</p>
<h3 id="字符集概念"><a href="#字符集概念" class="headerlink" title="字符集概念"></a>字符集概念</h3><p>字符集(Character set)是多个字符的集合，字符集种类较多，每个字符集包含的字符个数不同。</p>
<p>常见字符集名称：<strong>ASCII字符集</strong>、<strong>GB2312字符集</strong>、BIG5字符集、 GB18030字符集、<strong>Unicode字符集</strong>等。计算机要准确的处理各种字符集文字，需要进行字符编码，以便计算机能够识别和存储各种文字。中文文字数目大，而且还分为简体中文和繁体中文两种不同书写规则的文字，而计算机最初是按英语单字节字符设计的，因此，对中文字符进行编码，是中文信息交流的技术基础。</p>
<h3 id="设置客户端所有字符集"><a href="#设置客户端所有字符集" class="headerlink" title="设置客户端所有字符集"></a>设置客户端所有字符集</h3><p>如果直接通过cmd下的mysql.exe进行中文数据插入，那么可能出错</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201154432373.png" alt="image-20210201154432373"></p>
<p>出错原因：</p>
<ol>
<li>用户是通过mysql.exe来操作mysqld.exe</li>
<li>真正的SQL执行是Mysqld.exe来执行</li>
<li>mysql.exe将数据传入mysqld.exe的时候，没有告知其对应的符号规则（字符集），而mysqld也没有能力自己判断，就会使用自己默认的（字符集）</li>
</ol>
<p>解决方案：mysql.exe客户端在进行数据操作之前将自己所使用的字符集告诉mysqld</p>
<p>Cmd下的mysql.exe默认都只有一个字符集：GBK</p>
<p>Mysql.exe如果告知Mysqld.exe对应的字符集类型为gbk？</p>
<p>快捷方式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">names</span> 字符集;</span><br></pre></td></tr></table></figure>
<p>深层原理：客户端，服务端，连接层（show variables like ‘character_set_%’）</p>
<p>Mysql.exe与Mysqld.exe之间的处理关系一共分为三层</p>
<p>客户端传入数据给服务端：client:character_set_client</p>
<p>服务端返回数据给客户端：server:character_set_results</p>
<p>客户端与服务端之间的连接(中间的连接层)：connection:character_set_connection</p>
<p>（这里说的不是很详细，是这样的：客户端 &lt;–&gt;中间连接层 &lt;–&gt;服务端）</p>
<p>Set names 字符集的本质：就是一次性打通三层关系的字符集，变得一致。</p>
<p>在系统中有三个变量来记录着这三个关系对应的字符集：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> ‘character_set_%’;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201155154220.png" alt="image-20210201155154220"></p>
<p>(试验)只修改服务器端变量的值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201155645609.png" alt="image-20210201155645609"></p>
<p>重新进行数据插入和查看的结果：插入OK，但是查看乱码</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201155656208.png" alt="image-20210201155656208"></p>
<p>修改结果字符集为GBK</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201155744872.png" alt="image-20210201155744872"></p>
<p>Connection只是为了更方便客户端与服务端进行字符集转换而设。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span> <span class="keyword">names</span> gbk;</span><br><span class="line"></span><br><span class="line">===等价于===</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> character_set_client = gbk; //为了让服务器识别客户端传来的数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> character_set_connection = gbk;//更好的帮助客户端与服务端之间进行字符集转换</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> character_set_results = gbk;//为了告诉客户端服务端所有的返回的数据字符集</span><br></pre></td></tr></table></figure>


<h2 id="列类型（字段类型）"><a href="#列类型（字段类型）" class="headerlink" title="列类型（字段类型）"></a>列类型（字段类型）</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p><strong>Tinyint</strong></p>
<p>迷你整形，系统采用一个字节来保存的整形：一个字节 = 8位，最大能表示的数值是0-255</p>
<p><strong>Smallint</strong></p>
<p>小整形，系统采用两个字节来保存的整形：能表示0-65535之间</p>
<p><strong>Mediumint</strong></p>
<p>中整形，采用三个字节来保存数据。</p>
<p><strong>Int</strong></p>
<p>整形（标准整形），采用四个字节来保存数据。</p>
<p><strong>Bigint</strong></p>
<p>大整形，采用八个字节来保存数据。</p>
<ol>
<li>创建数据表</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201161355804.png" alt="image-20210201161355804"></p>
<ol start="2">
<li>插入合理数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201161534979.png" alt="image-20210201161534979"></p>
<ol start="3">
<li>插入错误数据（超出对应的数据范围）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201161652049.png" alt="image-20210201161652049"></p>
<ol start="4">
<li><p>错误原因：并不是说tinyint没有这么大的空间，而是因为mysql默认的为整形增加负数。</p>
<p>实际表示的区间为-128,127</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201161802769.png" alt="image-20210201161802769"></p>
<p>实际应用中，应该根据对应的数据的范围来选定对应的整形类型：通常使用的比较多的tinyint和int。</p>
<h4 id="无符号标识设定"><a href="#无符号标识设定" class="headerlink" title="无符号标识设定"></a>无符号标识设定</h4><p>无符号：表示存储的数据在当前字段中，没有负数（只有正数，区间为0-255）</p>
<p>基本语法：在类型之后加上一个 <code>unsigned</code></p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201162135074.png" alt="image-20210201162135074"></p>
<h3 id="显示长度"><a href="#显示长度" class="headerlink" title="显示长度"></a>显示长度</h3><p>显示长度：指数据（整型）在数据显示的时候，到底可以显示多长位。</p>
<p>Tinyint(3)： 表示最长可以显示3位，unsigned说明只能是正数，0-255永远不会超过三个长度</p>
<p>Tinyint(4)：表示最长可以显示4位，-128~127</p>
<p>显示长度只是代表了数据是否可以达到指定的长度，但是不会自动满足到指定长度：如果想要数据显示的时候，保持最高位（显示长度），那么还需要给字段增加一个<code>zerofill</code>属性才可以。</p>
<p>Zerofill：从左侧开始填充0（左侧不会改变数值大小），所以负数的时候就不能使用zerofill，一旦使用zerofill就相当于确定该字段为unsigned</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201162817468.png" alt="image-20210201162817468"></p>
<p>数据显示的时候，zerofill会在左侧填充0到指定位：如果不足3位，那么填充到3位，如果本身已经够了或者超出，那么就不再填充。</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201163030886.png" alt="image-20210201163030886"></p>
<p>显示长度可以自己设定：超出长度（但是不超出范围）不会影响，只会对不够长度的进行补充（显示长度）</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201163247315.png" alt="image-20210201163247315"></p>
<h2 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h2><p>专门用来存储小数的</p>
<p> 在Mysql中将小数类型又分为两类：浮点型和定点型</p>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>浮点型又称之为精度类型：是一种有可能丢失精度的数据类型，数据有可能不那么准确（由其是在超出范围的时候）</p>
<p> 浮点型之所以能够存储较大的数值（不精确），原因就是利用存储数据的位来存储指数</p>
<p>整型：所有位都为1</p>
<p>浮点型：有部分用于存储数据，有部分用于存指数</p>
<h4 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h4><p>Float又称之为单精度类型：系统提供4个字节用来存储数据，但是能表示的数据范围比整型大的多，大概是10^38；只能保证大概7个左右的精度（如果数据在7位数以内，那么基本是准确的，但是如果超过7位数，那么就是不准确的）</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Float：表示不指定小数位的浮点数</span><br><span class="line">Float(M,D)：表示一共存储M个有效数字，其中小数部分占D位</span><br><span class="line">Float(10,2)：整数部分为8位，小数部分为2位</span><br></pre></td></tr></table></figure>
<ol>
<li>创建一个数据表保存浮点数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201205424487.png" alt="image-20210201205424487"></p>
<ol start="2">
<li>存入数据：合法数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201205633680.png" alt="image-20210201205633680"></p>
<p><strong>注意：</strong>如果数据精度丢失，那么浮点型是按照四舍五入的方式进行计算</p>
<ol start="3">
<li>插入数据，超出大小</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201205746999.png" alt="image-20210201205746999"></p>
<ol start="4">
<li>数据长度刚好满足条件，但是会超出精度</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201205951894.png" alt="image-20210201205951894"></p>
<p>说明：用户不能插入数据直接超过指定的整数部分长度，但是如果是系统自动进位导致，系统可以承担。</p>
<ol start="5">
<li>点数可以采用科学计数法来存储数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201210145520.png" alt="image-20210201210145520"></p>
<p>浮点数的应用：通常是用来保存一些数量特别大，大到可以不用那么精确的数据。</p>
<h4 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h4><p>Double又称之为双精度：系统用8个字节来存储数据，表示的范围更大，10^308次方，但是精度也只有15位左右。</p>
<h3 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h3><p>定点数：能够保证数据精确的小数（小数部分可能不精确，超出长度会四舍五入），整数部分一定精确</p>
<h4 id="Decimal"><a href="#Decimal" class="headerlink" title="Decimal"></a>Decimal</h4><p>Decimal定点数：系统自动根据存储的数据来分配存储空间，每大概9个数就会分配四个字节来进行存储，同时小数和整数部分是分开的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Decimal(M,D)	//M表示总长度，最大值不能超过65，D代表小数部分长度，最长不能超过30。</span><br></pre></td></tr></table></figure>
<ol>
<li>创建表：与浮点数对比</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201210721223.png" alt="image-20210201210721223"></p>
<ol start="2">
<li>插入正常数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201210859329.png" alt="image-20210201210859329"></p>
<ol start="3">
<li>插入最大数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201210952427.png" alt="image-20210201210952427"></p>
<ol start="4">
<li>尝试定点数进行四舍五入</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201211049777.png" alt="image-20210201211049777"></p>
<p>定点数的应用：如果涉及到钱的时候有可能使用定点数</p>
<h2 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h2><p><strong>Date</strong></p>
<p>日期类型：系统使用三个字节来存储数据，对应的格式为：YYYY-mm-dd，能表示的范围是从1000-01-01 到9999-12-12，初始值为0000-00-00</p>
<p><strong>Time</strong></p>
<p>时间类型：能够表示某个指定的时间，但是系统同样是提供3个字节来存储，对应的格式为：HH:ii:ss，但是mysql中的time类型能够表示时间范围要大的多，能表示从-838:59:59~838:59:59，在mysql中具体的用处是用来描述时间段。</p>
<p><strong>Datetime</strong></p>
<p>日期时间类型：就是将前面的date和time合并起来，表示的时间，使用8个字节存储数据，格式为YYYY-mm-dd HH:ii:ss，能表示的区间1000-01-01 00:00:00 到9999-12-12 23:59:59，其可以为0值：0000-00-00 00:00:00</p>
<p><strong>Timestamp</strong></p>
<p>时间戳类型：mysql中的时间戳只是表示从格林威治时间开始，但是其格式依然是：YYYY-mm-dd HH:ii:ss</p>
<p><strong>Year</strong></p>
<p>年类型：占用一个字节来保存，能表示1900<del>2155年，但是year有两种数据插入方式：0</del>99和四位数的具体年</p>
<ol>
<li>创建对应的时间日期类型的数据表</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201212050657.png" alt="image-20210201212050657"></p>
<ol start="2">
<li>插入数据：正常数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210201213054205.png" alt="image-20210201213054205"></p>
<ol start="3">
<li>year的特殊性：可以采用两位数的数据插入，也可以采用四位数的年份插入</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201213140140.png" alt="image-20210201213140140"></p>
<ol start="4">
<li>year进行两位数插入的时候，有一个区间划分，零界点为69和70：当输入69以下，那么系统时间为20+数字，如果是70以上，那配系统时间为19+数字</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210201213303376.png" alt="image-20210201213303376"></p>
<ol start="5">
<li>timestamp当对应的数据被修改的时候，会自动更新（这个被修改的数据不是自己）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201213613455.png" alt="image-20210201213613455"></p>
<ol start="6">
<li>time类型特殊性：本质是用来表示时间区间（当前时间之后的多少个小时），能表示的范围比较大</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201214659343.png" alt="image-20210201214659343"></p>
<ol start="7">
<li>在进行时间类型录入的时候（time）还可以使用一个简单的日期代替时间，在时间格式之前加一个空格，然后指定一个数字（可以是负数）：系统会自动将该数字转换成天数 * 24小时，再加上后面的时间。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201215023350.png" alt="image-20210201215023350"></p>
<p>PHP中有着非常强大的时间日期转换函数：date将时间戳转换成想要的格式，strtotime又可以将很多格式转换成对应的时间戳。PHP通常不需要数据库来帮助处理这么复杂的时间日期，所以通常配合PHP的时候，时间的保存通常使用时间戳（真正），从而用整型来保存。字符串型</p>
<h2 id="Mysql记录长度"><a href="#Mysql记录长度" class="headerlink" title="Mysql记录长度"></a>Mysql记录长度</h2><p>在mysql中，有一项规定：mysql的记录长度（record == 行row）总长度不能超过65535个字节。</p>
<p>Varchar能够存储的理论值为65535个字符：字符在不同的字符集下可能占用多个字节。</p>
<ol>
<li><p>创建表：证明varchar在mysql中能够达到的理论值（utf8和GBK）</p>
<p>Varchar除了存储的数据本身要占用空间：还需要额外的空间来保存记录长度</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201221113421.png" alt="image-20210201221113421"></p>
<ol start="2">
<li><p>计算在utf8和GBK下对应的varchar能够存储的长度</p>
<p>Utf8 最多只能存储21844个字符</p>
<p>GBK最多只能存储32766个字符</p>
</li>
</ol>
<h2 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h2><h3 id="Char"><a href="#Char" class="headerlink" title="Char"></a>Char</h3><p>定长字符：指定长度之后，系统一定会分配指定的空间用于存储数据</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">char(L)		//L代表字符数（中文与英文字母一样），L长度为0到255</span><br></pre></td></tr></table></figure>


<h3 id="Varchar"><a href="#Varchar" class="headerlink" title="Varchar"></a>Varchar</h3><p>变长字符：指定长度之后，系统会根据实际存储的数据来计算长度，分配合适的长度（数据没有超出长度）</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Varchar(L)		//L代表字符数，L的长度理论值位0到65535</span><br></pre></td></tr></table></figure>
<p>因为varchar要记录数据长度（系统根据数据长度自动分配空间），所以每个varchar数据产生后，系统都会在数据后面增加1-2个字节的额外开销：是用来保存数据所占用的空间长度</p>
<p>如果数据本身小于127个字符：额外开销一个字节；如果大于127个，就开销两个字节</p>
<p>Char和varchar数据存储对比（utf8，一个字符都会占用3个字节）</p>
<table>
<thead>
<tr>
<th>存储数据</th>
<th>Char(2)</th>
<th>Varchar(2)</th>
<th>Char所占字节</th>
<th>Varchar所占字节</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>A</td>
<td>A</td>
<td>2*3=6</td>
<td>1*3+1=4</td>
</tr>
<tr>
<td>AB</td>
<td>AB</td>
<td>AB</td>
<td>2*3=6</td>
<td>2*3+1=7</td>
</tr>
</tbody></table>
<p>Char和varchar的区别</p>
<ol>
<li>char一定会使用指定的空间，varchar是根据数据来定空间</li>
<li>char的数据查询效率比varchar高：varchar是需要通过后面的记录数来计算</li>
</ol>
<p>如果确定数据一定是占指定长度，那么使用char类型；</p>
<p>如果不确定数据到底有多少，那么使用varchar类型；</p>
<p>如果数据长度超过255个字符，不论是否固定长度，都会使用text，不再使用char和varchar</p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>文本类型：本质上mysql提供了两种文本类型</p>
<p>Text：存储普通的字符文本</p>
<p>Blob：存储二进制文本（图片，文件），一般都不会使用blob来存储文件本身，通常是使用一个链接来指向对应的文件本身。</p>
<p>Text：系统中提供的四种text</p>
<p>Tinytext：系统使用一个字节来保存，实际能够存储的数据为：2 ^ 8 + 1</p>
<p>Text：使用两个字节保存，实际存储为：2 ^ 16 + 2</p>
<p>Mediumtext：使用三个字节保存，实际存储为：2 ^ 24 + 3</p>
<p>Longtext：使用四个字节保存，实际存储为：2 ^ 32 + 4</p>
<p><strong>注意：</strong></p>
<ol>
<li><p>在选择对应的存储文本的时候，不用刻意去选择text类型，系统会自动根据存储的数据长度来选择合适的文本类型。</p>
</li>
<li><p> 在选择字符存储的时候，如果数据超过255个字符，那么一定选择text存储</p>
</li>
</ol>
<h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>枚举类型：在数据插入之前，先设定几个项，这几个项就是可能最终出现的数据结果。</p>
<p>如果确定某个字段的数据只有那么几个值：如性别，男、女、保密，系统就可以在设定字段的时候规定当前字段只能存放固定的几个值：使用枚举</p>
<p> 基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">enum(数据值1,数据值2…)</span><br></pre></td></tr></table></figure>
<p>系统提供了1到2个字节来存储枚举数据：通过计算enum列举的具体值来选择实际的存储空间：如果数据值列表在255个以内，那么一个字节就够，如果超过255但是小于65535，那么系统采用两个字节保存。</p>
<ol>
<li>创建表</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201223233074.png" alt="image-20210201223233074"></p>
<ol start="2">
<li>插入数据：合法数据，字段对应的值必须是设定表的时候所确定的值</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201223904438.png" alt="image-20210201223904438"></p>
<ol start="3">
<li>错误数据：enum有规范数据的功能，能够保证插入的数据必须是设定的范围，其他类型都不可以</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201223940083.png" alt="image-20210201223940083"></p>
<ol start="4">
<li><p>枚举enum的存储原理：实际上字段上所存储的值并不是真正的字符串，而是字符串对应的下标：当系统设定枚举类型的时候，会给枚举中每个元素定义一个下标，这个下标规则从1开始</p>
<p>Enum(1=&gt;‘男’,2=&gt;’女’,3=&gt;’保密’)</p>
</li>
</ol>
<p>特性：在mysql中系统是自动进行类型转换的：如果数据碰到“+、-、*、/”系统就会自动将数据转换成数值：而普通字符串转换成数值为0</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> 字段名 + <span class="number">0</span> <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201224315462.png" alt="image-20210201224315462"></p>
<ol start="5">
<li>既然实际enum字段存储的结果是数值：那么在进行数据插入的时候，就可以使用对应的数值来进行。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210201224512431.png" alt="image-20210201224512431"></p>
<p>枚举的意义：</p>
<ol>
<li><p> 规范数据本身，限定只能插入规定的数据项</p>
</li>
<li><p>节省存储空间</p>
</li>
</ol>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合：是一种将多个数据选项可以同时保存的数据类型，本质是将指定的项按照对应的二进制位来进行控制：1表示该选项被选中，0表示该选项没有被选中。</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(<span class="string">&#x27;值1&#x27;</span>,<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值3&#x27;</span>…)</span><br></pre></td></tr></table></figure>
<p>系统为set提供了多个字节进行保存，但是系统会自动计算来选择具体的存储单元</p>
<p>1个字节：set只能有8个选项</p>
<p>2个字节：set只能有16个选项</p>
<p>3个字节：set只能表示24个选项</p>
<p>8个字节：set可以表示64个选项</p>
<p>Set和enum一样，最终存储到数据字段中的依然是数字而不是真实的字符串</p>
<ol>
<li>创建表</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202103910558.png" alt="image-20210202103910558"></p>
<ol start="2">
<li>插入数据：可以插入多个数据，就是在数据插入的字符串中，使用对应的逗号“,”将选项进行隔开</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202104253832.png" alt="image-20210202104210055"></p>
<ol start="3">
<li>数据选项所在的数据与数据插入的顺序无关：最终都会变成选项对应的顺序</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202104253832.png" alt="image-20210202104253832"></p>
<ol start="4">
<li><p>分析数据存储的方式</p>
<ul>
<li>系统将对应的数据选项（设计）按照顺序进行编排：从第一个开始进行占位，每一个都对应一个二进制位。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110202788.png" alt="image-20210202110202788"></p>
<ul>
<li>数据在存储的时候，如果被选中，那么对应的位的值就为1，否则为0</li>
</ul>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110209248.png" alt="image-20210202110209248"></p>
<ul>
<li>系统在进行存储的时候会自动将得到的最终的二进制颠倒过来，然后再进行转换成十进制存储</li>
</ul>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110242581.png" alt="image-20210202110242581"></p>
</li>
<li><p>查看数据：按照自动转换成数值来查看</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110242581.png" alt="image-20210202110403507"></p>
<ol start="6">
<li>既然是数值，那么就可以插入数值来代替实际插入数据</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110509393.png" alt="image-20210202110509393"></p>
<p>注意：数字插入的前提是对应的二进制位上都有对应的数据项</p>
<p>Set集合的意义：</p>
<ol>
<li><p>规范数据</p>
</li>
<li><p>节省存储空间</p>
</li>
</ol>
<p>Enum：单选框</p>
<p>Set：复选框</p>
<h2 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h2><p>列属性又称之为字段属性，在mysql中一共有6个属性：null，默认值，列描述，主键，唯一键和自动增长</p>
<h3 id="Null属性"><a href="#Null属性" class="headerlink" title="Null属性"></a>Null属性</h3><p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202110928429.png" alt="image-20210202110928429"></p>
<p>如果对应的值为YES表示该字段可以为NULL</p>
<p> <strong>注意：</strong></p>
<ol>
<li><p> 在设计表的时候，尽量不要让数据为空</p>
</li>
<li><p>Mysql的记录长度为65535个字节，如果一个表中有字段允许为NULL，那么系统就会设计保留一个字节来存储NULL，最终有效存储长度为65534个字节。</p>
</li>
</ol>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>Default：默认值，当字段被设计的时候，如果允许默认条件下，用户不进行数据的插入，那么就可以使用事先准备好的数据来填充：通常填充的是NULL</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202111232936.png" alt="image-20210202111232936"></p>
<p>测试：不给当前字段提供数据值</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202111435998.png" alt="image-20210202111435998"></p>
<p>Default关键字的另外一层使用：显示的告知字段使用默认值：在进行数据插入的时候，对字段值直接使用default</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202112645755.png" alt="image-20210202112645755"></p>
<h3 id="列描述"><a href="#列描述" class="headerlink" title="列描述"></a>列描述</h3><p>列描述：comment，是专门用于给开发人员进行维护的一个注释说明</p>
<p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">comment</span> <span class="string">&#x27;字段描述&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202113120710.png"></p>
<p>查看Comment：必须通过查看表创建语句</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202113203633.png" alt="image-20210202113203633"></p>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>顾名思义：主要的键，primary key，在一张表中，有且只有一个字段，里面的值具有唯一性</p>
<h3 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h3><h4 id="随表创建"><a href="#随表创建" class="headerlink" title="随表创建"></a>随表创建</h4><p>系统提供了两种增加主键的方式</p>
<ol>
<li><p>方案1：直接在需要当做主键的字段之后，增加primary key属性来确定主键</p>
</li>
<li><p>方案2：在所有字段之后增加primary key选项：primary key(字段信息)</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202120612365.png" alt="image-20210202120612365"></p>
<h4 id="表后增加"><a href="#表后增加" class="headerlink" title="表后增加"></a>表后增加</h4><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> primary <span class="keyword">key</span>(字段);</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202120832072.png" alt="image-20210202120832072"></p>
<h3 id="查看主键"><a href="#查看主键" class="headerlink" title="查看主键"></a>查看主键</h3><p>方案1：查看表结构</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202145506603.png" alt="image-20210202145506603"></p>
<p>主键不允许为空</p>
<p>方案2：查看表的创建语句</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202145637959.png" alt="image-20210202145637959"></p>
<h3 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h3><p>基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202145758014.png" alt="image-20210202145758014"></p>
<h3 id="复合主键"><a href="#复合主键" class="headerlink" title="复合主键"></a>复合主键</h3><p>案例：有一张学生选修课表：一个学生可以选修多个选修课，一个选修课也可以由多个学生来选：但是一个学生在一个选修课中只有一个成绩。</p>
<p>设计字段：学号、课程号、成绩。</p>
<p>​    设置复合主键：<code>primary key(student_no,course_no)</code>：表示学号和课程号两个共同唯一，不能存在相同的 学号-课程号。</p>
<p>下节’主键约束’是用这个示范的</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202150156257.png" alt="image-20210202150156257"></p>
<h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>主键一旦增加，那么对对应的字段有数据要求</p>
<ol>
<li><p>当前字段对应的数据不能为空；</p>
</li>
<li><p>当前字段对应的数据不能有任何重复</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202150609018.png" alt="image-20210202150609018"></p>
<h3 id="主键分类"><a href="#主键分类" class="headerlink" title="主键分类"></a>主键分类</h3><p>主键分类采用的是主键所对应的字段的业务意义分类</p>
<p> 业务主键：主键所在的字段，具有业务意义（学生ID，课程ID）</p>
<p>逻辑主键：自然增长的整型（应用广泛）</p>
<h2 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h2><p>自动增长：auto_increment，当给定某个字段该属性之后，该列的数据在没有提供确定数据的时候，系统会根据之前已经存在的数据进行自动增加后，填充数据。</p>
<p>通常自动增长用于逻辑主键。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>自动增长的原理：</p>
<ol>
<li><p>在系统中有维护一组数据，用来保存当前使用了自动增长属性的字段，记住当前对应的数据值，再给定一个指定的步长</p>
</li>
<li><p>当用户进行数据插入的时候，如果没有给定值，系统在原始值上再加上步长变成新的数据</p>
</li>
<li><p>自动增长的触发：给定属性的字段没有提供值</p>
</li>
<li><p>自动增长只适用于数值</p>
</li>
</ol>
<h3 id="使用自动增长"><a href="#使用自动增长" class="headerlink" title="使用自动增长"></a>使用自动增长</h3><p>基本语法：在字段之后增加一个属性<code>auto_increment</code></p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202151324813.png" alt="image-20210202151324813"></p>
<p>插入数据：触发自动增长，不能给定具体值</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202151431059.png" alt="image-20210202151431059"></p>
<h3 id="修改自动增长"><a href="#修改自动增长" class="headerlink" title="修改自动增长"></a>修改自动增长</h3><ol>
<li>查看自增长：自增长一旦触发使用之后，会自动的在表选项中增加一个选项（一张表最多只能拥有一个自增长）</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202151610015.png" alt="image-20210202151610015"></p>
<ol start="2">
<li>表选项可以通过修改表结构来实现</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 auto_increment = 值;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202151324813.png" alt="image-20210202151756130"></p>
<h3 id="删除自动增长"><a href="#删除自动增长" class="headerlink" title="删除自动增长"></a>删除自动增长</h3><p>删除自增长：就是在字段属性之后不再保留auto_increment，当用户修改自增长所在字段时，如果没有看到auto_increment属性，系统会自动清除该自增长</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202151929007.png" alt="image-20210202151929007"></p>
<h3 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h3><p>在系统中，有一组变量用来维护自增长的初始值和步长</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;auto_increment%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202152237890.png" alt="image-20210202152237890"></p>
<h3 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h3><ol>
<li><p>一张表只有一个自增长：自增长会上升到表选项中</p>
</li>
<li><p>如果数据插入中没有触发自增长（给定了数据），那么自增长不会表现</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202152551652.png" alt="image-20210202152551652"></p>
<ol start="3">
<li>自增长修改的时候，值可以较大，但是不能比当前已有的自增长字段的值小</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202152839685.png" alt="image-20210202152839685"></p>
<h2 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h2><p>唯一键：unique key，用来保证对应的字段中的数据唯一的。</p>
<p>主键也可以用来保证字段数据唯一性，但是一张表只有一个主键。</p>
<ol>
<li><p>唯一键在一张表中可以有多个。</p>
</li>
<li><p>唯一键允许字段数据为NULL，NULL可以有多个（NULL不参与比较）</p>
</li>
</ol>
<h3 id="创建唯一键"><a href="#创建唯一键" class="headerlink" title="创建唯一键"></a>创建唯一键</h3><ol>
<li>直接在表字段之后增加唯一键标识符：<code>unique[key]</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202153554592.png" alt="image-20210202153554592"></p>
<ol start="2">
<li>在所有的字段之后使用<code>unique key(字段列表)</code></li>
</ol>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202153605292.png" alt="image-20210202153605292"></p>
<ol start="3">
<li>在创建完表之后也可以增加唯一键</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">unique</span> <span class="keyword">key</span>(字段列表);</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202153622092.png" alt="image-20210202153622092"></p>
<h3 id="查看唯一键"><a href="#查看唯一键" class="headerlink" title="查看唯一键"></a>查看唯一键</h3><p>唯一键是属性，可以通过查看表结构来实现</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202153835259.png" alt="image-20210202153835259"></p>
<p>唯一键效果：在不为空的情况下，不允许重复</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202154034665.png" alt="image-20210202154034665"></p>
<p>在查看表创建语句的时候，会看到与主键不同的一点：多出一个“名字”</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202154229227.png" alt="image-20210202154229227"></p>
<h3 id="删除唯一键"><a href="#删除唯一键" class="headerlink" title="删除唯一键"></a>删除唯一键</h3><p>一个表中允许存在多个唯一键：假设命令为主键一样：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">unique</span> <span class="keyword">key</span>;		//错误的</span><br></pre></td></tr></table></figure>
<p>Index关键字：索引，唯一键是索引一种（提升查询效率）</p>
<p>删除的基本语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">index</span> 唯一键名字;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202154740150.png" alt="image-20210202154740150"></p>
<h3 id="修改唯一键"><a href="#修改唯一键" class="headerlink" title="修改唯一键"></a>修改唯一键</h3><p>先删除后增加</p>
<h3 id="复合唯一键"><a href="#复合唯一键" class="headerlink" title="复合唯一键"></a>复合唯一键</h3><p>唯一键与主键一样 可以使用多个字段来共同保证唯一性；</p>
<p> 一般主键都是单一字段（逻辑主键），而其他需要唯一性的内容都是由唯一键来处理。</p>
<h2 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h2><p>表关系：表与表之间（实体）有什么样的关系，每种关系应该如何设计表结构。</p>
<h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p>一对一：一张表中的一条记录与另外一张表中最多有一条明确的关系：通常，此设计方案保证两张表中使用同样的主键即可</p>
<p>学生表</p>
<table>
<thead>
<tr>
<th>学生ID（PRI）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
<th>籍贯</th>
<th>婚否</th>
<th>住址</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>表的使用过程中：常用的信息会经常去查询，而不常用的信息会偶尔才会用到。</p>
<p>解决方案：将两张表拆分，常见的放一张表，不常见的放一张表</p>
<p>常用表</p>
<table>
<thead>
<tr>
<th>学生ID（PRI）</th>
<th>姓名</th>
<th>年龄</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>不常用表</p>
<table>
<thead>
<tr>
<th>学生ID（PRI）</th>
<th>籍贯</th>
<th>婚否</th>
<th>住址</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p>一对多，通常也叫作多对一的关系。通常一对多的关系设计的方案，在“多”关系的表中去维护一个字段，这个字段是“一”关系的主键。</p>
<p>母亲表</p>
<table>
<thead>
<tr>
<th>母亲ID</th>
<th>姓名</th>
<th>年龄</th>
<th>身高</th>
</tr>
</thead>
<tbody><tr>
<td>M1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>M2</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>孩子表</p>
<table>
<thead>
<tr>
<th>孩子ID</th>
<th>姓名</th>
<th>年龄</th>
<th>身高</th>
<th>母亲ID</th>
</tr>
</thead>
<tbody><tr>
<td>K1</td>
<td></td>
<td></td>
<td></td>
<td>M1</td>
</tr>
<tr>
<td>K2</td>
<td></td>
<td></td>
<td></td>
<td>M1</td>
</tr>
</tbody></table>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p>多对多：一张表中的一条记录在另外一张表中可以匹配到多条记录，反过来也一样。</p>
<p>多对多的关系如果按照多对一的关系维护：就会出现一个字段中有多个其他表的主键，在访问的时候就会带来不便。</p>
<p>既然通过两张表自己增加字段解决不了问题，那么就通过第三张表来解决。</p>
<p>师生关系</p>
<ol>
<li><p>一个老师教过多个班级的学生；</p>
</li>
<li><p>一个学生听过多个老师讲的课；</p>
</li>
</ol>
<p>首先得有两个实体：老师表和学生表</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210202160043144.png" alt="image-20210202160043144"></p>
<p>从中间设计一张表：维护两张表对应的联系：每一种联系都包含</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/blob/main/blog-img/image-20210202160309724.png" alt="image-20210202160309724"></p>
<p>多对多解决方案；增加一个中间表，让中间表与对应的其他表形成两个多对一的关系：多对一的解决方案是在“多”表中增加“一”表对应的主键字段。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象基础</title>
    <url>/2021/01/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>引入：计算机编程在历史的发展长河中，经历了多次<code>版本变革</code>，变化的轨迹是伴随着硬件的发展和人们对于计算机的认知以及需求。</p>
</blockquote>
<ul>
<li><p>机器语言：即开发者（科学家）使用<code>0</code>和<code>1</code>组成命令，然后在特定计算机上执行</p>
<ul>
<li><p>优点：执行效率高</p>
</li>
<li><p>缺点：开发难度大、移植性差、开发成本高</p>
</li>
</ul>
</li>
<li><p>汇编语言：开发者使用简洁<code>英文字母</code>和<code>符号</code>组成，让计算机读取后根据符号进行加工执行</p>
<ul>
<li>优点：指令简单明了、推广性高</li>
<li>缺点：移植性差、功能简单</li>
</ul>
</li>
<li><p>高级计算机语言：开发者使用类似自然语言的<code>符号</code>组成，高级语言根据编程思想分为<code>面向过程编程</code>和<code>面向对象编程</code>两种，然后系统对程序代码进行编译（需要第三方编译器）然后执行</p>
<ul>
<li>优点：移植性强、可读性强、推广性非常高</li>
<li>缺点：执行效率降低</li>
</ul>
</li>
</ul>
<p><strong>面向过程编程</strong></p>
<ul>
<li><p>将要解决的问题（功能需求）分解成具体的步骤，然后通过<strong>函数编程</strong>实现每一个步骤，最后通过函数规定好的顺序调用完成</p>
</li>
<li><p>面向过程编程思想的优点</p>
<ul>
<li>能够针对步骤拆分，进行模块化封装（函数）</li>
<li>可以实现代码复用，从而节省开发成本</li>
</ul>
</li>
<li><p>面向过程编程思想的缺点</p>
<ul>
<li>不够灵活维护，流程一旦确定就必须按照既定方式执行到底。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>小结</strong></p>
</blockquote>
<p>1、计算机编程从对开发人员要求极高到要求不高，是一代代人坚持不懈的结果</p>
<p>2、面向对象编程是目前最为符合人类思维逻辑的一种编程思想</p>
<h2 id="一、面向对象编程思想"><a href="#一、面向对象编程思想" class="headerlink" title="一、面向对象编程思想"></a>一、面向对象编程思想</h2><h3 id="面向对象编程思想概念及原理"><a href="#面向对象编程思想概念及原理" class="headerlink" title="面向对象编程思想概念及原理"></a>面向对象编程思想概念及原理</h3><blockquote>
<p><strong>定义</strong>：面向对象编程也叫做OOP编程（Objected Oriented Programming），是一种基于面向过程的开发思想。与面向过程强调分解事务步骤相似，面向对象更需要追求事务操作的“主体”，也就是<code>对象</code></p>
</blockquote>
<ol>
<li>面向对象编程是一种编程思想，不是一种具体技术</li>
<li>面向对象是在面向过程基础之上发展而来，因此也是一种模块化编程思想（有函数）</li>
<li>面向对象能够更加方便的实现代码的重复利用（适用于大型项目）</li>
<li>在面向对象思维中，任何动作的执行或者数据都属于对象（一切皆对象）</li>
</ol>
<blockquote>
<p><strong>小结</strong></p>
</blockquote>
<ol>
<li>面向对象编程是一种编程思想，与技术无关</li>
<li>面向对象编程的本质是增加数据和功能的操作主体，即对象</li>
<li>面向对象中所有的数据和功能都是由主体（对象）来调用和操作</li>
</ol>
<h2 id="二、面向对象基础"><a href="#二、面向对象基础" class="headerlink" title="二、面向对象基础"></a>二、面向对象基础</h2><blockquote>
<p><strong>思考</strong>：按照面向对象编程思想逻辑，先编写好对应的功能函数，然后再放到某个主体中。那么已经写好的函数如何放到某个主体中去呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：上述图片中描述的是思想的实现，在实际编写代码的过程中，肯定不是这么去实现的。面向对象中，对于一些思想产物有一些不同的称呼。</p>
</blockquote>
<h3 id="1-面向对象关键字说明【掌握】"><a href="#1-面向对象关键字说明【掌握】" class="headerlink" title="1.面向对象关键字说明【掌握】"></a>1.面向对象关键字说明【掌握】</h3><blockquote>
<p><strong>定义</strong>：面向对象关键字说明，即在面向对象思想设计的程序中，有一些关键的结构用词。在面向对象中，关键结构包括以下几个：</p>
</blockquote>
<ol>
<li>类：class，是定义面向对象主体的最外层结构，用来包裹主体的数据和功能（函数）。类是一类具有共性事务的代表，代表的是事务的共性。</li>
<li>对象：object，是某类事务的具体代表，也是实际数据和功能操作的具体单元，也被称之为实例（instance）</li>
<li>实例化：new，从一个抽象的概念(类)得到一个符合抽象概念的具体实例(对象)的过程</li>
<li>类成员：member，指类class结构中的所有内容，类成员里有三种</li>
</ol>
<ul>
<li>方法：method，本质是在类class结构中创建的函数，也称之为<code>成员方法</code>或者成员函数</li>
<li>属性：property，本质是在类class结构中创建的变量，也称之为<code>成员变量</code></li>
<li>类常量：constant，本质是在类class结构中创建的常量</li>
</ul>
<blockquote>
<p><strong>总结</strong>：面向对象基础中没有本质多出很多东西，基本只是将原来面向过程的内容进行一层包裹而已。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>思考</strong>：面向对象编程到底是如何用代码实现这样的编程思想的呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：其实所有的编程都大同小异：编写程序–&gt;运行程序。只是根据不同的思想会有不同的关键字让系统识别而已。</p>
</blockquote>
<h3 id="2-面向对象简单技术实现【掌握】"><a href="#2-面向对象简单技术实现【掌握】" class="headerlink" title="2.面向对象简单技术实现【掌握】"></a>2.面向对象简单技术实现【掌握】</h3><blockquote>
<p><strong>定义</strong>：面向对象思维的实现，就是利用面向对象提供的关键字和代码规范来进行编程，而这里面最核心的两个部分就是类class和对象object</p>
</blockquote>
<ol>
<li>定义类基本语法：class 类名{}</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//定义一个空类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Nothing</span></span>&#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>类class是一种结构，如果写好没有语法错误的情况下，代码不会执行（与函数定义一样），也无法打印输出</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">clsss Nothing&#123;&#125;</span><br><span class="line">var_dump(Nothing);		<span class="comment">//错误，提示未定义的常量</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>类的命名规范：类的命名规范与函数类似，区别在于人为的通常会将类名的首字母大写</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//有效类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My1</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_1</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_My1</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无效类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 1<span class="title">My</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 1<span class="title">_my</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>如果碰到多单词组成的类名，通常使用驼峰法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>类无法直接访问，需要得到类的具体对象才能访问，可以通过<strong>实例化</strong>new来实现对象的创建：new 类名[()]</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> My;			<span class="comment">//创建一个My类的对象</span></span><br><span class="line"><span class="keyword">new</span> My();		<span class="comment">//创建一个My类的对象</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>对象创建后可以直接使用或者打印，但是为了方便后续使用，通常使用变量保存实例化的对象</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span></span>&#123;&#125;</span><br><span class="line">var_dump(<span class="keyword">new</span> My);	<span class="comment">//直接打印输出对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$m</span> = <span class="keyword">new</span> My;		<span class="comment">//保存对象</span></span><br><span class="line">var_dump(<span class="variable">$m</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="keyword">object</span>(My)<span class="comment">#1 (0) &#123; &#125; object(My)#2 (0) &#123; &#125;</span></span><br><span class="line"><span class="keyword">object</span>：对象</span><br><span class="line">(My)：类名 </span><br><span class="line"><span class="comment">#1：编号</span></span><br><span class="line">(<span class="number">0</span>)：成员变量（属性）个数   </span><br><span class="line">&#123;&#125;：具体成员变量信息（键值对）</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>通过class关键字 + 类名 +{}创建类</li>
<li>类是一种结构，不会自动运行，也不能输出</li>
<li>通过new 类名实例化对象得到类的具体对象（具象）</li>
<li>可以通过new实例化无限个对象</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：上面定义的类就是个空类，里面什么都没有，类里面能够放些什么东西呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：通常空类没有什么价值，需要往类里填充<code>类成员</code>，这样的类才有价值，这样的类实例化得到的对象才有意义。</p>
</blockquote>
<h3 id="3-类成员【掌握】"><a href="#3-类成员【掌握】" class="headerlink" title="3.类成员【掌握】"></a>3.类成员【掌握】</h3><blockquote>
<p><strong>定义</strong>：类成员，指直接定义在类结构{}内部的一级成员，即直接依赖{}的成员。在PHP中类成员有三种：成员变量（属性），成员方法（成员函数）和类常量</p>
</blockquote>
<ol>
<li>成员变量：就是在类结构{}下直接定义的变量，但是定义的方式与普通变量稍微有点不同，需要在变量名字前使用一个关键字public，定义语法：public 变量名字 [= 值];，成员变量可以赋值也可以不赋值。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义买家类：买家有姓名，有钱</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">	<span class="comment">//$name;			//错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;		 <span class="comment">//正确：没有赋值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$money</span> = <span class="number">0</span>;	 <span class="comment">//正确：有赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>成员变量访问：成员变量必须通过对象才能进行访问，也就是需要先通过实例化得到对象，然后通过对象实现对成员变量的增删改查：访问语法：$对象名-&gt;属性名;</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#定义买家类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;	</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$money</span> = <span class="number">0</span>;	 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Buyer();</span><br><span class="line"><span class="comment">//访问属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>-&gt;money;</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line"><span class="variable">$b</span>-&gt;money = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//删除属性</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$b</span>-&gt;name);</span><br><span class="line"><span class="comment">//新增属性</span></span><br><span class="line"><span class="variable">$b</span>-&gt;age = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：删除属性和新增属性通常使用较少，更多的属性操作是访问和修改</p>
<ol start="3">
<li>成员方法：就是在类结构{}下定义的函数，函数内部的内容与原来函数结构一样，可以有分支、循环结构等</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义买家类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>成员方法访问：成员方法也是需要通过对象进行访问的，访问语法为：$对象名-&gt;方法名字();</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义买家类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;	</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> Buyer();</span><br><span class="line"><span class="variable">$b</span>-&gt;display();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>类常量：类常量是在类结构{}下定义的常量，类常量的定义只能使用一种方式：const 常量名 = 值;</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义买家类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义类常量</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：类常量不是由对象来进行访问，所以暂时不做访问讲解，到后面知识再讲。</p>
<ol start="6">
<li>类成员中：属性、类常量和方法都可以无限定义，但是定义的原则是相关性。除了以上三个类成员，不能在类结构{}中直接写其他任何代码</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buyer</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;					<span class="comment">//错误</span></span><br><span class="line">    define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>);	 			<span class="comment">//错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123; <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>&#125;	 <span class="comment">//错误</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>PHP类结构中有三种成员：属性、方法和类常量</li>
<li>类结构中只能有三种成员，不限数量，其他代码需要写到方法里面，否则报错</li>
<li>类中属性和方法的访问方式都是通过对象来调用：$对象-&gt;属性名/方法名()；注意属性名不带$符号</li>
<li>类中定义属性不能直接使用属性名，需要使用符号public修饰</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：属性本质是变量，只是放到类结构中而已，为什么一定要使用public呢？有什么用呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：在面向对象中，属性或者方法都是用来给对象访问的，但是有的时候并不是所有的内容都是允许对象在外部访问的，这个时候就出现<code>访问修饰限定符</code>来控制访问位置。</p>
</blockquote>
<h3 id="4-访问修饰限定符【掌握】"><a href="#4-访问修饰限定符【掌握】" class="headerlink" title="4.访问修饰限定符【掌握】"></a>4.访问修饰限定符【掌握】</h3><blockquote>
<p><strong>定义</strong>：访问修饰限定符，是一种用在属性或者方法前的修饰关键字，是用来控制属性或者方法的访问位置的。在PHP中访问修饰限定符分为三种：public、protected和private</p>
</blockquote>
<ol>
<li>首先需要明白一组概念类的内部和外部</li>
</ol>
<ul>
<li>类内部：是指类定义的内容内部，即类名后{}内部</li>
<li>类外部：是指类定义的外部内容，即类名后{}之外的所有地方</li>
<li>类成员的访问权限控制是内部访问（私有）、链内部访问（受保护）和全部访问（公有）</li>
</ul>
<ol start="2">
<li>public：公有，即表示所修饰的内容（属性或者方法）可以在当前类的内部访问，也可以在类的外部访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  <span class="comment">//公有属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>-&gt;count;				<span class="comment">//正常输出100</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>protected：受保护，即表示所修饰的内容只能在<code>类的内部</code>访问（在学习继承时再讲）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  <span class="comment">//受保护属性</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>-&gt;discount;				<span class="comment">//错误：受保护属性不允许在类外访问</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>private：私有，即表示所修饰的内容只能在<code>当前类的内部</code>访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  <span class="comment">//私有属性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>-&gt;money;				<span class="comment">//错误：私有属性不允许在类外访问</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>访问修饰限定符不只是限定属性，也用来限定方法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  <span class="comment">//属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>)</span>&#123;&#125;	</span><br><span class="line">  <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDiscount</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getMoney</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params"></span>)</span>&#123;&#125;					<span class="comment">#如果没有指定访问修饰限定符，默认public</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>访问修饰限定符分为三种：public、protected和private，访问权限依次降低</li>
<li>访问修饰限定符限定的是成员到底在哪里能被访问，私有和受保护都只能在类内部访问，公有可以在任何地方访问（但都必须是对象去访问）</li>
<li>属性必须写清楚访问修饰限定符，方法可以省去（不建议），因为系统默认是public</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：前面访问修饰限定符描述的只是在外部调用访问，怎么能够体现在类的内部访问呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：类的内部如果是在类结构{}后，除了类三种成员，不能有别的代码；但是类成员方法内部可以写任何代码，因此可以在类方法内部实现访问：此时方法运行的内部环境属于类内部。</p>
</blockquote>
<h3 id="5-类内部对象【掌握】"><a href="#5-类内部对象【掌握】" class="headerlink" title="5.类内部对象【掌握】"></a>5.类内部对象【掌握】</h3><blockquote>
<p><strong>定义</strong>：类成员属性和方法的访问必须通过对象才能访问，类外部可以通过实例化得到类对象从而实现成员访问，但是类内部又不能访问类外部的对象（未知），此时类的内部就内置了一个对象$this代表来访对象。</p>
</blockquote>
<ol>
<li>尝试在类内部方法中访问属性</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">100</span>;</span><br><span class="line">  	<span class="keyword">protected</span> <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$count</span>,<span class="variable">$discount</span>,<span class="variable">$money</span>;	<span class="comment">//全部错误：提示未定义的“变量”</span></span><br><span class="line">    &#125;					</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s</span>-&gt;getAll();</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：方法本质是定义在类内部的函数，因此受制于作用域的问题，在方法内部访问的变量系统认定为局部变量（必须内部定义或者参数传入），否则就会提示未定义</p>
<ol start="2">
<li>类内部访问类成员，需要通过对象来进行访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">100</span>;</span><br><span class="line">  	<span class="keyword">protected</span> <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="comment">//需要获取到对象名字：因为方法本身就是函数，访问外部全局变量可以通过global引入实现</span></span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$s</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>-&gt;count,<span class="variable">$s</span>-&gt;discount,<span class="variable">$s</span>-&gt;money;		<span class="comment">#正确输出</span></span><br><span class="line">    &#125;					</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s</span>-&gt;getAll();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>思考这样一个问题：类一开始定义好，但是对象实例化是在需要使用该类的时候来调用的，如何保证外部保存对象的变量一定是$s呢？对象可以创建多个，如果有多个对象变量，那内部怎么实现呢？如果系统内部能够检测到是哪个对象在调用方法，并且能够复制对应对象就好了，这个就是类成员方法<code>内置对象$this</code></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span> = <span class="number">100</span>;</span><br><span class="line">  	<span class="keyword">protected</span> <span class="variable">$discount</span> = <span class="number">0.8</span>;</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;count,<span class="keyword">$this</span>-&gt;discount,<span class="keyword">$this</span>-&gt;money;		<span class="comment">#正确输出</span></span><br><span class="line">    &#125;					</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s</span>-&gt;getAll();</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><p>由上述代码可见：$this代表的是对象，而$this所在环境为类内部的方法内部，所以$this对象是在类内部访问，因此可以访问所有的属性和方法，不受访问修饰限定符限制</p>
</li>
<li><p>$this、class和new之间的关系原理</p>
</li>
</ol>
<ul>
<li><p>class是定义类结构，属于非执行段代码，因此会被加载到代码段（编译阶段）</p>
</li>
<li><p>new是实例化对象，先判定类在内存（代码段）是否存在</p>
<ul>
<li>类不存在，报错；</li>
<li>类存在，将类内部的属性部分复制一份，然后在内存（堆区）开辟一块内存空间，将属性放到里面，同时内部有一个指针指向类的内存空间（代码段）</li>
<li>对象访问属性即访问的是对象空间里存储的部分</li>
<li>对象访问方法是对象通过内部指针找到类空间中的方法，然后在内存（栈区）开辟运行</li>
</ul>
</li>
<li><p>$this是系统在方法内置的对象通用名字</p>
<ul>
<li><p>对象在调用方法的时候，系统会自动找到对象所保存的内存地址（堆区），然后把地址赋值给$this</p>
</li>
<li><p>方法内部的$this就代表调用当前$this所在方法的外部对象</p>
</li>
<li><p>$this的本质是函数内部的一个局部变量，只是系统自动对其进行赋值，而且一定是调用方法的对象本身</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>类内部方法内有一个内置对象$this，代表访问该方法的外部对象</li>
<li>类在实例化对象的时候要保证内存中有该类</li>
<li>一个类可以实例化多个对象，每个对象访问成员方法时，$this就代表对应对象</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：面向对象中，属性在定义类结构的时候是否需要赋值？到底该如何使用访问修饰限定符呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：站在开发者的角度，并没有任何强制规定属性在类中定义的时候就需要初始化，也没有任何规定访问修饰限定符到底该用哪个。但是从业务需求和隐私保护角度出发，有一些规则需要我们遵循。</p>
</blockquote>
<h3 id="6-面向对象开发规范【掌握】"><a href="#6-面向对象开发规范【掌握】" class="headerlink" title="6.面向对象开发规范【掌握】"></a>6.面向对象开发规范【掌握】</h3><blockquote>
<p><strong>定义</strong>：面向对象规范是指我们在开发时，在技术没有强制规定的情况下，应该采用什么样的方式来协助我们进行代码的书写。</p>
</blockquote>
<ol>
<li>属性的初始化：属性是类对于同类事务所抽离出来的共性<code>数据</code>，本身在类结构中没有价值，是当具体对象产生之后，属于对象本身的。因此在进行类中定义属性的时候，通常不会对属性进行初始化，除非属性本身的值也具有共性</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">    <span class="comment">//某个卖家拥有的商品数量，每位具体卖家对象拥有的不可能一样，所以没必要初始化</span></span><br><span class="line">  	<span class="keyword">protected</span> <span class="variable">$discount</span>;</span><br><span class="line">    <span class="comment">//某个卖家针对销售的折扣，同样没有统一的价值</span></span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//某个卖家的账户余额，任何一位卖家一开始做生意的时候，账户余额都为0，所以可以初始化</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>属性的初始化：属性在类中初始化的基本判定就是数据是否初始化的时候统一，如果数据统一（即初始化），那么所有对象在生成之后，就拥有对应的值；如果不初始化，意味着所有对象在生成后，应该对属性进行赋值。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">new</span> Saler();	<span class="comment">//所有对象都有两个属性，其中$count都没有数据，而$money都为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成对象后，对象对自己的属性进行初始化</span></span><br><span class="line"><span class="variable">$s1</span>-&gt;count = <span class="number">100</span>;	</span><br><span class="line"><span class="variable">$s2</span>-&gt;count = <span class="number">1000</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>访问修饰限定符选择：访问修饰限定符是用来限制类成员被对象访问时对象所处位置的。访问的权限从public、protected到private依次变小。使用规则如下：</li>
</ol>
<ul>
<li>设定好的类成员本身不会被外部用到，那么应该使用private或者protected</li>
<li>设定好的类成员一定会给外部访问，使用public</li>
<li>属性通常private居多，如果需要外部访问属性，通常会定义相关方法来实现属性的查看和修改，因为可以在方法内对数据逻辑进行代码控制，安全</li>
<li>总之一句话：尽可能增加类对成员的控制（尽可能多使用private，少使用public）</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span> = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加方法操作私有属性money</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMoney</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMoney</span>(<span class="params"><span class="variable">$money</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//可以对逻辑进行修改，对数据进行安全判定，保证数据的安全性</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;money = <span class="variable">$money</span>;</span><br><span class="line">        <span class="comment">//$this-&gt;money是属性，$money是外部传入的参数，二者同名但是性质完全不同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>属性在类中定义的时候，通常不会初始化值，除非所有类实例化得到的对象的某个属性需要是统一值</li>
<li>应该尽可能增加类对成员的控制，即使用范围较小的访问修饰限定符优先</li>
<li>属性通常是私有化的，一般是通过设定方法来实现属性的访问和修改</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：属性一般不会在类定义的时候就初始化，那实例化对象的时候，属性的数据不都是为空吗？这样的数据有什么价值呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：属性属于对象使用，在类中初始化的确没有太多价值，但是对象实例化之后如果属性数据为空也没有价值。因此通常属性都是在对象实例化的时候进行初始化的，这个时候就需要用到一种自动<code>构造</code>的方式来完成</p>
</blockquote>
<h3 id="7-构造方法【掌握】"><a href="#7-构造方法【掌握】" class="headerlink" title="7.构造方法【掌握】"></a>7.构造方法【掌握】</h3><blockquote>
<p><strong>定义</strong>：构造方法__construct()，是一种类结构特有的特殊方法，该方法由系统规定好，开发人员在定义的时候只需要写<strong>抄</strong>一遍，有了构造方法的类在实例化对象之后，对象就会自动调用。</p>
</blockquote>
<ol>
<li>构造方法实现：在类中增加一个方法__construct()即可</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>构造方法也是一个普通方法，不普通的地方在于，类实例化得到的对象会马上自动调用</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接上述代码</span></span><br><span class="line"><span class="keyword">new</span> Saler();				<span class="comment">//输出Saler</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>构造方法的意义：构造方法是对象实例化的时候用来初始化对象的资源的，所以通常是用来初始化对象的属性或者其他资源初始化</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法：初始化属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;count = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;money = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>如果属性的数据在构造方法中初始化是固定写死的，那么与直接在定义类的时候初始化属性一样。意味着数据没有任何价值（所有对象都相同），因此通常是通过构造方法的参数来实现数据的外部传入</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法：初始化属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$count</span>,<span class="variable">$money</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;money = <span class="variable">$money</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>一旦构造方法拥有了形参，那么对象在调用该方法的时候就需要传入对应的实参，而构造方法又是自动调用的，所以需要在实例化对象的时候使用new 类名(构造方法对应的实参列表)来实现</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接上述代码</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">new</span> Saler(<span class="number">1000</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：之前所说的<code>new 类名</code> 和<code>new 类名()</code>没有区别是因为没有构造方法，或者构造方法没有参数限定，一旦构造方法有了参数，那么<code>new 类名</code> 就不能直接使用了。</p>
<ol start="6">
<li>构造方法不管再怎么特殊，也是用户定义的方法，言外之意除了在实例化对象时对象会自动调用之外，我们也可以手动调用构造方法（但是一般没有价值，因为对象实例化时会自动调用）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法：初始化属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$count</span>,<span class="variable">$money</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;count = <span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;money = <span class="variable">$money</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler(<span class="number">100</span>,<span class="number">100</span>);			<span class="comment">//系统在new Saler(100,100)好之后，会自动调用一次</span></span><br><span class="line"><span class="variable">$s</span>-&gt;__construct(<span class="number">1000</span>,<span class="number">1000</span>);			<span class="comment">//允许手动调用</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>构造方法__construct()是一种系统内置的方法，该方法的特性是会在对象实例化之后，对象立即自动调用</li>
<li>构造方法的目的就是为了初始化资源，包含对象属性和其他资源</li>
<li>一旦构造方法定义好之后，且构造方法自带参数，那么就只能使用<code>new 类名(参数列表)</code>方式才能正确实例化</li>
<li>构造方法可以当做普通方法由对象调用（不建议）</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：构造方法是用来实现资源的初始化的，那么有没有需求来实现资源的释放呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：理论上讲，一种资源被初始化通常需要在不用的时候给释放掉，这样的程序才是好的程序。而PHP有个特点，就是脚本运行结束后系统自动回收所有内存，这就决定了PHP开发者大多数时候不喜欢额外做释放资源的工作。同样的，对象有构造方法初始化资源，也有<code>析构方法</code>释放资源。</p>
</blockquote>
<h3 id="8-析构方法【了解】"><a href="#8-析构方法【了解】" class="headerlink" title="8.析构方法【了解】"></a>8.析构方法【了解】</h3><blockquote>
<p><strong>定义</strong>：析构方法__destruct()，也是一种类结构中特殊的方法，与构造方法一样，也是系统规定好，只需要开发人员<strong>抄</strong>一遍即可，对象在被销毁时会自动调用。</p>
</blockquote>
<ol>
<li>析构方法实现：类中增加一个__destruct()方法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//析构方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>析构方法调用：析构方法是在对象被销毁时自动，对象的“垂死挣扎”</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接上述代码</span></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$s</span>);			<span class="comment">//删除对象</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>析构方法是对象用来调用释放对象中的资源，不是用来删除对象的</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//析构方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//销毁对象所占用资源的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>析构方法也是普通方法，可以由对象直接调用</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接析构方法实现代码</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s</span>-&gt;__destruct();		<span class="comment">//思考：此时对象是否被销毁？</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>对象销毁情形</li>
</ol>
<ul>
<li>保存对象的变量被用来保存其他数据，导致对象内存没有任何变量引用</li>
<li>删除对象变量</li>
<li>脚本执行结束：释放所有变量</li>
</ul>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>析构方法是一种对象销毁时自动调用的方法</li>
<li>析构方法是用来对象销毁自身所占用的资源</li>
<li>PHP中脚本执行结束，系统会自动回收所有资源，因此一般PHP中很少使用析构方法</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：在PHP中，变量赋值是值传递的，即变量赋值给另外一个变量，两个变量是不同的。如果变量保存的是对象，那么给变量赋值的时候，会产生两个对象吗？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：对象的产生是由实例化得到的，因此如果是将保存对象的变量赋值给另外一个变量，这个过程是不会产生新的变量的。</p>
</blockquote>
<h3 id="9-对象传值【了解】"><a href="#9-对象传值【了解】" class="headerlink" title="9.对象传值【了解】"></a>9.对象传值【了解】</h3><blockquote>
<p><strong>定义</strong>：对象传值，其实就是将保存对象的变量赋值给另外一个变量，在PHP中，对象的传值是<strong>引用传递</strong>的：即一个对象变量赋值给另外一个变量，两个变量指向同一个对象的内存地址，即只有一个对象。</p>
</blockquote>
<ol>
<li>对象传值就是保存对象的变量赋值给另外一个变量</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s2</span> = <span class="variable">$s1</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对象传值是引用传递，不管对象赋值给多少个变量，内存中只有一个对象</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s2</span> = <span class="variable">$s1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//证明</span></span><br><span class="line">var_dump(<span class="variable">$s1</span>,<span class="variable">$s2</span>);		<span class="comment">//同一个对象</span></span><br><span class="line"><span class="variable">$s1</span>-&gt;name = <span class="string">&#x27;Saler&#x27;</span>;	<span class="comment">//更改一个变量所保存对象的属性</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s2</span>-&gt;name;			<span class="comment">//输出Saler</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong>：对象传值是引用传值，一般情况下不会在项目中用到。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>思考</strong>：前面类成员中，属性和方法都已经清楚的知道是由对象来访问，唯独类常量没有被访问，类常量到底是如何访问的呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：类常量通过名字分析就知道是属于类的，因此类常量的访问是通过类来进行访问的。</p>
</blockquote>
<h3 id="10-范围解析操作符（类常量访问）【掌握】"><a href="#10-范围解析操作符（类常量访问）【掌握】" class="headerlink" title="10.范围解析操作符（类常量访问）【掌握】"></a>10.范围解析操作符（类常量访问）【掌握】</h3><blockquote>
<p><strong>定义</strong>：范围解析操作符，由两个冒号组成“**::**”，是专门用于类实现类成员操作的，可以实现类直接访问类成员。</p>
</blockquote>
<ol>
<li>类常量的普通访问尝试：尝试使用对象进行访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">	<span class="comment">//类常量</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s1</span>-&gt;PI;			<span class="comment">//错误，$s1-&gt;PI最终转换的访问方式为:$PI，这个在类中并不存在</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>以上案例可以看出，对象无法访问类常量，那是因为类常量的定义本身就是用来给类访问的，对象是用来访问属性和方法的，类常量的访问方式为：类名::常量名</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">	<span class="comment">//类常量</span></span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> Saler::PI;			<span class="comment">//输出3.14</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>分析：类常量是固定的，而对象的属性是不同对象而不同的，成员方法简单的理解也是为属性本身进行加工的。因此有一些东西是专属于类的，而有部分内容是专门为对象提供的，所以就会有不同的成员拥有不同的访问方式</li>
</ol>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>类访问成员的方式是使用范围解析操作符“**::**”访问，由类名直接访问：类名::类常量</li>
<li>类本身是通过对同类对象的抽象而形成，所以属性和方法本身都是由对象来访问</li>
<li>类也需要有一些自身的数据和操作，这些就由类来进行访问</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：类要访问的成员，都只能是类常量吗？毕竟类常量是一旦定义不可修改的，这样没有多大价值。</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：在类中，类成员只有三种：类常量、属性和方法，为了区分对象和类访问，可以使用<code>static</code>关键字来修饰属性和方法。</p>
</blockquote>
<h3 id="11-静态成员【掌握】"><a href="#11-静态成员【掌握】" class="headerlink" title="11.静态成员【掌握】"></a>11.静态成员【掌握】</h3><p><strong>定义</strong>：静态成员，使用static关键字修饰的类成员，表示该成员属于<strong>类访问</strong>。PHP静态成员有两种，静态属性和静态方法。</p>
<ol>
<li>静态属性：在类中定义属性的时候使用static关键字修饰，访问的时候只能使用类+范围解析操作符+静态属性访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">	<span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$money</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;	<span class="comment">//静态属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员可以直接使用类访问，而不需要先实例化对象</span></span><br><span class="line"><span class="keyword">echo</span> Saler::<span class="variable">$count</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>静态方法：在定义方法的时候使用static关键字修饰，访问的时候使用类+范围解析操作符+静态方法名字()访问</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__CLASS__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类直接访问</span></span><br><span class="line">Saler::showClass();</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在类的内部也可以访问静态成员，同样是使用类名+范围解析操作符+静态属性/静态方法()</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;			<span class="comment">//私有，不允许外部直接访问</span></span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> Saler::<span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类直接访问</span></span><br><span class="line">Saler::showClass();</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>静态方法本质也是类中定义的方法，因此也可以使用对象进行访问，但是<strong>不建议</strong></li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;			<span class="comment">//私有，不允许外部直接访问</span></span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> Saler::<span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象访问静态方法</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s</span>-&gt;showClass();						<span class="comment">//输出0</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>同理，方法也是在类内部，在编译时就存在，因此可以通过类来进行访问，使用范围解析操作符，但是<strong>非常不建议</strong>（会报错：因为类只允许访问静态成员和类常量）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testStatic</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类访问普通成员方法</span></span><br><span class="line">Saler::testStatic();				<span class="comment">//输出testStatic，但是报错，当前访问的不是静态方法</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>静态方法本质是给类访问，所以不允许在静态方法内部使用$this对象</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">testStaticThis</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>);				<span class="comment">//致命错误：$this放到了不该放的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>为了保障类能直接访问数据和操作数据，可以在属性和方法前增加static关键字变成静态属性和静态方法</li>
<li>类通过类名+范围解析操作符+静态成员的方式进行访问</li>
<li>静态成员也收访问修饰限定符的限定，访问权限与普通属性和方法的限制一样</li>
<li>对象可以无条件访问静态方法，而类只能访问不带$this的普通方法（不建议）</li>
<li>静态成员是给类访问的，非静态成员是给对象访问的</li>
<li>静态成员的访问效率比非静态成员高，因此有种说法是能用静态的时候就不用非静态  </li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：类的内部的静态方法内可能会访问到其他静态成员或者类常量，这个时候必须每次使用类名，那如果类名修改的话岂不是很麻烦？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：静态成员或者类常量的访问是必须使用类名进行访问的，不过为了方便类名的更新，减少开发者维护成本，系统引入了一个类似$this代表对象的方案：self关键字</p>
</blockquote>
<h3 id="12-self关键字【掌握】"><a href="#12-self关键字【掌握】" class="headerlink" title="12. self关键字【掌握】"></a>12. self关键字【掌握】</h3><blockquote>
<p><strong>定义</strong>：self关键字是一种在类的内部（方法里面）使用，代替类名的写法。能够保障用户方便修改类名字。</p>
</blockquote>
<ol>
<li>self是用来代替类名的，与范围解析操作符<code>::</code>一起使用的</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;			<span class="comment">//私有，不允许外部直接访问</span></span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showClass</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> Saler::<span class="variable">$count</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="built_in">self</span>::<span class="variable">$count</span>;				<span class="comment">//代替类名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>self也可以在类的内部方便实例化对象：比如构造方法被私有化之后，就没有办法在类外部实例化对象，此时可以在类内部进行对象实例化</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">0</span>;			<span class="comment">//私有，不允许外部直接访问</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;	<span class="comment">//私有，不允许外部实例化（因为对象不能外部调用）</span></span><br><span class="line">	<span class="comment">//方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Saler();				<span class="comment">//使用类名实例化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">self</span>();				<span class="comment">//使用self关键字实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = Saler::getInstance();</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>self是一种在类内部用来代替类名的关键字</li>
<li>self可以用来在类内部访问静态成员（类常量也可以）</li>
<li>self也可以在类内部用来实例化对象（代替类名：new self()）</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：类不管是直接访问静态成员还是先实例化然后访问类成员，都有一个前提：类必须在内存中存在，那是不是意味着所有的类操作之前，都必须先确认类在内存中是否存在呢？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：类的任何操作都需要确认类在内存存在的，不过类文件通常是一个类单独形成一个文件的。所以在操作之前需要进行类的加载。</p>
</blockquote>
<h3 id="13-类的加载【重要】"><a href="#13-类的加载【重要】" class="headerlink" title="13.类的加载【重要】"></a>13.类的加载【重要】</h3><blockquote>
<p><strong>定义</strong>：所谓类的加载，本质是因为类的访问必须保证类在内存中已经存在，所以需要在用类之前将类所在的PHP文件加载到内存。</p>
</blockquote>
<ol>
<li>手动加载：即要访问某个类之前，使用文件包含将类所在的文件加载进来</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">类文件：Saler.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">应用文件：useSaler.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//使用Saler类需要先包含Saler类所在的文件</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&#x27;Saler.php&#x27;</span>;				<span class="comment">//通常使用include_once，因为类不允许重名</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>加载类文件是一种比较消耗资源的方式，所以有的时候不确定类是否在内存中存在，可以事先使用class_exists()函数来判定是否存在，存在就不用加载，不存在才加载</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//使用Saler类，但是不确定内存中是否存在</span></span><br><span class="line"><span class="keyword">if</span>(!class_exists(<span class="string">&#x27;Saler&#x27;</span>))&#123;</span><br><span class="line">	<span class="comment">//不存在：加载</span></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;Saler.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>自动加载：PHP没有那么智能的系统自动加载，所谓自动加载只是PHP提供了一种<code>加载机制</code>：即实现定义一个函数__autoload()，然后当系统需要使用类，而内存中又不存在的时候，系统就会自动调用__autoload()函数来加载类文件.</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自动加载机制：利用系统提供的__autoload()函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;			<span class="comment">//参数为类名：即当前需要访问的类的名字</span></span><br><span class="line">	<span class="comment">//需要人为定义去哪加载，怎么加载   </span></span><br><span class="line">    <span class="keyword">include_once</span> <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;		<span class="comment">//假定为当前目录下，类文件名字为：类名.php</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用类：内存目前并没有</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();							<span class="comment">//系统发现内存没有Saler，所以调用__autoload()去加载</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>一个系统里，可能类文件会放到不同的路径下，因此一个完整的自动加载函数，应该要进行文件判定以及加载功能</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义自动加载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__autoload</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//组织文件路径：假设当前路径下，有两个文件夹下都有类c和m</span></span><br><span class="line">    <span class="variable">$c_file</span> = <span class="string">&#x27;c/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;		<span class="comment">//如c/Saler.php</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$c_file</span>))&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$c_file</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//说明c文件夹没有对应的文件</span></span><br><span class="line">        <span class="variable">$m_file</span> = <span class="string">&#x27;m/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;	<span class="comment">//如m/Saler.php</span></span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="variable">$m_file</span>))&#123;</span><br><span class="line">            <span class="keyword">include_once</span> <span class="variable">$m_file</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：自动加载是指按照开发者规定的路径去寻找对应的文件，并实现包含。如果文件不存在，那么系统会在使用类的时候报错，因为这是开发者自己犯的错，系统不能规避。</p>
<ol start="5">
<li>随着PHP版本的提升，在7以后，不怎么建议直接使用__autoload()函数，而是采用一种注册机制，将用户自定义的函数，放到系统内部，使用spl_autoload_register(定义好的函数)。本质与__autoload()一样</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个函数，用来加载类文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_autoload</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;		<span class="comment">//也需要一个参数来接收要加载的类名字</span></span><br><span class="line">    <span class="comment">//功能与__autoload()一样</span></span><br><span class="line">    <span class="variable">$c_file</span> = <span class="string">&#x27;c/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;		<span class="comment">//如c/Saler.php</span></span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$c_file</span>))&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$c_file</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//说明c文件夹没有对应的文件</span></span><br><span class="line">        <span class="variable">$m_file</span> = <span class="string">&#x27;m/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;	<span class="comment">//如m/Saler.php</span></span><br><span class="line">        <span class="keyword">if</span>(file_exists(<span class="variable">$m_file</span>))&#123;</span><br><span class="line">            <span class="keyword">include_once</span> <span class="variable">$m_file</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时，上述函数永远不会自动运行，除非将函数注册到系统内部</span></span><br><span class="line">spl_autoload_register(<span class="string">&#x27;my_autoload&#x27;</span>);</span><br><span class="line">    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：该方式其实本质就是通过两步完成了__autoload()一步的操作，但是spl_autoload_register()函数可以注册多个自定义的加载函数，更方便管理。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c_autoload</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;		</span><br><span class="line">    <span class="variable">$c_file</span> = <span class="string">&#x27;c/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;		</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$c_file</span>))&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$c_file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m_autoload</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;		</span><br><span class="line">    <span class="variable">$m_file</span> = <span class="string">&#x27;m/&#x27;</span> . <span class="variable">$classname</span> . <span class="string">&#x27;.php&#x27;</span>;		</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$m_file</span>))&#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$m_file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全部注册</span></span><br><span class="line">spl_autoload_register(<span class="string">&#x27;c_autoload&#x27;</span>);	<span class="comment">//先尝试调用第一个自定义加载函数：找到了结束；找不到找第二个函数</span></span><br><span class="line">spl_autoload_register(<span class="string">&#x27;m_autoload&#x27;</span>);    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Autoload</span></span>&#123;</span><br><span class="line">    <span class="comment">//实现不同文件夹的自动加载</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadC</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$c_file</span> = <span class="string">&#x27;c/&#x27;</span>.<span class="variable">$classname</span>.<span class="string">&#x27;.class.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(file_exist(<span class="variable">$c_file</span>)) <span class="keyword">include_once</span> <span class="variable">$c_file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">loadM</span>(<span class="params"><span class="variable">$classname</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$m_file</span> = <span class="string">&#x27;m/&#x27;</span>.<span class="variable">$classname</span>.<span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(file_exist(<span class="variable">$m_file</span>)) <span class="keyword">include_once</span> <span class="variable">$m_file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动加载</span></span><br><span class="line">spl_auto_load_register(<span class="keyword">array</span>(<span class="string">&#x27;Autoload&#x27;</span>,<span class="string">&#x27;loadC&#x27;</span>));</span><br><span class="line">spl_auto_load_register(<span class="keyword">array</span>(<span class="string">&#x27;Autoload&#x27;</span>,<span class="string">&#x27;loadM&#x27;</span>));</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> Saler();</span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>类的使用必须先保证内存中该类存在</li>
<li>可以使用手动加载来确保类的使用安全：优点是明确，缺点是繁琐（类文件名字可以随意没有规范）</li>
<li>可以使用自动加载来让系统按照开发者设定的路径和方式去寻找类，并尝试加载到内存（尽量让类文件名字统一，保证类名和文件名有关联）</li>
<li>自动加载可以使用__autoload()函数来实现，也可以使用自定义函数+spl_autoload_register()注册共同实现（后者推荐）</li>
<li>基本上所有的框架都在使用自动加载机制</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：对象只能通过实例化产生，而且即使是将对象赋值给变量，得到的还是同一个对象。如果有的时候需要得到新的对象，除了实例化之外还有其他方法吗？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：对象理论上应该通过实例化来产生，这是对象产生的根本。但是有时候如果想在已有对象上去产生一个新的对象，可以通过<code>克隆</code>来实现。</p>
</blockquote>
<h3 id="14-对象克隆【了解】"><a href="#14-对象克隆【了解】" class="headerlink" title="14.对象克隆【了解】"></a>14.对象克隆【了解】</h3><blockquote>
<p><strong>定义</strong>：克隆对象clone，即通过已有的对象复制一个新的同样的对象，但是两者之间并非同一个对象。</p>
</blockquote>
<ol>
<li>对象克隆是通过clone关键字实现，即：clone 对象;</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s1</span>-&gt;count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆</span></span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">clone</span> <span class="variable">$s1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>克隆出来的对象与原来对象是两个内存地址，因此是两个不同的对象</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接上述代码</span></span><br><span class="line"><span class="variable">$s2</span>-&gt;count = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s1</span>-&gt;count;		<span class="comment">//1，没有变化</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>对象在实例化的时候会自动调用存在的构造方法__construct()，同样的，在类的内部，PHP允许定义一个__clone()的方法，在对象被克隆后，新克隆出来的对象会自动调用</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    <span class="comment">//克隆方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>);			<span class="comment">//编号为2，代表是克隆出来的对象</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s1</span>-&gt;count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆</span></span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">clone</span> <span class="variable">$s1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>如果不允许对象被克隆，可以将__clone()方法私有化（本质是不允许对象在外部被克隆）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saler</span></span>&#123;</span><br><span class="line">  	<span class="comment">//属性</span></span><br><span class="line">  	<span class="keyword">public</span> <span class="variable">$count</span>;				</span><br><span class="line">  	<span class="keyword">private</span> <span class="variable">$money</span>;</span><br><span class="line">    <span class="comment">//私有化克隆方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Saler();</span><br><span class="line"><span class="variable">$s1</span>-&gt;count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//克隆</span></span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">clone</span> <span class="variable">$s1</span>;			<span class="comment">//致命错误：不允许对象在外部访问一个私有方法</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>对象可以通过克隆来得到新的对象（以前只有实例化）</li>
<li>克隆出来的对象会自动调用类中对应的__clone()方法（如果有）</li>
<li>可以通过私有化克隆方法来实现禁止外部对象克隆</li>
</ol>
<hr>
<blockquote>
<p><strong>思考</strong>：现在掌握了很多面向对象相关的内容，但是什么时候封装类？怎么封装类？如何使用类成员？</p>
</blockquote>
<blockquote>
<p><strong>引入</strong>：其实类的封装并没有多么复杂，但是需要一个熟练的过程来确定哪些东西可以放到类里，该用什么样的形式等。我们通过封装一个数据库的操作类来综合练习一下。</p>
</blockquote>
<h3 id="15-封装数据库操作类【掌握】"><a href="#15-封装数据库操作类【掌握】" class="headerlink" title="15.封装数据库操作类【掌握】"></a>15.封装数据库操作类【掌握】</h3><blockquote>
<p><strong>定义</strong>：封装数据库操作类，即根据数据库的操作需求，来确认数据库操作类该有什么样的功能，以及这些功能该如何实现。</p>
</blockquote>
<ol>
<li>一个类通常就是一个文件，所以要先确定文件的名字：通常类文件命名规范有两种</li>
</ol>
<ul>
<li>文件名字与类名字一样，如Sql.php</li>
<li>为了区分普通PHP文件，增加中间类描述，如Sql.class.php</li>
<li>现在PHP几乎都是面向对象编程，所以通常采用第一种方式：因此当前命名数据类的文件为：Sql.php</li>
</ul>
<ol start="2">
<li>确定类文件名字后其实也就确定了类名字，因此可以创建一个Sql类</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//数据库操作类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span></span>&#123;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>类的创建分两种：一是特定使用，即类里面的所有内容只为某次使用；二是通用，即工具类，以后很多地方可以用。</li>
</ol>
<ul>
<li>特定使用，功能可以不用太灵活</li>
<li>通用工具，功能应该大众化，数据的变化会比较多</li>
</ul>
<p>数据库类以后凡是要操作数据库的地方都可以用得到，很多项目都会用到，所以应该是个通用工具类，因此要考虑其到处可用的特性，让其能够灵活</p>
<ol start="4">
<li>数据库的操作最基本的特性不会改变：即需要连接认证，而连接认证的信息是灵活的，所以可以通过设定属性来控制，这些信息也都是不同使用者不同的，应该可以改变，所以可以通过构造方法来实现数据传入</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">//数据库操作类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sql</span></span>&#123;</span><br><span class="line">	<span class="comment">//设置属性</span></span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$host</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$port</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$user</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$pass</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$dbname</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$charset</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造方法初始化数据：数据较多，应该使用数组来传递数据，关联数组，而且绝大部分的开发者本意是用来测试，所以基本都是本地，因此可以给默认数据</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	$info = array(</span></span><br><span class="line"><span class="comment">    		&#x27;host&#x27; =&gt; &#x27;localhost&#x27;,</span></span><br><span class="line"><span class="comment">    		&#x27;port&#x27; =&gt; &#x27;3306&#x27;,</span></span><br><span class="line"><span class="comment">    		&#x27;user&#x27; =&gt; &#x27;root&#x27;,</span></span><br><span class="line"><span class="comment">    		&#x27;pass&#x27; =&gt; &#x27;root&#x27;,</span></span><br><span class="line"><span class="comment">    		&#x27;dbname&#x27; =&gt; &#x27;test&#x27;,</span></span><br><span class="line"><span class="comment">    		&#x27;charset&#x27; =&gt; &#x27;utf8&#x27;</span></span><br><span class="line"><span class="comment">    	)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$info</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//初始化：确保用户传入了数据，否则使用默认值</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;host = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;host&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;host&#x27;</span>] : <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;port = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;port&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;port&#x27;</span>] : <span class="string">&#x27;3306&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;user&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;user&#x27;</span>] : <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pass = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;pass&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;pass&#x27;</span>] : <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;dbname = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;dbname&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;dbname&#x27;</span>] : <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;charset = <span class="keyword">isset</span>(<span class="variable">$info</span>[<span class="string">&#x27;charset&#x27;</span>]) ? <span class="variable">$info</span>[<span class="string">&#x27;charset&#x27;</span>] : <span class="string">&#x27;utf8&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：方法设定的原则是一个方法只实现一个简单的功能，不要多个功能堆积到一个方法中。</p>
<ol start="5">
<li>数据库属性会在实例化Sql对象的时候自动初始化</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//接上述代码（类外测试）</span></span><br><span class="line"><span class="variable">$s1</span> = <span class="keyword">new</span> Sql();			<span class="comment">//使用默认数据库信息</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;pass&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;my_database&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$s2</span> = <span class="keyword">new</span> Sql(<span class="variable">$db</span>);			<span class="comment">//使用外部数据库信息</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>数据库要操作的第一件事就是连接认证，所以需要一个连接认证的功能。这里可以使用mysqli面向对象的方法。但是需要建立一个方法来实现连接认证：连接是否成功？</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在上述类中增加一个方法：实现连接认证功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//利用属性可以跨方法访问：5个参数分别为：主机、用户名、密码、数据库、端口</span></span><br><span class="line">    <span class="comment">//利用错误抑制符抑制可能出现的错误：如找不到数据库之类</span></span><br><span class="line">	<span class="variable">$link</span> = @<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;host,<span class="keyword">$this</span>-&gt;user,<span class="keyword">$this</span>-&gt;pass,<span class="keyword">$this</span>-&gt;dbname,<span class="keyword">$this</span>-&gt;port);</span><br><span class="line">    <span class="comment">//判定连接是否成功</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$link</span>-&gt;connect_error)&#123;</span><br><span class="line">        <span class="comment">//mysqli对象有两个属性：connect_errno表示错误编号，connect_error表示错误信息：发生错误后终止脚本执行</span></span><br><span class="line">		<span class="keyword">die</span>( <span class="string">&#x27;Connect Error (&#x27;</span>  .  <span class="variable">$link</span> -&gt; connect_errno  .  <span class="string">&#x27;) &#x27;</span> .  <span class="variable">$link</span> -&gt; connect_error );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="7">
<li>用户调用Sql类的目的一定是为了操作数据库，那么用户在实例化之后就需要调用连接认证的方法。为了方便用户操作，可以帮助用户省去调用这一步骤：在构造方法中调用该方法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在上述构造方法中调用连接认证方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$info</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在属性初始化之后调用连接认证方法</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;sql_connnect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>至此，一旦实例化Sql类对象，就可以实现数据库的连接，但是此时还存在一个细节问题：字符集，为了保证数据库连接的正常操作，需要新增一个方法设定字符集</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中增加设定字符集的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_charset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;set names <span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;		<span class="comment">//组织SQL指令</span></span><br><span class="line">    <span class="comment">//此时需要调用mysqli连接数据库得到的对象：发现$link在sql_connect方法中是一个局部变量，不能跨方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>由于sql_connect方法中得到的连接对象mysqli的$link是一个局部变量，无法在其他方法里使用，因此需要将连接对象$link提升为整个类的内部可用：提升为属性</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中增加属性，保存对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$link</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改sql_connect方法，使用属性保存连接对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">$this</span>-&gt;link = @<span class="keyword">new</span> mysqli(<span class="keyword">$this</span>-&gt;host,<span class="keyword">$this</span>-&gt;user,<span class="keyword">$this</span>-&gt;pass,<span class="keyword">$this</span>-&gt;dbname,<span class="keyword">$this</span>-&gt;port);</span><br><span class="line">    <span class="comment">//判定连接是否成功</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$link</span>-&gt;connect_error)&#123;</span><br><span class="line">        <span class="comment">//注意：连接资源保存在$this-&gt;link中，所以访问mysqli对象成员时需要$this-&gt;link-&gt;属性/方法()</span></span><br><span class="line">		<span class="keyword">die</span>(<span class="string">&#x27;Connect Error (&#x27;</span>  .  <span class="keyword">$this</span>-&gt;link-&gt;connect_errno  .  <span class="string">&#x27;) &#x27;</span> .  <span class="keyword">$this</span>-&gt;link-&gt;connect_error);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>继续完成设定字符集的功能：使用属性保存的mysqli连接对象</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中完善设定字符集的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_charset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;set names <span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;		<span class="comment">//组织SQL指令</span></span><br><span class="line">    <span class="comment">//调用mysqli::query</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>设置字符集的SQL指令虽然简单，但是因为有数据来源于外部，所以存在出错的风险，因此需要进行SQL错误判定</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中完善设定字符集的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_charset</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;set names <span class="subst">&#123;$this-&gt;charset&#125;</span>&quot;</span>;		<span class="comment">//组织SQL指令</span></span><br><span class="line">   </span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="comment">//失败发挥false</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Charset Error(&#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;errno . <span class="string">&#x27;) &#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="12">
<li>同样的，字符集的设置也是为了操作数据库的前置条件，属于初始化的一部分。因此需要字符集设置的方法在构造方法中调用，方便用户操作</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类的构造方法中调用字符集设置方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$info</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在连接数据库方法调用之后调用设置字符集方法</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;sql_charset();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="13">
<li>至此：数据库的初始化操作已经完成，此时要考虑的事情是用户调用数据库类是为了干什么？为了执行SQL指令，也就是增删改查。在mysqli中所有的SQL执行都是通过mysqli::query()方法执行，但是我们可以根据需求封装两个函数：写方法和查方法（包含一条和多条查询）</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中增加一个写方法：SQL指令来自于调用处提供</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_exec</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当前不知道SQL指令是什么样的，只是负责执行，所以由外部提供</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="comment">//判断SQL有没有语法错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sql Error(&#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;errno . <span class="string">&#x27;) &#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回执行结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;		<span class="comment">//本质就是一个true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在Sql类中增加一个读方法：Sql指令来自于调用处提供，同时设定参数供用户选择一条或全部结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_query</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$all</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//$all代表是否获取多条记录，默认false只获取一条记录</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="comment">//判断SQL有没有语法错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sql Error(&#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;errno . <span class="string">&#x27;) &#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解析其中的结果：根据用户需求获取一条或者多条记录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$all</span>)&#123;</span><br><span class="line">        <span class="comment">//获取全部：mysqli_result::fetch_all(MYSQLI_ASSOC)表示返回关联数组（默认是索引）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>-&gt;fetch_all(MYSQLI_ASSOC);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//获取一条：mysqli_result::fetch_assoc()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>-&gt;fetch_assoc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="14">
<li>上述已经完成了数据库类要实现的基本功能：实现SQL指令的执行和结果返回，但是从功能细节的角度出发还需要进行完善：插入操作后要获取自增长id，更新和删除操作受影响的行数，查询操作中记录数量。这种使用可以通过设置方法来实现获取（自增长id），也可以通过增加属性来实现（属性简单）</li>
</ol>
<p>增加属性：受影响的行数，自增长id，查询记录数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中追加属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$affected_rows</span>;	<span class="comment">//受影响行数（上次操作）</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$num_rows</span>;		<span class="comment">//查询结果记录数（上次操作）</span></span><br></pre></td></tr></table></figure>
<p>在写操作sql_exec中，为受影响行数赋值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改sql_exec方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_exec</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="comment">//判断SQL有没有语法错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sql Error(&#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;errno . <span class="string">&#x27;) &#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功保存受影响的行数：数据在mysqli对象中</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;affected_rows = <span class="keyword">$this</span>-&gt;link-&gt;affected_rows;</span><br><span class="line">    <span class="comment">//返回执行结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;		<span class="comment">//本质就是一个true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在读操作中，为记录数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改sql_query方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_query</span>(<span class="params"><span class="variable">$sql</span>,<span class="variable">$all</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;link-&gt;query(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="comment">//判断SQL有没有语法错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Sql Error(&#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;errno . <span class="string">&#x27;) &#x27;</span> . <span class="keyword">$this</span>-&gt;link-&gt;error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取记录信息：数据在mysqli_result对象中</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;num_rows = <span class="variable">$res</span>-&gt;num_rows;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解析其中的结果：根据用户需求获取一条或者多条记录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$all</span>)&#123;</span><br><span class="line">        <span class="comment">//获取全部：mysqli_result::fetch_all(MYSQLI_ASSOC)表示返回关联数组（默认是索引）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>-&gt;fetch_all(MYSQLI_ASSOC);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//获取一条：mysqli_result::fetch_assoc()</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>-&gt;fetch_assoc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加一个方法专门获取上次插入数据的自增长ID（因为这个是人为区分，不方便放到sql_exec中）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在Sql类中增加一个方法获取上一次自增长操作id</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql_insert_id</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//insertid是在mysqli对象执行query方法时获得</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;link-&gt;insert_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="15">
<li>至此：数据库类的功能已经实现，接下来要考虑类的定义规范：类对成员的控制性</li>
</ol>
<ul>
<li>属性如果不需要给外部访问，私有</li>
<li>方法如果只是内部调用，私有</li>
</ul>
<ol start="16">
<li>利用数据库类实现数据库的写操作和读操作</li>
</ol>
<blockquote>
<p><strong>总结</strong></p>
</blockquote>
<ol>
<li>类的封装是以功能驱动为前提，相关操作存放到一个类中</li>
<li>一个类通常是一个独立的文件，文件名与类名相同（方便后期维护和自动加载）</li>
<li>类中如果有数据需要管理，设定属性（固定数据可以使用类常量）</li>
<li>类中如果有功能需要实现（数据加工），设定方法</li>
<li>一个功能通常使用一个方法实现，方法的颗粒度应该尽可能小（方便复用）</li>
<li>应该尽可能增加类对成员的控制：即能私有尽可能私有</li>
</ol>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>PHP基础</title>
    <url>/2021/01/23/PHP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="PHP语法初步"><a href="#PHP语法初步" class="headerlink" title="PHP语法初步"></a>PHP语法初步</h2><p>PHP是一种运行在服务器端的脚本语言，可以嵌入到HTML中。</p>
<h2 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h2><p>在PHP历史发展中，可以使用多种标记来区分PHP脚本。</p>
<p>ASP标记：&lt;% php代码 %&gt;</p>
<p>短标记：&lt;? php代码 ?&gt; ，以上两种基本启用，如果要使用需要在配置文件中开启</p>
<p>脚本标记：&lt;scritp language=”php”&gt;php代码&lt;/script&gt;</p>
<p>标准标记（常用）：&lt;?php php代码 ?&gt;</p>
<h2 id="PHP注释"><a href="#PHP注释" class="headerlink" title="PHP注释"></a>PHP注释</h2><p>习惯：所有的代码在写的过程中都必须进行注释，对于初学者而言注释就是个人学习和写代码的一个思路说明。</p>
<p>PHP中注释分为两种：行注释和块注释</p>
<p>行注释：一次注释一行</p>
<p>​        //：后面跟的所有内容都是注释</p>
<p>​        #：同上</p>
<p>块注释：一次注释一段</p>
<p>​        /* xxx */：中间直到*/出现之前，全部都是注释。</p>
<h2 id="语句分割符"><a href="#语句分割符" class="headerlink" title="语句分割符"></a>语句分割符</h2><p>语句分隔符：在PHP中，代码是以行为单位，系统需要通过判断行的结束，该结束通常是一个符号：分号“ ; ”（英文状态下的分号）</p>
<p>定义内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>特殊说明：</p>
<p>​    1、PHP中标记结束符?&gt;有自带语句结束符的效果，最后一行PHP代码可以没有语句结束符“ ; ”</p>
<p>​    2、PHP中其实很多代码的书写并不是嵌入到HTML中，而是单独存在，通常书写习惯中就不建议使用标记结束符?&gt;，PHP会自动从开始到最后全部认为是PHP代码</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量基本概念"><a href="#变量基本概念" class="headerlink" title="变量基本概念"></a>变量基本概念</h3><p>变量来源于数学，是计算机语言中能存储计算结果或能表示抽象概念，变量可以通过变量名风闻。指令式语言中，变量通常是可变的。</p>
<p>​    1、变量是用来存储数据的；</p>
<p>​    2、变量是存在名字的；</p>
<p>​    3、变量是通过名字来访问的：数据；</p>
<p>​    4、变量是可以改变的：数据。</p>
<h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p>​    1、定义：在系统中增加对应的变量名字（内存）</p>
<p>​    2、赋值：可以将数据赋值给变量名（可以在定义的同时完成）</p>
<p>​    3、可以通过变量名访问存储的数据</p>
<p>​    4、可以将变量从内存中删除：使用：unset(‘变量名’)</p>
<h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><p>​    1、PHP中的所有变量都必须使用“$”符号；    </p>
<p>​    2、名字由字母、数字和下划线“_”构成，但是不能以数字开头；</p>
<p>​    3、在PHP中本身还允许中文变量（不建议）</p>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p>预定义变量：提前定义的变量，系统定义的变量，存储许多需要用到的数据（预定义变量都是数组）</p>
<p>$_GRT:获取所有表单以get方法提交的数据</p>
<p>$_POST:POST提交的数据都会保存在此</p>
<p>$_REQUEST:GET和POST提交的都会保存</p>
<p>$_GLOBALS:PHP中所有全局变量</p>
<p>$_SERVER:服务器信息</p>
<p>$_SESSION:session会话数据</p>
<p>$_COOKIE:cookie 会话数据</p>
<p>$_NEV:环境信息</p>
<p>$_FILES:用户上传的文件信息</p>
<h3 id="可变变量"><a href="#可变变量" class="headerlink" title="可变变量"></a>可变变量</h3><p>可变变量：如果一个变量保存的值刚好是另外一个变量的名字，那么可以直接通过访问一个变量得到另一个变量的值：在变量前面再多加一个$符号</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$$a</span> --&gt; bb </span><br></pre></td></tr></table></figure>


<h3 id="变量传值"><a href="#变量传值" class="headerlink" title="变量传值"></a>变量传值</h3><p>变量传值：将一个变量赋值给另外一个变量</p>
<p>变量传值一共有两种方式：值传递，引用传递</p>
<p>值传递：将变量保存的值复制一份，然后将新的值给另外一个变量保存（两个变量没有关系）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">	<span class="variable">$b</span>= <span class="variable">$a</span>;		<span class="comment">//值传递</span></span><br><span class="line">	<span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>; <span class="comment">//1,2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>引用传递：将变量保存的值所在的地址，传递给另外一个变量：两个变量指向同一个内存空间（两个变量是同一个值）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">	<span class="variable">$b</span>= &amp;<span class="variable">$a</span>;		<span class="comment">//引用传递</span></span><br><span class="line">	<span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$a</span>,<span class="variable">$b</span>; <span class="comment">//2,2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>变量与变量一样，都是用来保存数据的。</p>
<h3 id="常量基本概念"><a href="#常量基本概念" class="headerlink" title="常量基本概念"></a>常量基本概念</h3><p>常量：const/constant ，是一种在程序运行中，不可改变的量（数据）</p>
<p>常量一旦定义，通常数据不可改变（用户级别）</p>
<h3 id="常量定义形式"><a href="#常量定义形式" class="headerlink" title="常量定义形式"></a>常量定义形式</h3><p>在PHP中常量有两种定义方式（5.3之后才有两种）</p>
<p>​    1、使用定义常量的函数：define(‘常量名’,常量值)；</p>
<p>​    2、5.3之后才有的：const 常量名 = 值；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>);	<span class="comment">//使用函数定义常量</span></span><br><span class="line"><span class="keyword">const</span> PII = <span class="number">3</span>;		<span class="comment">//使用const关键字定义</span></span><br></pre></td></tr></table></figure>
<p>常量名字的命名规则</p>
<p>​    1、常量不需要使用“$”符号，一旦使用系统会认为是变量；</p>
<p>​    2、常量的名字组成由字母、数字和下划线组成，不能以数字开头；</p>
<p>​    3、常量的名字通常以大写字母为主（与变量以示区别）；</p>
<p>​    4、常量名字的规则比变量要松散，可以使用一些特殊字符，该方法只能使用define定义；</p>
<p>注意细节：</p>
<p>​    1、define和const定义的常量是有区别：在于访问权限区别</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;-_-&#x27;</span>,smile);	<span class="comment">//正确</span></span><br><span class="line"><span class="keyword">const</span> -_- = <span class="string">&#x27;smile&#x27;</span>; 	<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>​    2、定义常量通常不区分大小写，但是可以区分，可以参照define函数的第三个；</p>
<h3 id="常量使用形式"><a href="#常量使用形式" class="headerlink" title="常量使用形式"></a>常量使用形式</h3><p>常量的使用与变量一样：不可改变值（在定义的时候必须赋值）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> PI;</span><br></pre></td></tr></table></figure>
<p>有的时候还需要另外一种形式来访问（针对的是特殊名字的常量），需要用到另外一个访问常量的函数：constant(‘常量名’)；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> -_-;	<span class="comment">//错误，特殊符号不能直接使用</span></span><br><span class="line">constant(<span class="string">&#x27;-_-&#x27;</span>);	<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>说明：常量和变量的使用</p>
<p>​    1、凡是数据会可能变化的，那么肯定是用变量</p>
<p>​    2、数据不一定会变的，可以使用常量或者变量（变量居多）</p>
<p>​    3、数据不允许被修改的，一定用常量</p>
<h3 id="系统常量"><a href="#系统常量" class="headerlink" title="系统常量"></a>系统常量</h3><p>系统常量：系统帮助用户定义的常量，用户可以直接使用</p>
<p>常用的几个系统常量：</p>
<p>​    1、PHP_WERSION：PHP版本号</p>
<p>​    2、PHP_INT_SIZE：整形大小（所占用的字节数）</p>
<p>​    3、PHP_INT_MAX：整形能表示的最大值（PHP中整形是允许出现负数的：带符号）</p>
<p>在PHP中还有一些特殊的常量，他们有双下划线开始+常量名+双下划线结束，这种常量称之为系统魔术常量：魔术常量的值通常会跟着环境变化，但是用户改变不了</p>
<p>​    1、__DIR__：当前被执行的脚本所在电脑的绝对路径</p>
<p>​    2、__FILE__：当前被执行的脚本所在电脑的绝对路径（带自己文件的名字）</p>
<p>​    3、__LINE__：当前所属的行数</p>
<p>​    4、__NAMESPACE__：当前所属的命名空间</p>
<p>​    5、__CLASS__：当前所属的类</p>
<p>​    6、__METHOD__：当前所属的方法</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型：data type，在PHP中指的是存储的数据本身的类型，而不是变量的类型。PHP是一种弱类型语言，变量本身没有数据类型。</p>
<h3 id="PHP的八种数据类型"><a href="#PHP的八种数据类型" class="headerlink" title="PHP的八种数据类型"></a>PHP的八种数据类型</h3><p>在PHP中将数据分为三大类八小类：</p>
<p>简单（基本）数据类型：4个小类</p>
<p>​    整形：int/integer，系统分配4个字节存储，表示整数类型（有前提）</p>
<p>​    浮点型：float/double，系统分配8个字节存储，表示小数或者整型存不下的整数</p>
<p>​    字符串型：string，系统根据实际长度分配，表示字符串（引号）</p>
<p>​    布尔类型：bool/boolean，表示布尔类型，只有两个值：true和false</p>
<p>复合数据类型：2个小类</p>
<p>​    对象类型：object，存放对象（面向对象）</p>
<p>​    数组类型：array，存储多个数据（一次性）</p>
<p>特殊数据类型：2个小类</p>
<p>​    资源类型：resource，存放资源数据（PHP外部数据，如数据库、文件）</p>
<p>​    空类型：NULL，只有一个值就是NULL（不能运算）</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类型转换：在很多的条件下，需要指定的数据类型，需要外部数据（当前PHP取得的数据），转换成目标数据类型</p>
<p>在PHP中有两种类型转换方式：</p>
<p>​    1、自动转换：系统根据需求自己判定，自己转换（用得比较多，效率偏低）    </p>
<p>​    2、强制（手动）转换：认为根据需要的目标类型转换</p>
<p>​        强制转换规则：在变量之前增加一个括号()，然后在里面写上对应类型：int/integer…其中NULL类型用到unset()</p>
<p>在转换过程中，用得比较多的就是转布尔类型（判断）和转数值类型（算数运算）</p>
<p>其他类型转布尔类型：true或者false，在PHP中比较少类型转换变成false</p>
<p>其他类型转数值的说明：</p>
<p>​    1、布尔true为1，false为0；</p>
<p>​    2、字符串转数值有自己的规则</p>
<p>​        2.1、以字母开头的字符串，永远为0；</p>
<p>​        2.2、以数字开头的字符串，取到碰到字符串为止（不会同时包含两个小数点 ）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abc1.1.1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"><span class="comment">//自动转换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> + <span class="variable">$b</span>;	<span class="comment">//算数+运算，系统先转换为数值类型（整形或浮点型），然后运算</span></span><br><span class="line"><span class="comment">//强制转换</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">float</span>)<span class="variable">$a</span>,(flaot)<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>


<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p>通过一组类型判断函数，来判断变量，最终返回这个变量所保存数据的数据类型（相同结果为true，不同为false）：是一组以is_开头后跟乐星名字的函数：is_XXX(变量名)</p>
<p>Bool类型不能用echo来查看，可以使用var_dump结构来查看</p>
<p>var_dump(变量1,变量2…)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(is_int(<span class="variable">$a</span>));	<span class="comment">//bool(false)</span></span><br><span class="line">var_dump(is_string(<span class="variable">$a</span>));	<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure>
<p>还有一组函数可以用来获取以及设定数据（变量）的类型</p>
<p>gettype(变量名)：获取类型，得到的是该类型对应的字符串</p>
<p>settype(变量名,类型)：设定数据类型：与强制转换不同</p>
<p>​    1、强制转换（类型）变量名，是对数据值复制的内容进行处理（不会处理实际存储的内容）</p>
<p>​    2、settype会直接改变数据本身</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abc1.1.1&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">float</span>)<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> gettype(<span class="variable">$a</span>);		<span class="comment">//string,强制转换不会改变数据类型</span></span><br><span class="line">var_dump(settype(<span class="variable">$a</span>,<span class="string">&#x27;int&#x27;</span>));	<span class="comment">//bool(true)，会改变数据本身</span></span><br><span class="line"><span class="keyword">echo</span> gettype(<span class="variable">$a</span>),<span class="variable">$a</span>;		<span class="comment">//int,a--&gt;1</span></span><br></pre></td></tr></table></figure>


<h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>整数类型：保存整数数值（范围限制），4个字节存储数据，最大就是32位：42亿多。但是在PHP中默认是有符号类型（区分正负数）</p>
<p>在PHP中提供了4种整型的定义方式：十进制定义，二进制定义，八进制定义，十六进制定义</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a1</span> = <span class="number">110</span>;		<span class="comment">//十进制</span></span><br><span class="line"><span class="variable">$a2</span> = <span class="number">0b110</span>;		<span class="comment">//二进制</span></span><br><span class="line"><span class="variable">$a3</span> = <span class="number">0110</span>;		<span class="comment">//八进制</span></span><br><span class="line"><span class="variable">$a4</span> = <span class="number">0x110</span>;		<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a1</span>,<span class="string">&#x27;~&#x27;</span>,<span class="variable">$a2</span>,<span class="string">&#x27;~&#x27;</span>,<span class="variable">$a3</span>,<span class="string">&#x27;~&#x27;</span>,<span class="variable">$a4</span>;		<span class="comment">//110~6~72~272，默认PHP输出数值都会自动转换成10进制输出</span></span><br></pre></td></tr></table></figure>
<p>十进制：逢10进1，能够出现的数字是0~9</p>
<p>二进制：逢2进1，能够出现的数字是0~1</p>
<p>十进制：逢8进1，能够出现的数字是0~7</p>
<p>十进制：逢16进1，能够出现的数字是0<del>9以及a</del>f，a表示10，f表示15</p>
<p>进制转换：手动转换</p>
<p>​    十进制转二进制：除2倒取余法：不管得到的结果如何，需要补足32位：前面补0</p>
<p>​    十进制转二进制：取出最大的2的N次方，直到结果为0：从二进制右侧开始，按照对应的指数次数位置补1，没有的补0</p>
<p>​    二进制转十进制：从右侧开始，将对应的第几位作为2的指数，然后将所有的结果相加</p>
<p>PHP中不需要用户这么复杂的去计算，提供了许多函数进行转换</p>
<p>decbin()：十进制转二进制</p>
<p>decoct()：十进制转八进制</p>
<p>dechex()：十进制转十六进制</p>
<p>bindec()：二进制转十进制</p>
<p>bin2hex()：二进制转十六进制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">var_dump(decbin(<span class="number">107</span>)); 	<span class="comment">//string(7) &quot;1101011&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><p>浮点型：小数类型以及超过整形所能存储范围的整数（不保证精度），精度范围大概在15个有效数字左右</p>
<p>浮点型定义有两种方式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f1</span> = <span class="number">1.23</span>;		</span><br><span class="line"><span class="variable">$f2</span> = <span class="number">1.23e10</span>;	<span class="comment">//科学计数法1.23乘10的10次方</span></span><br><span class="line"><span class="variable">$f3</span> = PHP_INT_MAX + <span class="number">1</span>;	<span class="comment">//整型超过自身存储的大小之后会用浮点型存储</span></span><br></pre></td></tr></table></figure>
<p>尽量不用浮点数做精确判断：浮点数保存的数据不够精确，而且在计算机中凡是小鼠基本上存的都不精确。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f4</span> = <span class="number">0.7</span>;</span><br><span class="line"><span class="variable">$f5</span> = <span class="number">2.1</span>;</span><br><span class="line"><span class="variable">$f6</span> = <span class="variable">$f5</span> / <span class="number">3</span>;</span><br><span class="line">var_dump(<span class="variable">$f4</span> == <span class="variable">$f5</span>);	<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure>


<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔类型：两个值true和false，通常用于判断比较。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b1</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$b2</span> = <span class="literal">false</span>;</span><br><span class="line">var_dump(<span class="variable">$b1</span>,<span class="variable">$b2</span>);	<span class="comment">//bool(true)bool(false)</span></span><br></pre></td></tr></table></figure>
<p>在进行某些数据判断的时候，需要特别注意类型转换</p>
<p>empty()：判断数据的值是否为“空”，不是NULL，如果为空返回true，不为空返回false</p>
<p>isset()：判断数据存储的变量本身是否存在，存在变量返回true，不存在返回false</p>
<h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><h4 id="字符串定义语法"><a href="#字符串定义语法" class="headerlink" title="字符串定义语法"></a>字符串定义语法</h4><p>​    1、单引号字符串：使用单引号包裹</p>
<p>​    2、双引号字符串：使用双引号包裹</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引号定义</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">var_dump(<span class="variable">$str1</span>,<span class="variable">$str2</span>);		<span class="comment">//string(5) &quot;hello&quot;,string(5) &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<p>引号方式：比较适合定义那些比较短（不超过一行）或者没有结构要求的字符串，如果有结构要求，或者内容超过一行，可以使用以下两种结构定义    </p>
<p>​    3、nowdoc字符串：没有单引好的单引号字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = &lt;&lt;&lt;<span class="string">&#x27;边界符&#x27;</span></span><br><span class="line">    字符串内容</span><br><span class="line">边界符;</span><br></pre></td></tr></table></figure>
<p>​    4、heredoc字符串：没有双引号的双引号字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = &lt;&lt;&lt;边界符</span><br><span class="line">    字符串内容</span><br><span class="line">边界符;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构化定义</span></span><br><span class="line"><span class="comment">//nowdoc结构</span></span><br><span class="line"><span class="variable">$str3</span> = &lt;&lt;&lt;<span class="string">&#x27;EOD&#x27;</span></span><br><span class="line">	hello</span><br><span class="line">EOD;</span><br><span class="line"><span class="comment">//heredoc结构</span></span><br><span class="line"><span class="variable">$str4</span> = &lt;&lt;&lt;EOD</span><br><span class="line">	hello</span><br><span class="line">EOD;</span><br><span class="line">var_dump(<span class="variable">$str3</span>,<span class="variable">$str4</span>);		<span class="comment">//string(5) &quot;hello&quot;，string(5) &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>
<p>nowdoc和heredoc比引号还是要区别多一点，它会保留代码的结构</p>
<p>结构化定义字符串变量的规则：</p>
<p>​    1、结构化定义字符串对应的边界符有条件：</p>
<p>​        1.1、上边界符后面不能跟任何内容（包括注释）</p>
<p>​        1.2、下边界符必须顶格</p>
<p>​        1.3、下边界符同样后面只能跟分号，不能跟任何内容；</p>
<p>​    2、结构化定义字符串的内部（边界符之间）的所有内容都是字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = &lt;&lt;&lt;EOD</span><br><span class="line">	<span class="comment">//这是弹出内容</span></span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		alert(<span class="string">&#x27;$str1&#x27;</span>);		<span class="comment">//js弹出字符串必须要有引号</span></span><br><span class="line">	&lt;/script&gt;</span><br><span class="line">EOD;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str2</span>;</span><br></pre></td></tr></table></figure>
<p>以上的注释都被被当作字符串来输出</p>
<h4 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a>字符串转义</h4><p>转义：在计算机通用协议中，有以下特定的方式定义的字母，系统会特定处理：通常这种方式都是使用反斜杠+字母（单词）的特性：</p>
<p>\r\n：回车换行</p>
<p>PHP在识别转义字符的时候也是使用同样的模式：反斜杠+字母</p>
<p>在PHP中系统常用的转义符号：</p>
<p>\‘：在单引号字符串中显示单引号</p>
<p>\“：在双引号字符串中显示双引号</p>
<p>\r：代表回车（理论上是回到当前行的首位置）</p>
<p>\n：代表新一行</p>
<p>\t：类似tab键，输出4个空格</p>
<p>\$：在PHP中使用$符号作为变量符号，因此需要特定识别</p>
<p>单引号和双引号的区别：</p>
<p>​    1、其中单引号中能够识别\‘，而双引号中就不能识别\‘</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义字符串识别转义符号</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;abc\r\ndef\t\&#x27;\&quot;\$fg&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;abc\r\ndef\t\&#x27;\&quot;\$fg&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str1</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="variable">$str2</span>;		<span class="comment">//abc\r\ndef\t&#x27;\&quot;\$fg</span></span><br><span class="line">								<span class="comment">//abc def \&#x27;&quot;$fg</span></span><br></pre></td></tr></table></figure>
<p>​    2、双引号总因为能够识别$符号，索引双引号中可以解析变量，而单引号不能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//变量识别</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;abc $a def&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;abc <span class="subst">$a</span> def&quot;</span>;</span><br><span class="line"><span class="variable">$str3</span> = <span class="string">&#x27;abc$adef&#x27;</span>;</span><br><span class="line"><span class="variable">$str4</span> = <span class="string">&quot;abc<span class="subst">&#123;$a&#125;</span>def&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str1</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="variable">$str2</span>;		<span class="comment">//abc $a def</span></span><br><span class="line">								<span class="comment">//abc hello def</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str3</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="variable">$str4</span>;		<span class="comment">//abc$adef</span></span><br><span class="line">								<span class="comment">//abchellodef</span></span><br></pre></td></tr></table></figure>
<p>​        双引号中变量识别的规则</p>
<p>​            1、变量本身系统能够与后面的内容区分：应该保证变量的独立性，不要让系统难以区分</p>
<p>​            2、使用变量专业标识符（区分），给变量加上一组大括号{}</p>
<h4 id="字符串长度问题"><a href="#字符串长度问题" class="headerlink" title="字符串长度问题"></a>字符串长度问题</h4><p>​    1、基本函数strlen()：得到字符串的长度（字节为单位）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义字符串</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;abcdefj&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&#x27;你好中国123&#x27;</span>;			<span class="comment">//中文在utf-8字符集中占3个字节</span></span><br><span class="line"><span class="keyword">echo</span> strlen(<span class="variable">$str1</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,strlen(<span class="variable">$str2</span>);		<span class="comment">//7,15</span></span><br></pre></td></tr></table></figure>
<p>​    2、多字节字符串的长度问题：包括中文的长度</p>
<p>​    3、多自己字符串扩展模块：mbstring扩展（mb：Multi Bytes）</p>
<p>​        首先要加载PHP的mbstring扩展（在配置文件中）</p>
<p>​        可以使用mb扩展带来的很多函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义字符串</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27;abcdefj&#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&#x27;你好中国123&#x27;</span>;			<span class="comment">//中文在utf-8字符集中占3个字节</span></span><br><span class="line"><span class="keyword">echo</span> mb_strlen(<span class="variable">$str1</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,mb_strlen(<span class="variable">$str2</span>);		<span class="comment">//7,7</span></span><br></pre></td></tr></table></figure>
<p>​        mbstring扩展针对的是一些关于字符统计：strlen只是针对标准交换码ASCⅡ，mbstring会针对不同字符集</p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>运算符：operator，是一种将数据进行运算的特殊符号，在PHP中一共有十种运算符</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值运算：符号是“=”，表示将右边的结果（可以是变量、数据、常量和其他运算出来的结果），保存到内粗你的某个位置，然后将位置的内存地址赋值给左侧的变量（常量）。</p>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p>算术运算：基本算术操作</p>
<p>+：执行数据累加</p>
<p>-：数据相减</p>
<p>*：两个数相乘</p>
<p>/：两个数相除</p>
<p>%：取余（模）运算，两个数（整型数）相除，保留余数</p>
<p>注意：在进行出发运算或者取余运算的时候，对应的被除数（第二个数）不能为0</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$b</span> = <span class="number">10</span>;		<span class="comment">//连贯赋值运算：两个不同变量</span></span><br><span class="line"><span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line">var_dump(<span class="variable">$a</span> / <span class="number">0</span>);		<span class="comment">//错误，被除数不能为0，取余同理</span></span><br></pre></td></tr></table></figure>


<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算：比较两个数据的大小，或者两个内容是否相同，返回的结果都是布尔类型：满足返回true，不满足返回false</p>
<p>&gt;：左边大于右边，返回true</p>
<p>&gt;=：左边大于等于右边，返回true</p>
<p>&lt;：右边大于左边，返回true</p>
<p>&lt;=：右边大于等于左边，返回true</p>
<p>==：左边等于右边，返回true（大小相同）</p>
<p>!=：左边不等于右边，返回true（大小不同）</p>
<p>===：全等于，左边等于右边，返回true（大小以及数据的类型都要相同）</p>
<p>!===：不全等于，左边不等于右边，返回true（只要大小或者数据类型不同）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123&#x27;</span>;		<span class="comment">//字符串</span></span><br><span class="line"><span class="variable">$b</span> = <span class="number">123</span>;		<span class="comment">//整型</span></span><br><span class="line">var_dump(<span class="variable">$a</span> == <span class="variable">$b</span>);		<span class="comment">//bool(true)</span></span><br><span class="line">var_dump(<span class="variable">$a</span> === <span class="variable">$b</span>);	<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure>


<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算：针对不同的结果进行匹配。满足条件返回true，不满足返回false</p>
<p>&amp;&amp;：逻辑与，左边的条件与右边的条件同时成立（两边结果都为true）。</p>
<p>||：逻辑或，左边的条件与右边的条件只要有一个满足即可。</p>
<p>!：逻辑非，对已有条件进行取反，本身为true，取反结果为false</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;weekend&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$a</span> == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; <span class="variable">$b</span> == <span class="string">&#x27;good&#x27;</span>);		<span class="comment">//bool(true)</span></span><br><span class="line">var_dump(<span class="variable">$a</span> == <span class="string">&#x27;weekend&#x27;</span> &amp;&amp; <span class="variable">$b</span> == <span class="string">&#x27;bad&#x27;</span>);		<span class="comment">//bool(false)</span></span><br><span class="line">var_dump(<span class="variable">$a</span> == <span class="string">&#x27;weekend&#x27;</span> || <span class="variable">$b</span> == <span class="string">&#x27;bad&#x27;</span>);		<span class="comment">//bool(true)</span></span><br><span class="line">var_dump(<span class="variable">$b</span> == <span class="string">&#x27;bad&#x27;</span>);		<span class="comment">//bool(false)</span></span><br><span class="line">var_dump(!(<span class="variable">$b</span> == <span class="string">&#x27;bad&#x27;</span>));		<span class="comment">//bool(true)</span></span><br></pre></td></tr></table></figure>
<p>逻辑与与逻辑或又称之为短路运算：如果第一个表达式结果已经满足条件了，那么就不会运行逻辑运算符后面的表达式：在书写代码的时候，尽量将出现概率最高的（能够直接判断出结果）的表达式放到第一位。</p>
<h3 id="连接运算符"><a href="#连接运算符" class="headerlink" title="连接运算符"></a>连接运算符</h3><p>链接运算：是PHP中将多个字符串拼接的一种符号</p>
<p>.：将两个字符串连接到一起</p>
<p>.=：复合运算，将左边的内容与右边的内容连接欸起来，然后重新赋值给左边变量（A .= B  ==== A = A . B）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="variable">$b</span>;		<span class="comment">//hello123，将a变量和b变量连接起来</span></span><br><span class="line"><span class="variable">$a</span> .= <span class="variable">$b</span>;		<span class="comment">//$a = $a . $b</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;		<span class="comment">//hello123</span></span><br></pre></td></tr></table></figure>


<h3 id="错误抑制符"><a href="#错误抑制符" class="headerlink" title="错误抑制符"></a>错误抑制符</h3><p>在PHP中有一些错误可以提前预知，但是这些错误可能无法避免，但是又不希望报错为用户看，可以使用错误抑制符处理。</p>
<p>@：在可能出错的表达式前面使用“@”符号即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$a</span> / <span class="variable">$b</span>；		<span class="comment">//报错</span></span><br><span class="line">@(<span class="variable">$a</span> / <span class="variable">$b</span>);		<span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure>
<p>错误抑制符通常在生产环境（上线）会用到，在开发的时候不会用：系统本身最好没有任何错误。</p>
<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>三目运算：有三个表达式参与的运算（简单的分支结构缩写）</p>
<p>语法格式：</p>
<p>表达式1 ? 表达式2 :表达式3；</p>
<p>运算：如果表达式1成立，那么执行表达式2，否则执行表达式3；</p>
<p>注意：如果表达式本身比较复杂，建议使用括号括起来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span> &gt; <span class="number">10</span> ? <span class="number">100</span> : <span class="number">0</span>;		<span class="comment">//b--&gt;0</span></span><br></pre></td></tr></table></figure>
<p>三目运算可以进行复合三目运算：三目运算中的表达式2和3都是可以是另外一个三目运算。</p>
<p>表达式1 ? (表达式2 ? 表达式4 ：表达式5) ：(表达式3 ? 表达式6 : 表达式7);</p>
<h3 id="自操作运算符"><a href="#自操作运算符" class="headerlink" title="自操作运算符"></a>自操作运算符</h3><p>自操作：自己操作自己的运算符</p>
<p>++：在原来的值上+1</p>
<p>–：在原来的值上-1</p>
<p>在PHP中自操作运算符是可以放到变量前或者后：前置自操作和后置自操作</p>
<p>前置或者后置如果本身只有自操作，不参与其他运算（自操作同时），那么效果是一样的。但是自操作同时还参与别的运算，那么效果就不一样。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$a</span>++;		<span class="comment">//a--&gt;2，c--&gt;1 </span></span><br><span class="line"><span class="variable">$d</span> = ++<span class="variable">$b</span>;		<span class="comment">//b--&gt;2，d--&gt;2</span></span><br></pre></td></tr></table></figure>
<p>后置自操作：先把自己所保存的值留下来，然后改变自己，自己给别人的值是原来的值；</p>
<p>前置自操作：先把自己改变，然后把改变后的值给别人；</p>
<p>衍生符号：类似自操作</p>
<p>+=：左边的结果与右边的结果相加，然后赋值给左边</p>
<p>-=：左边的结果与右边的结果相减，然后赋值给左边</p>
<p>*=：左边的结果与右边的结果相乘，然后赋值给左边</p>
<p>/=：左边的结果除以右边的结果，然后赋值给左边</p>
<p>%=：左边的结果对右边的结果取模，然后赋值给左边</p>
<p>注意：右边是一个整体 $a -= $b - 1;  ==== $a = $a - ($b - 1);</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable">$a</span> -= <span class="variable">$b</span> - <span class="number">1</span>;		<span class="comment">//a--&gt;11</span></span><br></pre></td></tr></table></figure>
<p>如果进行除法或者取余运算，那么要考虑右边表达式的结果是否为0（为0出错）</p>
<h3 id="计算机码"><a href="#计算机码" class="headerlink" title="计算机码"></a>计算机码</h3><p>计算机码：计算机在实际存储数据的时候，采用的编码规则（二进制规则）</p>
<p>计算机码：原码、反码和补码，数值本身最左边一位是用来充当符号位：正数为0，负数为1</p>
<p>原码：数据本身从十进制转换为二进制得到的结果</p>
<p>​        正数：左边符号位为0（整数的原码、反码和补码就是原码本身）</p>
<p>​        负数：左边符号位为1</p>
<p>反码：针对负数，符号位不变，其他位取反</p>
<p>补码：针对负数，反码+1</p>
<p>系统中存在两个0：+0和-0</p>
<p>+0：00000000</p>
<p>-0：10000000    原码</p>
<p>取反 11111111</p>
<p>补码 00000000</p>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>位运算：取出计算机中最小的单位（位bit）进行运算</p>
<p>&amp;：按位与，两个位都为1，结果为1，否则为0</p>
<p>|：按位或，两个位有一个为1，结果为1，否则为0</p>
<p>~：按位非，一个位如果为1则变成0，否则反之</p>
<p>^：按位异或，两个位相同则为0，不同则为1</p>
<p>&lt;&lt;：按位左移，整个位（32位），向左移动一位，右边补0（乘以2的操作）</p>
<p>&gt;&gt;：按位右移，整个位向右移动一位，左边补符号位对应内容（整数补0，负数补1）（除以2的操作，不完全正确，整数除2出出现小数）</p>
<p>注意：</p>
<p>​    1、系统进行任何位运算的时候都是使用的补码</p>
<p>​    2、运算结束之后都必须转换成原码才是最终要显示的数据</p>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p>运算符优先级：在多种运算符同时存在的时候，如何结合运算</p>
<p><img src="https://raw.githubusercontent.com/JOHN-FROD/PicGo/main/blog-img/image-20210120164418503.png" alt="image-20210120164418503"></p>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>流程控制：代码执行的方向</p>
<h3 id="控制分类"><a href="#控制分类" class="headerlink" title="控制分类"></a>控制分类</h3><p>顺序结构：代码从上往下，顺序执行。（代码执行的最基本结构）</p>
<p>分支结构：给定一个条件，同时又多种可执行代码（块），然后会根据条件执行某一段代码</p>
<p>循环结构：在某个条件控制范围内，指代的代码（块）可重复执行</p>
<h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>顺序结构：最基本结构，所有代码默认都是从上往下依次执行</p>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>在PHP中，分支结构主要又两种：if分支和switch分支</p>
<h4 id="if分支"><a href="#if分支" class="headerlink" title="if分支"></a>if分支</h4><p>if：如果的意思，给定一个条件，同时为该条件设置多种（两种）情况，然后通过条件判断来实现具体的执行段</p>
<p>基本语法：if分支PHP也提供多种方式来实现</p>
<p>最简if：只有一段代码，但是可以选择是否执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">	<span class="comment">//满足条件所要执行的内容;//顺序结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基础if：有两面性，满足条件或者不满足调剂都有对应的执行代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">	<span class="comment">//满足条件后执行的代码段;</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//不满足条件执行的代码段;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂if结构：在判断条件之后，通常就有两种结果：满足或者不满足，在不满足之后还可以再次进行条件判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">	<span class="comment">//满足条件表达式1的代码段;</span></span><br><span class="line">&#125;<span class="keyword">elseif</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">	<span class="comment">//不满足表达式1条件，但是满足表达式2的代码;</span></span><br><span class="line">&#125;...	<span class="comment">//可以使用多个elseif来进行再次条件筛选</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="comment">//全部不满足要执行的代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果条件特别多才会采用复合if形式</p>
<p>​    1、如果条件比较单一（同一个条件），会采用elseif方式</p>
<p>​    2、如果判断条件不一致，建议使用嵌套语法（不宜采用太多层嵌套：影响代码美观）</p>
<p>if分支，适用于所有的条件判断（分支结构）</p>
<h4 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h4><p>switch分支：有一组情形存在，通过一条件，通常由多个值，但是每一个值都会有对应不同的代码要执行。</p>
<p>switch判断方式：是将条件放到分支结构内部判断</p>
<p>switch基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;</span><br><span class="line">        <span class="comment">//所有条件判断：逐个进行</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:	<span class="comment">//当前条件表达式的结果与值1相等（==）</span></span><br><span class="line">        <span class="comment">//要执行的代码段;</span></span><br><span class="line">        <span class="keyword">break</span>;	<span class="comment">//在switch中，如果条件匹配成功，那么系统就不会再次匹配条件，会自动顺序执行向下的所有代码（case代码除外），break表示中断switch（结束）</span></span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        <span class="comment">//要执行的代码段;</span></span><br><span class="line">    ...</span><br><span class="line">	<span class="comment">//可以使用类似else的语法：都不匹配</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">//匹配失败的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if和switch的选择：</p>
<p>​    1、if能做所有的分支结构事情</p>
<p>​    2、switch处理的是条件比较多，同时比较单一，而且是固定匹配的分支结构</p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构：代码段在一定的控制下，可以多次执行</p>
<p>在PHP中循环结构有以下几种：</p>
<p>for循环：通过条件、起始和终止判断执行</p>
<p>while循环通过判断条件终止</p>
<p>do-while循环：跟while差不多</p>
<p>foreach循环：专门针对数组</p>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环基本语法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(条件表达式<span class="number">1</span>;条件表达式<span class="number">2</span>;条件表达式<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//条件表达式1：定义初始化条件，可以有多种赋值语句存在，使用都好分隔即可</span></span><br><span class="line">    <span class="comment">//条件表达式2：边界判定，限定循环执行的次数</span></span><br><span class="line">    <span class="comment">//条件表达式3：用来执行条件变化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从1到10输出：初始为1，结果为10</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt;= <span class="number">10</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$i</span>;		<span class="comment">//11,最后i为11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从1到10输出（10通常是动态得到）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>,<span class="variable">$end</span> = <span class="number">10</span>;<span class="variable">$i</span> &lt;= <span class="variable">$end</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for循环执行原理：</p>
<p>​    1、执行条件表达式1：定义初始化条件（执行一次）</p>
<p>​    2、执行条件表达式2：判断条件（N次）</p>
<p>​        2.1满足条件：执行循环体</p>
<p>​        2.2不满足条件：循环结束</p>
<p>​    3、执行循环体：（N次）</p>
<p>​    4、执行条件表达式3：循环变量变化（N次）</p>
<p>​    5、执行条件表达式2：判断条件（N次）</p>
<p>​    6、重复执行3-4-2步骤：直到第2部不满足条件结束循环</p>
<p>for循环中条件表达式1的多变量定义</p>
<p>for循环特殊使用：for循环中对应的括号（条件）可以一个都没有（死循环）；一定要避免出现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>while循环基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">条件初始化;</span><br><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">    <span class="comment">//条件表达式就是判断边界条件</span></span><br><span class="line">    循环体；		<span class="comment">//循环条件的变化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义条件</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义判定执行</span></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="comment">//循环条件变更</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for与while的选择</p>
<p>​    1、如果是基于固定已知条件（数值而且是有规律的变化），使用for循环</p>
<p>​    2、while可以做灵活的调减判定（while使用得比较多）</p>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><p>do-while：看着很想while，while首先进行条件判定然后执行循环体，有可能出现第一次就条件不满足，那么就会直接失败（循环体一次都不执行）。do-while就是先干了再说（执行循环体），然后判断条件。（至少会执行一次循环体）</p>
<p>do-while基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出1-10之间得偶数（条件判定加入）</span></span><br><span class="line"><span class="comment">//定义基础条件</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//循环判定</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//执行输出</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span> % <span class="number">2</span> != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//是偶数</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$i</span>++,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//条件变更</span></span><br><span class="line">    <span class="variable">$i</span>++;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="variable">$i</span> &lt;= <span class="number">10</span>);</span><br></pre></td></tr></table></figure>


<h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>循环控制：在循环内部对循环本身进行控制</p>
<p>中断控制：重新开始循环，循环体中还有其他内容，也再执行</p>
<p>​    continue层级；    //默认是1（循环可以多层嵌套）</p>
<p>终止控制：循环直接结束</p>
<p>​    break层级；    默认是1</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：输出1-100之间5的倍数</span></span><br><span class="line"><span class="variable">$i</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span> &lt;= <span class="number">100</span>)&#123;</span><br><span class="line">    <span class="comment">//判断：是否是5的倍数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$i</span> % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//说明当前$i不是5的倍数</span></span><br><span class="line">        <span class="comment">//重新循环</span></span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">        <span class="keyword">continue</span>;	<span class="comment">//系统重新跳到开始循环处</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出数值</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$i</span>++,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为循环经常性会碰到嵌套（循环中间包含循环），如果再循环内部有些条件下，明确可以知道当前循环（或者说外部循环）不需要继续执行了，那么就是可以使用循环控制类实现：其中内部循环也可以控制到外部，就是通过使用层级参数。</p>
<p>​    continue 2;    //当前自己循环后面内部不再执行，同时外部循环如果还有循环体也不再执行，重新来过；</p>
<p>​    break 2;        //当前自己循环结束，同时外部也结束（如果还有外部不受影响，继续执行）</p>
<h3 id="流程控制替代语法"><a href="#流程控制替代语法" class="headerlink" title="流程控制替代语法"></a>流程控制替代语法</h3><p>流程控制替代语法：分支和循环结构的替代语法。</p>
<p>PHP本事是嵌入到HTML中的脚本语言，需要再HTML中书写一些关于判断或者循环的结构语法，必须符合PHP标签规范，需要HTML与PHP进行混搭，如果使用原始的PHP代码那么会非常不美观。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：打印一个九九乘法表，使用表格来展示</span></span><br><span class="line">&lt;table border=<span class="number">1</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt;= <span class="number">9</span>;<span class="variable">$i</span>++)&#123;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    	<span class="meta">&lt;?php</span> <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">1</span>;<span class="variable">$j</span> &lt;= <span class="variable">$i</span>;<span class="variable">$j</span>++)&#123;<span class="meta">?&gt;</span></span><br><span class="line">        &lt;td&gt;</span><br><span class="line">        	<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&#x27;*&#x27;</span> . <span class="variable">$j</span> . <span class="string">&#x27;=&#x27;</span> . <span class="variable">$i</span>*<span class="variable">$j</span>;<span class="meta">?&gt;</span></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> &#125;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;/tr&gt;		</span><br><span class="line">    <span class="meta">&lt;?php</span> &#125;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>再PHP书写到HTML中的这些大括号{}非常不美观，所以PHP提供了一种替代即使，让其可以不用书写大括号：</p>
<p>​    for(;;){ ==&gt;fot(;;):</p>
<p>​    }        ==&gt;endfor;</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：打印一个九九乘法表，使用表格来展示</span></span><br><span class="line">&lt;table border=<span class="number">1</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt;= <span class="number">9</span>;<span class="variable">$i</span>++):<span class="meta">?&gt;</span></span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    	<span class="meta">&lt;?php</span> <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">1</span>;<span class="variable">$j</span> &lt;= <span class="variable">$i</span>;<span class="variable">$j</span>++):<span class="meta">?&gt;</span></span><br><span class="line">        &lt;td&gt;</span><br><span class="line">        	<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&#x27;*&#x27;</span> . <span class="variable">$j</span> . <span class="string">&#x27;=&#x27;</span> . <span class="variable">$i</span>*<span class="variable">$j</span>;<span class="meta">?&gt;</span></span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">        <span class="meta">&lt;?php</span> <span class="keyword">endfor</span>;<span class="meta">?&gt;</span></span><br><span class="line">    &lt;/tr&gt;		</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">endfor</span>;<span class="meta">?&gt;</span></span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>
<p>PHP中具体有那些替代语法呢？PHP应该再HTML中只做数据输出，输出通常伴有条件判断和循环操作，因此PHP提供了对应分支结构和循环结构的代替语法：全部都是对应的一个模式：</p>
<p>​    左大括号{使用冒号替代:</p>
<p>​    又大括号}使用end+对应的起始标记替代</p>
<p>if：if():        endif;</p>
<p>switch：switch():        endswitch;</p>
<p>for：for(;;):        endfor;</p>
<p>while：while():        endwhile;</p>
<p>foreach：foreach():        endforeach;</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>文件包含：在一个PHP脚本中，去将另外一个文件（PHP）包含进来，去合作完成一件事情。</p>
<h3 id="文件包含的作用"><a href="#文件包含的作用" class="headerlink" title="文件包含的作用"></a>文件包含的作用</h3><p>文件包含的意义：</p>
<p>​    1、要么使用被包含文件中的内容，实现代码的共享（重用）：向上包含（索要）</p>
<p>​    向上包含：在当前脚本要用某个代码之前包含别的文件</p>
<p>​    2、要么自己有东西可以给别的文件使用，实现代码的共享（重用）：向下包含（给与）</p>
<p>​    向下包含：在自己又某个东西的时候，需要别的脚本来显示（自己代码写完之后包含其他文件）</p>
<p>最大的作用：分工写作，每个脚本做的事情不一样，因此可以使用写作方式，让多个脚本共同完成意见事情。</p>
<h3 id="文件包含四种形式"><a href="#文件包含四种形式" class="headerlink" title="文件包含四种形式"></a>文件包含四种形式</h3><p>在PHP中文件的包含有四种形式（两种大形式）</p>
<p>include：包含文件</p>
<p>include_once：系统会自动判断文件包含过程中，是否已经包含过（一个文件最多被包含一次）</p>
<p>require：与include相同</p>
<p>require_once：与include_once相同</p>
<p>包含基本语法：</p>
<p>include ‘文件名字’;</p>
<p>include(‘文件名字’);        //文件名字：路径问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include1.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//被包含文件</span></span><br><span class="line">    <span class="comment">//定义数据</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">	define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>);</span><br><span class="line">	<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include2.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//包含文件：使用数据</span></span><br><span class="line">    <span class="comment">//包含文件</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;include1.php&#x27;</span>;		<span class="comment">//包含当前文件include2.php所在文件夹下的include1.php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>,PI;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上方式：是先包含文件，后使用文件中的内容（向上包含）</p>
<p>向下包含：先准备内容，然后包含另外的文件，在另外的文件中，使用当前的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include3.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//定义数据</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">	define(<span class="string">&#x27;PI&#x27;</span>,<span class="number">3.14</span>);</span><br><span class="line">	<span class="comment">//包含文件：为了显示以上数据</span></span><br><span class="line">	<span class="keyword">include_once</span> <span class="string">&#x27;include4.php&#x27;</span>;</span><br><span class="line">	<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//include4.php</span></span><br><span class="line">&lt;table&gt;</span><br><span class="line">	&lt;tr&gt;</span><br><span class="line">        &lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$a</span>;<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> PI;<span class="meta">?&gt;</span>&lt;/td&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>


<h3 id="文件加载原理"><a href="#文件加载原理" class="headerlink" title="文件加载原理"></a>文件加载原理</h3><p>PHP代码的执行流程</p>
<p>​    1、读取代码文件（PHP文件）</p>
<p>​    2、编译：将PHP代码转换成字节码（生成opcode）</p>
<p>​    3、zendengine来计息opcode，按照字节码去进行逻辑运算</p>
<p>​    4、转换成对应的HTML代码</p>
<p>文件加载原理：</p>
<p>​    1、在文件加载（include或者require）的时候，系统会自动的将将被包含文件中的代码相当于嵌入到当前文件中</p>
<p>​    2、加载位置：在哪加载，对应的文件中的代码嵌入的位置就是对应的include位置</p>
<p>​    3、在PHP中被包含的文件是单独进行编译的</p>
<p>PHP文件在编译的过程中如果出现了语法错误，那么会失败（不会执行）；但是如果被包含文件有错误的时候，系统会在执行到包含include这条语句的时候才会报错。</p>
<h3 id="inclde和require区别"><a href="#inclde和require区别" class="headerlink" title="inclde和require区别"></a>inclde和require区别</h3><p>include和include_once的区别：</p>
<p>​    include系统会碰到一次，执行一次；如果对同一个文件进行多次加载，那么系统会执行多次；</p>
<p>​    include_once：系统碰到多次，也只会执行一次</p>
<p>require和include的区别：本质都是包含文件，唯一的区别在于包含不到文件的时候，报错的形式不一样</p>
<p>​    include的错误级别较轻：不会阻止代码执行</p>
<p>​    require要求较高：如果包含出错代码不再执行（require后面的代码）</p>
<h3 id="文件加载路径"><a href="#文件加载路径" class="headerlink" title="文件加载路径"></a>文件加载路径</h3><p>文件在加载的收需要指定文件路径才能保证PHP正确的找到对应的文件。</p>
<p>文件的加载路径包含两大类：</p>
<p>​    1、绝对路径</p>
<p>​        从磁盘的根目录开始（本地绝对路径）</p>
<p>​            windows：盘符c:/路径/PHP文件</p>
<p>​            linux：/路径/PHP文件</p>
<p>​        从网站根目录开始（网络绝对路径）</p>
<p>​            /：相对于网站主机名字对应的路径</p>
<p>​    2、相对路径：从当前文件所在目录开始的路径</p>
<p>​    .|./：表示当前文件夹</p>
<p>​    ../：上级目录（当前文件夹的上一层文件夹）</p>
<p>绝对路径和相对路径的加载区别</p>
<p>​    1、绝对路径相对相率偏低，但是相对安全（路径不会出问题）</p>
<p>​    2、相对路径相对效率较高，但是容易出错（相对路径会发生改变）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PHP文件加载路径</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//相对路径加载</span></span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&#x27;include1.php&#x27;</span>;	<span class="comment">//默认当前文件本身</span></span><br><span class="line">	<span class="keyword">include_once</span> <span class="string">&#x27;./include1.php&#x27;</span>;  </span><br><span class="line">	<span class="comment">//复杂相对路径</span></span><br><span class="line">	<span class="keyword">include_once</span> <span class="string">&#x27;../www/include1.php&#x27;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//绝对路径</span></span><br><span class="line">	<span class="keyword">include_once</span> <span class="string">&#x27;D:\Service\phpstudy_pro\WWW\include1.php&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="文件嵌套包含"><a href="#文件嵌套包含" class="headerlink" title="文件嵌套包含"></a>文件嵌套包含</h3><p>文件嵌套包含：一个文件包含另外一个文件，同时被包含的文件又包含了另外一个文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件嵌套包含</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//包含include3.php//文件本身包含了Include4.php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;include3.php&#x27;</span>;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>嵌套包含的时候就很容易出现相对路径出错的问题：相对路径会因为文件的包含而改变（./和../）：windows下面，每一个文件夹下都有.和..的文件夹。</p>
<p>举例：张三左边是李四，李四左边是王五</p>
<p>张三把李四叫到自己的位置：李四与王五之间又两个位置，李四如果还按照左边伸手找王五就找不到</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的基本概念"><a href="#函数的基本概念" class="headerlink" title="函数的基本概念"></a>函数的基本概念</h3><p>函数：function，是一种语法结构，将实现某一功能的代码块（多行代码）封装到一个结构中，从而实现代码的重复利用（复用）。</p>
<h3 id="函数定义语法"><a href="#函数定义语法" class="headerlink" title="函数定义语法"></a>函数定义语法</h3><p>函数又几个对应的关键点：function关键字、函数名、参数（形参和实参）、函数体和返回值。</p>
<p>基本语法如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[参数]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="comment">//返回值：return 结果；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义函数的目的：是为了实现代码的重复利用，一个功能一个函数（简单明了）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//定义函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//函数体</span></span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;		<span class="comment">//没有返回值</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">//调用函数</span></span><br><span class="line">	display();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>函数的使用：通过访问函数的名字+()；    //如果函数在定义的过程中又参数，那么在调用的时候就必须传入对应的参数：函数是一种结构不会自动运行，必须通过调用才会执行。</p>
<p>函数是在代码执行阶段，碰到函数名字的时候才会嗲用，不是在编译阶段。</p>
<p>函数的调用特点：只要系统在内存中能够找到对应的函数，就可以执行（函数的调用可以在函数定义之前）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">	display();</span><br><span class="line">    <span class="comment">//定义函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="comment">//函数体</span></span><br><span class="line">    	<span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;		<span class="comment">//没有返回值</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>函数执行的内存分析：</p>
<p>​    1、读取代码进入到代码段（编译：将代码变成字节码存储到内容）</p>
<p>​    2、根据代码逐行执行</p>
<p>以上原因：编译和执行是分开的（先编译再执行）</p>
<h3 id="函数命名规范"><a href="#函数命名规范" class="headerlink" title="函数命名规范"></a>函数命名规范</h3><p>命名规范：由字母、数字和下划线组成，但是不能以数字开头</p>
<p>函数作为一种常用的结构，一般遵循以下规则：函数通常代表着函数的功能，而有些功能会比较复杂，可能一个单词不足以表达，需要多个组合。</p>
<p>​    1、驼峰法：除了左边第一个单词外，后面所有单词首字母都大写：showParentInfo()</p>
<p>​    2、下划线法：单词之间通过下划线连接，单词都是小写：show_parent_info()</p>
<p>函数名字：在一个脚本周期中，不允许出现同名函数（通常在一个系统开发中都不会使用同名函数）</p>
<h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><p>函数的参数分为两种：形参和实参</p>
<h4 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h4><p>形参：形式参数，不具有实际意义的参数，实在函数定义时使用的参数</p>
<h4 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h4><p>实参：实际参数，具有实际数据意义的参数，是在函数调用时使用的参数</p>
<p>形参是实参的载体：实参在调用时通常是需要传入到函数内部参与计算（运算），那么需要在函数内部去找到实际数据所在的位置才能找到数据本身：需要实际调用的时候，将数据以实参的形式传递给形参：给形参赋值，从而使得函数内部可以用到外部数据。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//定义函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span>&#123;		<span class="comment">//形参可以有多个，使用逗号分隔即可</span></span><br><span class="line">    	<span class="comment">//函数体：可以直接使用形参运算</span></span><br><span class="line">    	<span class="keyword">echo</span> <span class="variable">$arg1</span> + <span class="variable">$arg2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//调用函数</span></span><br><span class="line">	<span class="variable">$num1</span> = <span class="number">10</span>;</span><br><span class="line">	add(<span class="variable">$num1</span>,<span class="number">20</span>);		<span class="comment">//传入的实参，可以是变量或者其他有值的表达式（变量、常量、运算符计算结果）</span></span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>以上函数执行过程：</p>
<p>​    1、系统调用add函数：去内存中寻找是否有add函数：有</p>
<p>​    2、系统会在栈区开辟内存空间运行函数add</p>
<p>​    3、系统会查看函数本身是否有形参：有，两个</p>
<p>​    4、系统会判断调用的时候是否有实参：有，两个</p>
<p>​    5、系统默认会将实参的值$num1，20取出顺序赋值给形参：$arg1和$arg2</p>
<p>​    6、执行函数体：运行</p>
<p>​    7、返回函数执行（返回值）</p>
<p>注意事项：</p>
<p>​    1、在PHP中允许实参多于形参（个数）：函数内部不用而已</p>
<p>​    2、在PHP中理论上形参个数没有限制（实际开发不会太多）</p>
<p>​    3、实参不能少于形参个数</p>
<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>默认值：default value，指的是形参的默认值，在函数定义的时候，就给形参进行一个初始赋值：如实际调用传入的参数（实参）没有提供，那么形参就会使用定义时的值来进入函数内部参与运算。</p>
<p>通常默认值是用在一些，一定会有某个数据参与，但是可能通常是某个我们知道的值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数的默认值</span></span><br><span class="line"><span class="variable">$num1</span> = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"><span class="variable">$num1</span> = <span class="number">0</span>,<span class="variable">$num2</span> = <span class="number">0</span></span>)</span>&#123;		<span class="comment">//当前的$num1是形参，在编译时不执行，即便执行也是在sub函数内部，不会与外部的$num1变量冲突</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num1</span> - <span class="variable">$num2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：默认值如果存在，可以不用传入</span></span><br><span class="line">sub(<span class="variable">$num1</span>);		<span class="comment">//10</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$num1</span>;		<span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<p>​    1、默认值的定义是放在最右边的（多个），不能左边形参有默认值，但是右边没有</p>
<p>函数外部定义的变量名字与函数定义的形参名字冲突（同名）是没有任何关联关系的；如果多个函数使用同样的形参名字也不冲突。</p>
<h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p>实参在调用是会将赋值给形参，实际上使用的方式就是一种简单的值传递：将实参（如果是变量或者常量或者其他表达式）的结果（值）取出来赋值给形参：形参与外部实际传入的参数本身没有任何关联关系：只是结果一样。</p>
<p>有的时候，希望在函数内部拿到的外部数据，能够在函数内部改变，那么就需要明确告知函数（定义时），函数才会在调用的时候去主动获取外部数据的内存地址。以上这种定义形式叫做引用传值。</p>
<p>基本定义语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,&amp;形参<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在调用的时候，必须给引用传值的参数位置传入实际参数，而且参数本身必须是变量。（变量才有只想的数据的内存地址）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用传值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"><span class="variable">$a</span>,&amp;<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//修改形参的值</span></span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$a</span> * <span class="variable">$a</span>;</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$b</span> * <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="variable">$b</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//100,25</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">display(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr/&gt;&#x27;</span>,<span class="variable">$a</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>,<span class="variable">$b</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>; 		<span class="comment">//10,25</span></span><br><span class="line"><span class="comment">//错误调用：引用传值直接传入数据本身而不是变量</span></span><br><span class="line">display(<span class="number">10</span>,<span class="number">5</span>);		<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<p>说明：函数在定义的时候，对应的b形参采用的是取地址；所以在实参传入之后，系统b取到了外部变量b的内存地址，而a取得是值；因此改变之后：a只改变了函数内部自己，b改变自己得同时也改变了外部。</p>
<p>引用传值注意事项：在传入实参的时候，必须传入变量</p>
<h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>函数体：函数内部（大括号{}里面）的所有代码都称之为函数体</p>
<p>函数体：基本上所有的代码哦都可以实现</p>
<p>​    1、定义变量</p>
<p>​    2、定义常量</p>
<p>​    3、使用流程控制（分支、循环）</p>
<p>​    4、可以调用函数</p>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>返回值：return，指的是将函数实现的结果，通过return关键字，返回给函数外部（函数调用处）；在PHP中所有的函数都有返回值。（如果没有明确return使用，那么系统默认返回NULL）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;		<span class="comment">//输出当前函数的名字</span></span><br><span class="line">&#125;</span><br><span class="line">var_dump(display());		<span class="comment">//display，NULL</span></span><br></pre></td></tr></table></figure>
<p>返回值作用：将计算结果返回给调用处</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//function.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"><span class="variable">$num1</span>,<span class="variable">$num2</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num1</span> + <span class="variable">$num2</span>;	<span class="comment">//返回结果</span></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$num1</span>;		<span class="comment">//retuen直接结束函数，后面的内容都不会执行</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$res</span> = add(<span class="number">10</span>,<span class="number">20</span>);		<span class="comment">//外部定义变量接受函数运行结果</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$res</span>;		<span class="comment">//30</span></span><br><span class="line">	<span class="comment">//将结果提交给另外包含的文件</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$res</span>;		<span class="comment">//不再执行，原因：return结束了</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：函数的返回值可以是任意数据类型</p>
<p>return关键字：</p>
<p>​    1、return在函数内部存在的价值：返回当前函数的结果（当前函数运行结束）</p>
<p>​    2、return还可以在文件中直接使用（不再函数里面）：代表文件将结果return后面跟的内容，转交给包含当前文件的位置。（通常在系统配置文件中使用较多），在文件中也代表终止文件后面的代码：return之后的内容不再执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//function_include.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="comment">//包含有return关键之的文件</span></span><br><span class="line">	<span class="keyword">include_once</span> <span class="string">&#x27;function.php&#x27;</span>;		<span class="comment">//30</span></span><br><span class="line">	var_dump(<span class="variable">$res</span>);		<span class="comment">//string(11)&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域：变量（常量）能够被访问的区域</p>
<p>​    1、变量可以在普通代码中定义</p>
<p>​    2、变量也可以在函数内部定义</p>
<p>在PHP中作用域严格来说分为两种：但是PHP内部还定义一些在严格意义之外的一种，所以总共算三种：</p>
<p>​    1、全局变量：就是用户普通定义的变量（函数外部定义）</p>
<p>​        所属全局空间：在PHP中只允许在全局空间使用：理论上函数内部不可使用</p>
<p>​        脚本周期：知道脚本运行结束（最后一行代码执行完）</p>
<p>​    2、局部变量：就是在函数内部定义的变量</p>
<p>​        所属当前函数空间：在PHP中只允许当前函数自己内部使用</p>
<p>​        函数周期：函数执行结束（函数实在栈区中开辟独立内存空间运行）</p>
<p>​    3、超全局变量：系统定义的变量（预定义变量：$_SERVER、$_POST等）</p>
<p>​        所属超全局空间：没有访问限制（函数内外都可以访问）</p>
<p>​        超全局变量会将全局变量自动纳入到$GLOBALS里面，而$GLOBALS没有作用域限制，所以能够帮助局部去访问全局变量：但是碧血使用数组方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//默认代码空间：全局空间</span></span><br><span class="line">    <span class="variable">$global</span> = <span class="string">&#x27;global area&#x27;</span>;		<span class="comment">//最终会被系统纳入到超全局变量中：$GLOBALS[&#x27;global&#x27;] = global area；</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//局部变量（函数内部定义）</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//所有形参都可以理解为局部变量</span></span><br><span class="line">        <span class="variable">$inner</span> = <span class="keyword">__FUNCTION__</span>;		<span class="comment">//局部变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//访问全局变量</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$global</span>;		<span class="comment">//报错</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//访问全局变量</span></span><br><span class="line">        var_dump(<span class="variable">$GLOBALS</span>);		<span class="comment">//可以访问</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$GLOBALS</span>[<span class="string">&#x27;global&#x27;</span>];		<span class="comment">//global area</span></span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//调用函数</span></span><br><span class="line">	display();</span><br><span class="line">	<span class="comment">//全局空间访问局部变量</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$inner</span>;		<span class="comment">//报错</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果想函数内部使用外部变量：除了$GLOBALS之外，通过参数传值（如果要统一战线还可以使用引用传值）。</p>
<p>在PHP中，其实还有一种方式，能够实现全局发访问局部，同时局部也可以访问全局：global关键字</p>
<p>global关键字：是一种还函数里面定义变量的一种方式</p>
<p>​    1、如果使用global定义的变量名在外部存在（全局变量），那么系统在函数内部定义的变量直接指向外部全局变量所指向的内存空间（同一个变量）；</p>
<p>​    2、如果使用global定义的变量名在外部不存在（全局变量），系统会自动在全局空间（外部）定义一个与局部变量同名的全局变量</p>
<p>本质的形式：在函数的内部和外部，对一个同名变量（全局和局部）使用同意狂内存地址保存数据，从而实现共同拥有。</p>
<p>基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span> 变量名;		<span class="comment">//不能赋值</span></span><br><span class="line">变量名 = 值;		<span class="comment">//修改</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$global</span> = <span class="string">&#x27;global area&#x27;</span>;	</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//所有形参都可以理解为局部变量</span></span><br><span class="line">    <span class="variable">$inner</span> = <span class="keyword">__FUNCTION__</span>;		<span class="comment">//局部变量</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">//定义变量：使用全局变量</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$global</span>;		<span class="comment">//全局空间存在</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$global</span>;		<span class="comment">//global area</span></span><br><span class="line">    <span class="comment">//定义变量：全局不存在</span></span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$local</span>;</span><br><span class="line">    <span class="variable">$local</span> = <span class="string">&#x27;inner&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问“局部”变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$local</span>;		<span class="comment">//inner</span></span><br></pre></td></tr></table></figure>
<p>虽然以上方式可以实现局部与全局的互访，但是通常不会这么用。一般如果会存在特殊使用，也会使用参数的形式来访问。（还可以使用常量：define定义的）</p>
<h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>静态变量：static，是在函数内部定义的变量，使用static关键字修饰，用来实现跨函数共享数据的变量：函数运行结束所有全局变量都会清空，如果重新运行以下函数，所有的局部变量优惠重新初始化。</p>
<p>基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义变量</span></span><br><span class="line">    <span class="built_in">static</span> $变量名 = 值;	<span class="comment">//通常会在定义的时候就直接赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义变量</span></span><br><span class="line">    <span class="variable">$local</span> = <span class="number">1</span>;		<span class="comment">//局部变量</span></span><br><span class="line">    <span class="comment">//定义静态变量</span></span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$count</span> = <span class="number">1</span>;		<span class="comment">//静态变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$local</span>++,<span class="variable">$count</span>++,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">display();		<span class="comment">//1,1</span></span><br><span class="line">display();		<span class="comment">//1,2</span></span><br><span class="line">display();		<span class="comment">//1,3</span></span><br></pre></td></tr></table></figure>
<p>静态变量的作用是为了跨函数共享数据（同一个函数被多次调用）</p>
<p>静态变量的原理：系统在进行编译的时候就会对static这一行进行初始化；为静态变量赋值；函数在调用的时候会自动跳过static这一行</p>
<p>静态变量的使用：</p>
<p>​    1、为了统计：当前函数被调用的次数（有没有替代方法？使用引用传递或者超全局变量）</p>
<p>​    2、为了统筹函数多次调用得到的不同结果（递归思想）</p>
<h3 id="可变函数"><a href="#可变函数" class="headerlink" title="可变函数"></a>可变函数</h3><p>可变函数：当前有一个变量所保存的值刚好是一个函数的名字，那么就可以使用变量+()来充当函数名使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="variable">$func</span> = <span class="string">&#x27;display&#x27;</span>;</span><br><span class="line"><span class="comment">//可变函数</span></span><br><span class="line"><span class="variable">$func</span>();		<span class="comment">//display，函数被执行了</span></span><br></pre></td></tr></table></figure>
<p>可变函数在系统使用的过程中还是比较多的，尤其是使用很多系统函数的时候：需要用户在外部定义一个自定义函数，但是是需要传入到系统函数内部使用。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义系统函数（假设）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sys_function</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//给指定的函数（第一个参数），求对应的第二个参数值的4次方</span></span><br><span class="line">    <span class="comment">//为实际用户输入的数值进行处理</span></span><br><span class="line">    <span class="variable">$arg2</span> = <span class="variable">$arg2</span> +<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arg1</span>(<span class="variable">$arg2</span>);		<span class="comment">//相当于user_function(20)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个用户函数：求一个数的四次方</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user_function</span>(<span class="params"><span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$num</span> * <span class="variable">$num</span> * <span class="variable">$num</span> * <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求10的4次方</span></span><br><span class="line"><span class="keyword">echo</span> sys_function(<span class="string">&#x27;user_function&#x27;</span>,<span class="number">10</span>);			<span class="comment">//160000</span></span><br></pre></td></tr></table></figure>
<p>将一个用户定义的函数传入给另一个函数（函数名）去使用的过程，称之为回调过程，而被传入的函数称之为回调函数。</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>匿名函数：没有名字的函数</p>
<p>基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">变量名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义基本匿名函数</span></span><br><span class="line"><span class="variable">$func</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用匿名函数：可变函数</span></span><br><span class="line"><span class="variable">$func</span>();</span><br><span class="line"><span class="comment">//查看变量内容</span></span><br><span class="line">var_dump(<span class="variable">$func</span>);		<span class="comment">//object(Closure)</span></span><br></pre></td></tr></table></figure>
<p>变量保存匿名函数，本质得到的是一个对象（Closure）</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包：closure，一次来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）</p>
<p>简单理解：函数内部有一些局部变量（要执行的代码块）在函数执行之后没有被释放，是因为在函数内部还有对应的函数在引用（函数的内部函数：匿名函数）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//闭包函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义变量：局部变量</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    <span class="comment">//定义匿名函数</span></span><br><span class="line">    <span class="variable">$innerfunction</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">use</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;		<span class="comment">//use就是将外部变量（局部）保留给内部使用（闭包）</span></span><br><span class="line">        <span class="comment">//函数内部的函数</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;	</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    <span class="variable">$innerfunction</span>();</span><br><span class="line">&#125;</span><br><span class="line">display();</span><br></pre></td></tr></table></figure>
<p>证明：函数的局部变量在函数使用完之后没有被释放？</p>
<p>​    1、使用内部匿名函数</p>
<p>​    2、匿名韩式使用局部变量：use</p>
<p>​    3、匿名函数被返回为外部使用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//证明函数的局部变量在函数使用完之后没有被释放</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定义变量：局部变量</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="keyword">__FUNCTION__</span>;</span><br><span class="line">    <span class="comment">//定义匿名函数</span></span><br><span class="line">    <span class="variable">$innerfunction</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">use</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;		<span class="comment">//use就是将外部变量（局部）保留给内部使用（闭包）</span></span><br><span class="line">        <span class="comment">//函数内部的函数</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;	</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//返回内部匿名函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$innerfunction</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$closure</span> = display1();</span><br><span class="line"><span class="comment">//到此位置：display1函数运行结束：理论上局部变量$name应该已经被释放</span></span><br><span class="line"><span class="variable">$closure</span>();		<span class="comment">//display1,证明了当前局部变量$name没有被释放，从而在外部调用内部匿名函数的时候可以被使用</span></span><br></pre></td></tr></table></figure>


<h3 id="伪类型"><a href="#伪类型" class="headerlink" title="伪类型"></a>伪类型</h3><p>伪类型：加类型，实际上在PHP中不存在的类型。但是通过伪类型可以帮助程序员去更好的查看操作手册从而更加方便学习。</p>
<p>伪类型主要有两种：在三大类八小类之外</p>
<p>mixed：混合的，可以是多种PHP中的数据类型</p>
<p>number：数值的，可以是任意数值类型（整型和浮点型）</p>
<h3 id="常用系统函数"><a href="#常用系统函数" class="headerlink" title="常用系统函数"></a>常用系统函数</h3><h4 id="有关输出的函数"><a href="#有关输出的函数" class="headerlink" title="有关输出的函数"></a>有关输出的函数</h4><p>print()：类似于echo输出提供的内容，本质是一种结构（不是函数），返回1，可以不需要使用括号</p>
<p>print_r()：类似于var_dump，但是比var_dump简单，不会输出数据的类型，指挥输出值（数组打印使用比较多）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出相关</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">print</span>(<span class="string">&#x27;hello world&lt;br/&gt;&#x27;</span>);		<span class="comment">//hello world,1,此处的1是输出print的返回值1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;hello world&lt;br/&gt;&#x27;</span>;		<span class="comment">//hello world</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello world&lt;br/&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$a</span>);		<span class="comment">//hello world</span></span><br></pre></td></tr></table></figure>


<h4 id="有关时间的函数"><a href="#有关时间的函数" class="headerlink" title="有关时间的函数"></a>有关时间的函数</h4><p>date()：按照指定格式对应的时间戳（从1970年格林威治时间开始计算的秒数），如果没有指定特定的时间戳，那么就是默认解释当前时间戳</p>
<p>time()：获取当前时间对应的时间戳</p>
<p>microtime()：获取微秒级别的时间</p>
<p>strtotime()：按照规定格式的字符串转换成时间戳</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间函数</span></span><br><span class="line"><span class="keyword">echo</span> date(<span class="string">&#x27;Y 年 m 月 d 日 H:i:s&#x27;</span>，<span class="number">12345678</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> time(),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> microtime(),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> strtotime(<span class="string">&#x27;tomorrow 10 hours&#x27;</span>);</span><br></pre></td></tr></table></figure>


<h4 id="有关数学的函数"><a href="#有关数学的函数" class="headerlink" title="有关数学的函数"></a>有关数学的函数</h4><p>max()：指定参数中最大的值</p>
<p>min()：指定参数中最小的数</p>
<p>rand()：得到一个随机数，指定区间的随机整数</p>
<p>mt_rand()：于rand一样，只是底层结构不一样，效率比rand高（建议使用）</p>
<p>round()：四舍五入</p>
<p>ceil()：向上取整</p>
<p>floor()：向下取整</p>
<p>pow()：求指定数字的指定指数次结果：pow(2,8) == 2^8 == 256</p>
<p>abs()：绝对值</p>
<p>sqrt()：平方根</p>
<h4 id="关于函数的函数"><a href="#关于函数的函数" class="headerlink" title="关于函数的函数"></a>关于函数的函数</h4><p>function_exists()：判断指定的函数名字是否在内存中存在（帮助用户不去使用一个不存在的函数，让代码安全性更高）</p>
<p>func_get_arg()：在自定义函数中去获取指定数值对应的参数</p>
<p>func_get_args()：在自定义函数中获取所有的参数（数组）</p>
<p>func_num_args()：获取当前自定义函数中参数的数量</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数相关函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取指定参数</span></span><br><span class="line">    var_dump(func_get_arg(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//获取所有参数</span></span><br><span class="line">    var_dump(func_get_args());</span><br><span class="line">    <span class="comment">//获取参数数量</span></span><br><span class="line">    var_dump(func_num_args());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">function_exists(<span class="string">&#x27;test&#x27;</span>) &amp;&amp; test(<span class="number">1</span>,<span class="string">&#x27;2&#x27;</span>,<span class="number">3</span>,<span class="number">4</span>);		<span class="comment">//string(1)&quot;2&quot;,array(4)&#123;1,&#x27;2&#x27;,3,4&#125;,int(4)</span></span><br></pre></td></tr></table></figure>
<p>参数的标识是从0开始，func_get_args和func_num_args都是统计的对应实参的数量</p>
<h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><p>​    1、转换函数：Implode()，explode()，str_split()</p>
<p>​        implode(连接方式,数组)：将数组中的元素按照某个规则连接成一个字符串</p>
<p>​        explode(分隔字符，目标字符串)：将字符串按照某个格式进行分隔，变成一个数组</p>
<p>​            中国|北京|顺义  == array(“中国”,”北京”,”顺义”)</p>
<p>​        str_split(字符串,字符长度)：按照指定长度拆分字符串得到数组</p>
<p>​    2、截取函数：trim()，ltrim()，rtrim()</p>
<p>​        trim(字符串[,指定字符])：本身默认是用来去除两边的空格（中间不行），但是也可以指定要去除的内容，是按照指定的内容循环取出两边有的内容：直到碰到一个不是目标字符为止</p>
<p>​        ltrim()：去除左边的</p>
<p>​        rtrim()：去除右边的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27; ab cd ef &#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = trim(<span class="variable">$str1</span>);</span><br><span class="line">var_dump(<span class="variable">$str2</span>);		<span class="comment">//string(8) &quot;ab cd ef&quot;</span></span><br></pre></td></tr></table></figure>
<p>​    3、截取函数：substr()，strstr()</p>
<p>​        substr(字符串,起始位置从0开始[,长度])：指定位置开始截取字符串，可以截取指定长度（不指定到最后）</p>
<p>​        strstr(字符串,匹配字符)：从指定位置开始，截取到最后（可以用来取文件后缀名）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str1</span> = <span class="string">&#x27; ab cd ef &#x27;</span>;</span><br><span class="line"><span class="variable">$str2</span> = substr(<span class="variable">$str1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable">$str3</span> = strstr(<span class="variable">$str1</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$str2</span>);		<span class="comment">//string(6) &quot;cd ef &quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$str3</span>);		<span class="comment">//string(6) &quot;cd ef &quot;</span></span><br></pre></td></tr></table></figure>
<p>​    4、大小写转换函数：strtolower()，strtoupper()，ucfirst()</p>
<p>​        strtolower()：全部小写</p>
<p>​        strtoupper()：全部大写</p>
<p>​        ucfirst()：首字母大写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcd e f &#x27;</span></span><br><span class="line"><span class="keyword">echo</span> strtoupper(<span class="variable">$str</span>);		<span class="comment">//ABCD E F</span></span><br><span class="line"><span class="keyword">echo</span> ucfirst(<span class="variable">$str</span>);			<span class="comment">//Abcd e f</span></span><br></pre></td></tr></table></figure>
<p>​    5、查找函数：strpos()，strrpos()</p>
<p>​        strpos()：查找字符在目标字符串中首次出现的位置，没找到则返回false</p>
<p>​        strrpos()：查找字符在目标字符串中最后次出现的位置，没找到则返回false</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;123a123a123a123&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> strpos(<span class="variable">$str</span>,<span class="string">&#x27;a&#x27;</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//3</span></span><br><span class="line"><span class="keyword">echo</span> strrpos(<span class="variable">$str</span>,<span class="string">&#x27;a&#x27;</span>);				<span class="comment">//11</span></span><br></pre></td></tr></table></figure>
<p>​    6、替换函数：str_replace()</p>
<p>​        str_replace(匹配目标,替换的内容,字符串本身)：将目标字符串中部分字符串进行替换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;123a123a123a123&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> str_replace(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="variable">$str</span>);		<span class="comment">//123b123b123b123</span></span><br></pre></td></tr></table></figure>
<p>​    7、格式化函数：printf()，sprintf()</p>
<p>​        printf/sprintf(输出字符串有占位符,顺序占位内容…)：格式化输出数据</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="number">8</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="string">&#x27;tony&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> sprintf(<span class="string">&#x27;你好,今年我%d岁，我叫%s&#x27;</span>,<span class="variable">$age</span>,<span class="variable">$name</span>);		<span class="comment">//你好,今年我8岁，我叫tony</span></span><br></pre></td></tr></table></figure>
<p>​    8、其他：str_repeat()，str_shuffle()</p>
<p>​        str_repeat()：重复某个字符串N次</p>
<p>​        str_shuffle()：随机打乱字符串</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;abcdefg&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> str_repeat(<span class="variable">$str</span>,<span class="number">5</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//abcdefgabcdefg</span></span><br><span class="line"><span class="keyword">echo</span> str_shuffle(<span class="variable">$str</span>);			<span class="comment">//fdbgeca</span></span><br></pre></td></tr></table></figure>


<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误处理：指的是系统（或者用户）在对某些代码进行执行的时候，发现有错误，就会通过错误处理的形式告知程序员。</p>
<h3 id="错误分类"><a href="#错误分类" class="headerlink" title="错误分类"></a>错误分类</h3><p>​    1、语法错误：用户书写的代码不符合PHP的语法规范，语法错误会导致代码在编译过程中不通过，所以代码不会执行（pass error）</p>
<p>​    2、运行时错误：代码编译通过，但是代码在执行的过程中会出现一些调价你不满足导致的错误（runtime error）</p>
<p>​    3、逻辑错误：程序员在写代码的时候不够规范，出现了一些逻辑性的错误，导致代码正常执行，但是得不到想要的结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> = <span class="number">1</span>)&#123;		<span class="comment">//最常见把比较符号写成赋值符号</span></span><br><span class="line">    <span class="comment">//执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="错误代号"><a href="#错误代号" class="headerlink" title="错误代号"></a>错误代号</h3><p>所有看到的错误代号在PHP中都被定义成了系统常量（可以直接使用）    </p>
<p>1、系统错误：</p>
<p>​    E_PARSE：编译错误，代码不会执行</p>
<p>​    E_ERROR：fatal error，致命错误，会导致代码不能正确执行（出错的位置断掉）</p>
<p>​    E_WARNING：warning，警告错误，不会影响代码执行，但是可能得到意想不到的结果</p>
<p>​    E_NOTICE：notice，通知错误，不会影响代码执行</p>
<p>2、用户错误：E_USER_ERROR，E_USER_WARNING，E_USER_NOTICE</p>
<p>​    用户在使用自定义错误触发的时候，会使用到的错误代号（系统不会用到）</p>
<p>3、其他：E_ALL，代表着所有错误（通常在进行错误控制的时候使用比较多），建议在开发过程中（开发环境）使用</p>
<p>所有以E开头的错误常量（代号）其实都是由一个字节存储，然后每一2种错误占据一个对应的位，如果想进行一些错误的控制们可以使用位运算进行操作</p>
<p>排除通知级别notice：E_ALL &amp;  ~E_NOTICE</p>
<p>只要警告和通知：E_WARNING | E_NOTICE</p>
<h3 id="错误触发"><a href="#错误触发" class="headerlink" title="错误触发"></a>错误触发</h3><p>程序运行时触发：系统自动根据错误发生后，对比对应的错误信息，输出给用户：主要对于代码的语法错误和运行时错误。</p>
<p>认为触发：知道某些逻辑可能会出错，从而使用对应的判断代码来触发相应的错误提示。</p>
<p>trigger_error(错误提示)：可以通过第二个参数进行严格性控制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">//人为触发错误</span></span><br><span class="line">    trigger_error(<span class="string">&#x27;除数不能为0！&#x27;</span>);		<span class="comment">//默认notice，会继续执行</span></span><br><span class="line">    trigger_error(<span class="string">&#x27;除数不能为0！&#x27;</span>,E_USER_ERROR);		<span class="comment">//指定错误级别为error，代码不会会执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> / <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure>


<h3 id="错误显示设置"><a href="#错误显示设置" class="headerlink" title="错误显示设置"></a>错误显示设置</h3><p>错误显示设置：哪些错误该显示，以及该如何显示</p>
<p>在PHP中，由两种方式来设置当前脚本的错误处理：</p>
<p>​    1、在PHP的配置文件中：全局配置：php.ini文件</p>
<p>​        display_errors：是否显示错误</p>
<p>​        error_reporting：显示什么级别的错误</p>
<p>​    2、可以在运行的PHP脚本中去设置：在脚本中定义的配置项级别比配置文件高（通才在开发当中都会在代码中去进行控制和配置）</p>
<p>​        error_reporting()：设置对应的错误显示级别</p>
<p>​        ini_set(‘配置文件中的配置项’,配置值)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&#x27;error_reporting&#x27;</span>,E_ALL);</span><br><span class="line">ini_set(<span class="string">&#x27;display_errors&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>


<h3 id="错误日志设置"><a href="#错误日志设置" class="headerlink" title="错误日志设置"></a>错误日志设置</h3><p>在实际生产环境中，不会让错误赤裸裸的展示给用户：</p>
<p>​    1、不友好</p>
<p>​    2、不安全：错误会暴露网站很多信息（路径、文件名）</p>
<p>所以在生产环境中，一般不显示错误（错误也比较少），但是不可能避免会出现错误（测试的时候不会发现所有的问题），这个时候不希望看到，但是又希望捕捉到可以让后台程序员去修改：需要保存到日志文件中，需要在PHP配置文件中或者代码中（ini_set）设置对应error_log配置项</p>
<p>​    1、开启日志功能：log_errors = On</p>
<p>​    2、指定保存路径：error_log = ‘保存路径’</p>
<h3 id="自定义错误处理"><a href="#自定义错误处理" class="headerlink" title="自定义错误处理"></a>自定义错误处理</h3><p>最简单的错误处理：trigger_error()函数，但是该函数不会阻止系统报错</p>
<p>PHP系统提供了一种用户处理错误的机制：用户自定义错误吃力函数，然后将该函数增加到系统错误处理的句柄中，然后系统会碰到错误之后，使用用户定义的错误函数。</p>
<p>​    1、如何将用户自定义的函数放到系统中：set_error_handler()</p>
<p>​    2、自定义错误处理函数，系统有要求：errno,errstr，自定义错误处理函数的头两个必须存在的参数，系统后期调用该自定义函数的时候，会给第一个和第二个传递对应的参数；errfile,errline,errcontext：可选参数：自定义函数中是否需要这些数据</p>
<p>代码实现：</p>
<p>​    1、自定义错误处理函数：注意参数</p>
<p>​    2、注册自定义函数：修改错误处理机制</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义错误处理机制</span></span><br><span class="line"><span class="comment">//自定义函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">@param</span>1 $errno，是系统提供的错误代码：E_ALL,E_NOTICE...</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_error</span>(<span class="params"><span class="variable">$errno</span>,<span class="variable">$errstr</span>,<span class="variable">$errfile</span>,<span class="variable">$errline</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断：当前会碰到那些错误，排除当前本身系统就要排除的错误</span></span><br><span class="line">    <span class="keyword">if</span>(!(error_reporting() &amp; <span class="variable">$errno</span>))&#123;</span><br><span class="line">    	<span class="comment">//error_reporting没有设置参数代表回去当前系统错误处理对应的级别</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;		</span><br><span class="line">    <span class="comment">//开始判断错误类型（错误匹配）</span></span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$errno</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> E_ERROR:</span><br><span class="line">        <span class="keyword">case</span> E_USER_ERROR:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;fatal error in file&#x27;</span> . <span class="variable">$errfile</span> . <span class="string">&#x27;on line&#x27;</span> . <span class="variable">$errline</span> . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error info:&#x27;</span> . <span class="variable">$errstr</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> E_WARNING:</span><br><span class="line">        <span class="keyword">case</span> E_USER_WARNING:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;warning in file&#x27;</span> . <span class="variable">$errfile</span> . <span class="string">&#x27;on line&#x27;</span> . <span class="variable">$errline</span> . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error info:&#x27;</span> . <span class="variable">$errstr</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> E_NOTICE:</span><br><span class="line">        <span class="keyword">case</span> E_USER_NOTICE:</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;notice in file&#x27;</span> . <span class="variable">$errfile</span> . <span class="string">&#x27;on line&#x27;</span> . <span class="variable">$errline</span> . <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error info:&#x27;</span> . <span class="variable">$errstr</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//修改错误机制</span></span><br><span class="line">set_error_handler(<span class="string">&#x27;my_error&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure>
<p>当前属于简单自定义模式，如果要复杂，可以在某些影响代码功能的错误发生后，让用户跳转到某个指定界面。</p>
<h2 id="数组详解"><a href="#数组详解" class="headerlink" title="数组详解"></a>数组详解</h2><h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><p>数组：array，数据的组合，值将一组数据（多个）存储到一个指定的容器中，用变量指向该容器，然后可以通过变量一次性得到该容器中的所有数据。</p>
<h3 id="数组定义语法"><a href="#数组定义语法" class="headerlink" title="数组定义语法"></a>数组定义语法</h3><p>在PHP中系统提供了多种定义数组的方式：</p>
<p>​    1、使用array关键字：最常用的</p>
<p>​        $变量 = array(元素1,元素2,元素3…);</p>
<p>​    2、可以使用中括号来包裹数据：</p>
<p>​        $变量 = [元素1,元素2…];</p>
<p>​    3、隐形定义数组：给变量增加一个中括号，系统自动变成数组</p>
<p>​            $变量[] = 值1;        //如果不提供下标也可以，系统自动生成（数字：从0开始，且从当前前面最大的开始）</p>
<p>​            $变量[下标] = 值;    //中括号里面的内容称之为下标key，该下标可以是字母（单词）或者数字，与变量命名的规则相似</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义数组：array</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">var_dump(<span class="variable">$arr1</span>);	<span class="comment">//array(3) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; int(2) [2]=&gt; string(5) &quot;hello&quot; &#125;</span></span><br><span class="line"><span class="comment">//定义数组：[]</span></span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">var_dump(<span class="variable">$arr2</span>);	<span class="comment">//同上</span></span><br><span class="line"><span class="comment">//隐形数组：</span></span><br><span class="line"><span class="variable">$arr3</span>[] = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$arr3</span>[<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="variable">$arr3</span>[] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="variable">$arr3</span>[<span class="number">3</span>] = <span class="number">55</span>;</span><br><span class="line"><span class="variable">$arr3</span>[<span class="string">&#x27;key&#x27;</span>] = <span class="string">&#x27;key&#x27;</span>;</span><br><span class="line">var_dump(<span class="variable">$arr3</span>);	<span class="comment">//array(5) &#123; [0]=&gt; int(1) [10]=&gt; int(100) [11]=&gt; string(1) &quot;2&quot; [3]=&gt; int(55) [&quot;key&quot;]=&gt; string(3) &quot;key&quot; &#125;</span></span><br></pre></td></tr></table></figure>


<h3 id="PHP数组特点"><a href="#PHP数组特点" class="headerlink" title="PHP数组特点"></a>PHP数组特点</h3><p>​    1、可以整数下标或者字符串下标</p>
<p>​        如果数组下标都为整数：索引数组</p>
<p>​        如果数组下标都为字符串：关联数组</p>
<p>​    2、不同下标可以混合存在：混合数组</p>
<p>​    3、数组元素的顺序以放入顺序为准，跟下标无关</p>
<p>​    4、数字下标的自增长特性：从0开始自动增长，如果中间手动出现较大的，那么后面的自增长元素从最大的值+1开始</p>
<p>​    5、特殊值下标的自动转换</p>
<p>​        布尔值：true和false</p>
<p>​        空：NULL</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr4</span>[<span class="literal">false</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$arr4</span>[<span class="literal">true</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$arr4</span>[<span class="literal">NULL</span>] = <span class="literal">NULL</span>;</span><br><span class="line">var_dump(<span class="variable">$arr4</span>);		<span class="comment">//array(3) &#123; [0]=&gt; bool(false) [1]=&gt; bool(true) [&quot;&quot;]=&gt; NULL &#125;</span></span><br></pre></td></tr></table></figure>
<p>​    6、PHP中数组元素没有类型限制</p>
<p>​    7、PHP中数组元素没有长度限制</p>
<p>补充：PHP中的数组是很大的数据，所以存储是堆区，为当前数组分配一块连续的内存。</p>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组：数组里面的元素又是数组</p>
<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>二维数组：数组中所有的元素都是一维数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$info</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Dim&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">30</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">28</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Lily&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">20</span>)		<span class="comment">//最后一个元素，后面可以跟逗号不影响（不建议）</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$info</span>);</span><br></pre></td></tr></table></figure>


<h4 id="多维数组-1"><a href="#多维数组-1" class="headerlink" title="多维数组"></a>多维数组</h4><p>在第二维的数组元素中可以继续时数组，在PHP中没有维度限制（PHP本质并没有二维数组）</p>
<p>但是：不建议使用超过三维以上的数组，会增加访问复杂度，降低访问效率。</p>
<h4 id="异形数组（不规则数组）"><a href="#异形数组（不规则数组）" class="headerlink" title="异形数组（不规则数组）"></a>异形数组（不规则数组）</h4><p>异形数组：数组中的元素不规则，有普通基本变量也有数组</p>
<p>在实际开发中，并不常用，尽量让数组袁术规则化（便于进行访问）</p>
<h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><h4 id="遍历的基本含义"><a href="#遍历的基本含义" class="headerlink" title="遍历的基本含义"></a>遍历的基本含义</h4><p>数组遍历：普通数组数据的访问都是通过数组元素的下标来实现访问，如果说数组中所有的数据都需要一次输出出来，就需要我们使用到一些简化的规则来实现自动获取下标以及输出数组元素。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = arry(<span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>),<span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Jim&#x27;</span>));	<span class="comment">//二维数组</span></span><br><span class="line"><span class="comment">//访问一维元素：$arr[一维下标]</span></span><br><span class="line"><span class="variable">$arr</span>[<span class="number">0</span>];		<span class="comment">//结果：array(&#x27;name&#x27; =&gt; &#x27;Tom&#x27;)</span></span><br><span class="line"><span class="comment">//访问二维元素：$arr[一维下标][二维下标]</span></span><br><span class="line"><span class="variable">$arr</span>[<span class="number">1</span>][<span class="string">&#x27;name&#x27;</span>]；		<span class="comment">//Jim</span></span><br></pre></td></tr></table></figure>


<h4 id="foreach遍历语法"><a href="#foreach遍历语法" class="headerlink" title="foreach遍历语法"></a>foreach遍历语法</h4><p>基本语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($数组变量 <span class="keyword">as</span>[$下标 =&gt;]$值)&#123;</span><br><span class="line">    <span class="comment">//通过$下标访问元素的下标；通过$值访问元素的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常：如果时关联数组（字母下标），就需要下标，如果是数字下标就直接访问值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PHP数组遍历：foreach</span></span><br><span class="line"><span class="comment">//定义数组</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//foreach循环</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="comment">//$v随意命名</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$v</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">    <span class="comment">//$v随意命名</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key:&#x27;</span>,<span class="variable">$k</span>,<span class="string">&#x27; == value:&#x27;</span>,<span class="variable">$v</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//key:0 == value:1</span></span><br><span class="line">												<span class="comment">//key:1 == value:2</span></span><br><span class="line">												<span class="comment">//key:2 == value:3</span></span><br><span class="line">												<span class="comment">//key:3 == value:4</span></span><br><span class="line">												<span class="comment">//key:4 == value:5</span></span><br><span class="line">												<span class="comment">//key:5 == value:6</span></span><br><span class="line">												<span class="comment">//key:6 == value:7</span></span><br><span class="line">												<span class="comment">//key:7 == value:8</span></span><br><span class="line">												<span class="comment">//key:8 == value:9</span></span><br><span class="line">												<span class="comment">//key:9 == value:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在进行数据存储定义的时候，通常二维数组不会两个维度的key下标都为数字，一般时一维为数字（无意义），二维为字符串（数据库表字段），所以在进行遍历的时候，通常是只需要针对一维进行遍历，取得二维数组元素，然后二维数组元素通过下标去访问。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">	<span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Dim&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">30</span>),</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">28</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//通过foreach遍历一维元素</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">    <span class="comment">//1、可以继续遍历：增加foreach遍历$value</span></span><br><span class="line">    <span class="comment">//2、可以使用下标访问</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;name is:&#x27;</span>,<span class="variable">$value</span>[<span class="string">&#x27;name&#x27;</span>],<span class="string">&#x27; and age is:&#x27;</span>,<span class="variable">$value</span>[<span class="string">&#x27;age&#x27;</span>],<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;			<span class="comment">//name is:Dim and age is:30</span></span><br><span class="line">		<span class="comment">//name is:Tom and age is:28</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="foreach遍历原理"><a href="#foreach遍历原理" class="headerlink" title="foreach遍历原理"></a>foreach遍历原理</h4><p>foreach遍历的原理：本质时数组的内部有一颗指针，默认时指向数组元素的第一个元素，foreach就是利用指针去获取数据，同时移动指针。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123;</span><br><span class="line">	<span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    1、foreach会重置指针：让指针指向第一个元素；</p>
<p>​    2、进入foreach循环：通过指针取得当前第一个元素，然后将下标取出放到对应的下标变量$k中（如果存在），将值取出来放到对应的值变量$v中；（指针下移）    </p>
<p>​    3、进入到循环内部（循环体），开始执行；</p>
<p>​    4、重复2和3，直到在2的时候遇到指针取不到内容（指针指向数组最后）</p>
<h4 id="for循环遍历数组"><a href="#for循环遍历数组" class="headerlink" title="for循环遍历数组"></a>for循环遍历数组</h4><p>for循环：基于已知边界条件（起始和结束）然后有条件的变化（规律）</p>
<p>因此：for循环遍历数组有对应条件</p>
<p>​    1、获取数组长度：count(数组)的阿斗数组元素的长度</p>
<p>​    2、要求数组元素的下标时规律的数字</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组特点：索引数组，下标规律</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key is:&#x27;</span>,<span class="variable">$i</span>,<span class="string">&#x27; and value is:&#x27;</span>,<span class="variable">$arr</span>[<span class="variable">$i</span>],<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    			<span class="comment">//key is:0 and value is:1</span></span><br><span class="line">				<span class="comment">//key is:1 and value is:2</span></span><br><span class="line">				<span class="comment">//key is:2 and value is:3</span></span><br><span class="line">				<span class="comment">//key is:3 and value is:4</span></span><br><span class="line">				<span class="comment">//key is:4 and value is:5</span></span><br><span class="line">				<span class="comment">//key is:5 and value is:6</span></span><br><span class="line">				<span class="comment">//key is:6 and value is:7</span></span><br><span class="line">				<span class="comment">//key is:7 and value is:10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="while配合each和list遍历数组"><a href="#while配合each和list遍历数组" class="headerlink" title="while配合each和list遍历数组"></a>while配合each和list遍历数组</h4><p>while实在外部定义边界条件，如果要实现可以和for循环实现</p>
<p>each函数使用：each能够从一个数组中获取当前数组指针所指向的元素的下标和值，拿到之后将数组指针下移，同时将拿到的元素的下标和值以一个四个元素的数组返回：</p>
<p>​    0下标 –&gt; 取得元素的下标值</p>
<p>​    1下标 –&gt; 取得元素的值</p>
<p>​    key下标 –&gt; 取得元素的下标值</p>
<p>​    value下标 –&gt; 取得元素的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">30</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre/&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//each函数指针操作</span></span><br><span class="line">print_r(each(<span class="variable">$arr</span>));	<span class="comment">//Array([1] =&gt; 1 [value] =&gt; 1 [0] =&gt; 0 [key] =&gt; 0)</span></span><br><span class="line">print_r(each(<span class="variable">$arr</span>));	<span class="comment">//Array( [1] =&gt; Tom [value] =&gt; Tom [0] =&gt; name [key] =&gt; name)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果each取不到结果（数组指针移到最后），返回false</p>
<p>list函数使用：list是一种结构，不是一种函数（没有返回值），是list提供一堆变量去从一个数组中取得元素值，然后依次存放到对应的变量当中（批量为变量赋值：值来源于数组）：list必须从索引数组中去获取数据，而且必须从0开始。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span> =&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$first</span>) = <span class="variable">$arr</span>;</span><br><span class="line"><span class="keyword">list</span>(<span class="variable">$first</span>,<span class="variable">$second</span>) = <span class="variable">$arr</span>;	<span class="comment">//错误：second变量对应的小标为元素小标1的，但是数组没有</span></span><br><span class="line">var_dump(<span class="variable">$first</span>);		<span class="comment">//int(1)</span></span><br></pre></td></tr></table></figure>
<p>list和each配合特别好：each一定有两个元素就是0和1下标元素</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">list</span>(变量<span class="number">1</span>,变量<span class="number">2</span>) = each(数组);	<span class="comment">//是一种赋值运算，但是可以得到false结果（each取不到正确的结果），整个表达式为false</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Tom&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">30</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">list</span>(<span class="variable">$key</span>,<span class="variable">$value</span>) = each(<span class="variable">$arr</span>))&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;key is :&#x27;</span>,<span class="variable">$key</span>,<span class="string">&#x27; value is:&#x27;</span>,<span class="variable">$value</span>,<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="数组的相关函数"><a href="#数组的相关函数" class="headerlink" title="数组的相关函数"></a>数组的相关函数</h3><p>​    1、排序函数：对数组元素进行排序，都是按照ASCII码进行比较，可以进行英文比较</p>
<p>​        sort()：顺序排序（下标重排）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//排序函数</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$sort_arr</span> = sort(<span class="variable">$arr</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ([0] =&gt; 0 [1] =&gt; 1 [2] =&gt; 2 [3] =&gt; 3 [4] =&gt; 5 )</span></span><br></pre></td></tr></table></figure>
<p>​        rsort()：逆向排序（下标重排）</p>
<p>​        asor()：顺序排序（下标保留）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$asort_arr</span> = asort(<span class="variable">$arr</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [4] =&gt; 0 [1] =&gt; 1 [3] =&gt; 2 [0] =&gt; 3 [2] =&gt; 5 )</span></span><br></pre></td></tr></table></figure>
<p>​        arsor()：逆序排序（下标保留）</p>
<p>​        ksort()：顺序排序：按照键名（下标）</p>
<p>​        krsort()：逆序排序：按照键名（下标）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$krsort_arr</span> = krsort(<span class="variable">$arr</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [4] =&gt; 0 [3] =&gt; 2 [2] =&gt; 5 [1] =&gt; 1 [0] =&gt; 3 )</span></span><br></pre></td></tr></table></figure>
<p>​        shuffle()：随机打乱数组元素</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sort_arr</span> = sort(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$shuffle_arr</span> = shuffle(<span class="variable">$arr</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 3 [1] =&gt; 2 [2] =&gt; 0 [3] =&gt; 5 [4] =&gt; 1 )</span></span><br></pre></td></tr></table></figure>
<p>​    2、指针函数</p>
<p>​        reset()：重置指针，将数组指针回到首位</p>
<p>​        end()：重置指针，将数组指针指到最后一个元素</p>
<p>​        next()：指针下移，取得下一个元素的值</p>
<p>​        prev()：指针上移，取得上一个元素的值</p>
<p>​        current()：获得当前指针的元素值</p>
<p>​        key()：获得当前指针的下标值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//指针函数</span></span><br><span class="line"><span class="keyword">echo</span> key(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;			<span class="comment">//0</span></span><br><span class="line"><span class="keyword">echo</span> current(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//3</span></span><br><span class="line"><span class="keyword">echo</span> next(<span class="variable">$arr</span>),next(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//1,5</span></span><br><span class="line"><span class="keyword">echo</span> prev(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//1</span></span><br><span class="line"><span class="keyword">echo</span> end(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;			<span class="comment">//0</span></span><br><span class="line"><span class="keyword">echo</span> reset(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<p>注意事项：next和prev会移动指针，有可能会导致指针移动到最前或者最后（离开数组），导致数组不能使用，通过next和prev不能回到正确的位置。只能通过end或者reset进行指针重置。</p>
<p>​    3、其他函数</p>
<p>​        count()：统计数组中元素的数量</p>
<p>​        array_push()：往数组中加入一个元素（数组后面）</p>
<p>​        array_pop()：从数组中取出一个元素（数组后面）</p>
<p>​        array_shift()：从数组中取出一个元素（数组前面）</p>
<p>​        array_unshift()：往数组中加入一个元素（数组前面）</p>
<p>​            PHP模拟数据结构：</p>
<p>​                栈：压栈，先进去后出来（FILO）</p>
<p>​                队列：排队，先进去的先出去（FIFO）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="comment">//栈：先压栈后出栈：都是从一端出来</span></span><br><span class="line"><span class="comment">//前面：array_shift/array_unshift</span></span><br><span class="line"><span class="comment">//后面：array_push/array_pop</span></span><br><span class="line"><span class="comment">//压栈</span></span><br><span class="line">array_push(<span class="variable">$arr</span>,<span class="number">3</span>);</span><br><span class="line">array_push(<span class="variable">$arr</span>,<span class="number">2</span>);</span><br><span class="line">array_push(<span class="variable">$arr</span>,<span class="number">1</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 3 [1] =&gt; 2 [2] =&gt; 1 )</span></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">echo</span> array_pop(<span class="variable">$arr</span>),array_pop(<span class="variable">$arr</span>),array_pop(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//1,2,3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="comment">//队列：先排队，先出来，一端进，另外一端出</span></span><br><span class="line"><span class="comment">//后进前出：array_push/array_shfit</span></span><br><span class="line"><span class="comment">//前进后出：array_unshift/array_pop</span></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line">array_unshift(<span class="variable">$arr</span>,<span class="number">3</span>);</span><br><span class="line">array_unshift(<span class="variable">$arr</span>,<span class="number">2</span>);</span><br><span class="line">array_unshift(<span class="variable">$arr</span>,<span class="number">1</span>);</span><br><span class="line">print_r(<span class="variable">$arr</span>);			<span class="comment">//Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 )</span></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="keyword">echo</span> array_pop(<span class="variable">$arr</span>),array_pop(<span class="variable">$arr</span>),array_pop(<span class="variable">$arr</span>),<span class="string">&#x27;&lt;br/&gt;&#x27;</span>;		<span class="comment">//3,2,1</span></span><br></pre></td></tr></table></figure>
<p>​        array_reverse()：把数组元素反过来</p>
<p>​        in_array()：判断一个元素在数组中是否存在</p>
<p>​        array_keys()：获取一个数组的所有下标，返回一个索引数组</p>
<p>​        array_values()：获取一个数组的所有值，返回一个索引数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">print_r(array_reverse(<span class="variable">$arr</span>));	<span class="comment">//Array ( [0] =&gt; 5 [1] =&gt; 4 [2] =&gt; 3 [3] =&gt; 2 [4] =&gt; 1 )</span></span><br><span class="line">var_dump(in_array(<span class="number">4</span>,<span class="variable">$arr</span>));		<span class="comment">//bool(true)</span></span><br><span class="line">var_dump(in_array(<span class="number">8</span>,<span class="variable">$arr</span>));		<span class="comment">//bool(false)</span></span><br><span class="line">print_r(array_keys(<span class="variable">$arr</span>));		<span class="comment">//Array ( [0] =&gt; 0 [1] =&gt; 1 [2] =&gt; 2 [3] =&gt; 3 [4] =&gt; 4 )</span></span><br><span class="line">print_r(array_values(<span class="variable">$arr</span>));	<span class="comment">//Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 )</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用指针遍历数组</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(key(<span class="variable">$arr</span>)!==<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> key(<span class="variable">$arr</span>).<span class="string">&quot;=&gt;&quot;</span>.current(<span class="variable">$arr</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    next(<span class="variable">$arr</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h2><p>编程思想：如何利用数学模式来解决对应的需求问题；然后利用代码实现对应的数据模型（逻辑）。</p>
<p>算法：使用代码实现对应的数学模型，从而解决对应的业务问题。</p>
<h3 id="递推算法"><a href="#递推算法" class="headerlink" title="递推算法"></a>递推算法</h3><p>递推算法是一种简单的算法，即通过已知条件，利用特定关系得出中间推论，直至得到结果的算法。递推算法分为顺推和逆推两种。</p>
<p>顺推：通过最简单的条件（已知），然后逐步推演结果</p>
<p>逆推：通过结果找到规律，然后推到已知条件</p>
<p>​    斐波那契数列：1  1  2  3  5  8  13 …，通常需求：请求得指定位置N所对应的值是多少</p>
<p>​        找规律：</p>
<p>​            1、第一个数是1</p>
<p>​            2、第二个数也是1</p>
<p>​            3、从第三位开始：属于前两个数的和</p>
<p>​        代码解决思路：</p>
<p>​            1、如果数字位置为1和2，结果都是1</p>
<p>​            2、从第三个开始，想办法得到前两个结果，就可以得到</p>
<p>​        终极解决办法：想办法要求的位置之前的所有的值都列出来，那么要求的数就可以通过前两个数之和计算出来：使用数组存储所有结果即可。</p>
<p>递推算法求斐波那契序列：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：规律1  1  2  3  5...</span></span><br><span class="line"><span class="comment">//求出指定位数对应的值</span></span><br><span class="line"><span class="comment">//已知条件：第一个和第二个数都为1，第三个开始为前两个之和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">my_recursive</span>(<span class="params"><span class="variable">$dse</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$des</span> == <span class="number">1</span> || <span class="variable">$des</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//开始计算</span></span><br><span class="line">	<span class="variable">$f</span>[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="variable">$f</span>[<span class="number">2</span>] = <span class="number">1</span>;		<span class="comment">//如果想要第一个或者第二个结果，那么可以直接给出</span></span><br><span class="line">	<span class="variable">$des</span> = <span class="number">15</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">3</span>;<span class="variable">$i</span> &lt;= <span class="variable">$des</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    	<span class="variable">$f</span>[<span class="variable">$i</span>] = <span class="variable">$f</span>[<span class="variable">$i</span><span class="number">-1</span>] + <span class="variable">$f</span>[<span class="variable">$i</span><span class="number">-2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查看</span></span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$f</span>[<span class="variable">$des</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> my_recursive(<span class="number">15</span>);		<span class="comment">//610</span></span><br></pre></td></tr></table></figure>


<h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><p>递推算法是把问题转化为规模小了的同类问题的子问题。然后递归调用函数（或过程）来表示问题的解。</p>
<p>​    1、简化问题：找到最优子问题（不能再小）</p>
<p>​    2、函数自己调用自己</p>
<p>斐波那契数列：1  1  2  3  5  8  13 …</p>
<p>​    需求：请求得指定位置N所对应的值是多少</p>
<p>​    规律：第一和第二个数为1，从第三个开始为前两个数之和</p>
<p>​        F(N) = F(N-1) + F(N-2);</p>
<p>​        F(N-1) = F(N-2) + F(N-3);</p>
<p>​        …</p>
<p>​        F(2) = F(1) = 1;</p>
<p>递归思想中：量两个非常重要的点</p>
<p>​    递归点：发现当前问题又解决当前问题的函数，取解决规模比当前小一点的问题来解决F(N) = F(N-1) + F(N-2)</p>
<p>​    递归出口：当问题解决的时候，已经到达（必须有）最优子问题，不能再次调用函数</p>
<p>​        如果一个函数递归调用自己而没有递归出口：就是死循环</p>
<p>递归的本质是函数调用函数：一个函数需要开辟一块内存空间，递归会出现同时调用N多个函数（自己）：递归的本质是利用空间换时间。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归一定有函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursion</span>(<span class="params"><span class="variable">$n</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$n</span> == <span class="number">1</span> || <span class="variable">$n</span> == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//递归点：求N的值，与求N-1的值一模一样，只是N-1的规模比N小</span></span><br><span class="line">    <span class="keyword">return</span> recursion(<span class="variable">$n</span><span class="number">-1</span>) + recursion(<span class="variable">$n</span><span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> recursion(<span class="number">15</span>);		<span class="comment">//610</span></span><br></pre></td></tr></table></figure>


<h3 id="数组排序算法"><a href="#数组排序算法" class="headerlink" title="数组排序算法"></a>数组排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序（bubble sort），是一种计算机科学领域的比较简单的排序算法。</p>
<p>他重复地走访过要排序的序列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。</p>
<p>走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。</p>
<p>冒泡排序的算法思路：</p>
<p>​    1、比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p>
<p>​    2、对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该回事最大的数。</p>
<p>​    3、针对所有元素重复以上步骤，除了最后一个。</p>
<p>​    4、持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组排序算法：冒泡排序</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line"><span class="comment">//2、想办法让下面可以每次找出最大值的代码重复执行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span> - <span class="number">1</span>;<span class="variable">$i</span>++,<span class="variable">$len</span>--)&#123;</span><br><span class="line">    <span class="comment">//1、想办法将最大的值放到最右边去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>;<span class="variable">$j</span> &lt; <span class="variable">$len</span> - <span class="number">1</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">    	<span class="comment">//判断：两两相比</span></span><br><span class="line">    	<span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] &gt; <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>])&#123;</span><br><span class="line">        	<span class="comment">//左边比右边大：交换</span></span><br><span class="line">        	<span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">        	<span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>];</span><br><span class="line">        	<span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 4 [3] =&gt; 5 [4] =&gt; 7 [5] =&gt; 8 [6] =&gt; 9 )</span></span><br></pre></td></tr></table></figure>


<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序（selection sort）是一种简单直观的排序算法。他的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序方法（比如序列[5,5,3]第一次就将第一个[5]与[3]交换，导致第一个5挪动到第二个5后面）。</p>
<p>选择排序的思路：</p>
<p>​    1、假设第一个元素为最小元素，记下下标。</p>
<p>​    2、寻找右侧剩余的元素，如果有更小的，重新记下最新的下标。</p>
<p>​    3、如果又新的最小的，交换两个元素。</p>
<p>​    4、往右重复以上步骤，直到元素本身为最后一个。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组排序算法：选择排序</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="comment">//1、确定要交换多少次：一次只能找到最小的，需要找到数组长度对应的次数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">//2、假设当前第一个已经排好序了</span></span><br><span class="line">    <span class="variable">$min</span> = <span class="variable">$i</span>;</span><br><span class="line">    <span class="comment">//3、拿该最小的取比较剩余的其他</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$i</span>+<span class="number">1</span>;<span class="variable">$j</span> &lt; <span class="variable">$len</span>;<span class="variable">$j</span>++)&#123;</span><br><span class="line">        <span class="comment">//4、比较：比较当前元素与选定的最小元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$min</span>])&#123;</span><br><span class="line">            <span class="comment">//说明当前指定的$min不合适</span></span><br><span class="line">            <span class="variable">$min</span> = <span class="variable">$j</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5、交换当前选定的值与实际最小的元素值</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$min</span> != <span class="variable">$i</span>)&#123;</span><br><span class="line">        <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$i</span>] = <span class="variable">$arr</span>[<span class="variable">$min</span>];</span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$min</span>] = <span class="variable">$temp</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 6 [6] =&gt; 9 )</span></span><br></pre></td></tr></table></figure>


<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序（insert sort），插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，是稳定的排序方法。插入算法把要排序的数组分为两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。</p>
<p>插入排序的基本思想是：每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当的位置上，直到全部插入完为止。</p>
<p>插入排序的算法思路：</p>
<p>​    1、设置监视哨r[0]，将待插入记录的值赋值给r[0]；</p>
<p>​    2、设置开始查找的位置j</p>
<p>​    3、再数组中进行搜索，搜索中将第j个记录后移，直至r[0].key &gt;= r[j].key为止；</p>
<p>​    4、讲r[0]插入r[j+1]的位置上</p>
<p>通俗来讲：</p>
<p>​    1、认定第一个元素已经排好序</p>
<p>​    2、取出第二个元素，作为待插入数据</p>
<p>​    3、与已经排好序的数组的最右侧元素开始比较</p>
<p>​    4、如果后面的小于前面的：说明前面已经排好序的那个数组元素不再对的位置（向后移一个），然后让新的元素填充进去（继续向前比：高级）</p>
<p>​    5、重复前面的步骤：直到当前元素插入到对的位置</p>
<p>​    6、重复以上步骤，直到所有的数组元素都插入到对的位置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组排序：插入排序</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//1、确定要插入多少回（假设一个数字一次性插入到对的位置，同时第一个位置是假设对的）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">//2、取出当前要插入的元素的值</span></span><br><span class="line">    <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="comment">//3、让该数据与前面已经拍好序的数组元素重复比较（挨个比较），直到对的位置（交换）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$i</span> - <span class="number">1</span>;<span class="variable">$j</span> &gt;= <span class="number">0</span>;<span class="variable">$j</span>--)&#123;</span><br><span class="line">        <span class="comment">//4、比较</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] &gt; <span class="variable">$temp</span>)&#123;</span><br><span class="line">            <span class="comment">//说明当前要插入的元素，比前面的已经排好序的元素的值要小：交换位置</span></span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$j</span>] = <span class="variable">$temp</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//说明当前待插入元素，比前面的元素要大：说明位置正确</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; 5 [3] =&gt; 6 [4] =&gt; 8 [5] =&gt; 9 )</span></span><br></pre></td></tr></table></figure>
<p>优化代码：找到对的位置交换一次即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组排序：插入排序（优化）</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>);</span><br><span class="line"><span class="comment">//1、确定要插入多少回（假设一个数字一次性插入到对的位置，同时第一个位置是假设对的）</span></span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="comment">//2、取出当前要插入的元素的值</span></span><br><span class="line">    <span class="variable">$temp</span> = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">    <span class="variable">$change</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//3、让该数据与前面已经拍好序的数组元素重复比较（挨个比较），直到对的位置（交换）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$i</span> - <span class="number">1</span>;<span class="variable">$j</span> &gt;= <span class="number">0</span>;<span class="variable">$j</span>--)&#123;</span><br><span class="line">        <span class="comment">//4、比较</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>] &gt; <span class="variable">$temp</span>)&#123;</span><br><span class="line">            <span class="comment">//说明当前要插入的元素，比前面的已经排好序的元素的值要小：交换位置</span></span><br><span class="line">            <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$arr</span>[<span class="variable">$j</span>];</span><br><span class="line">            <span class="comment">//说明前面要插入的元素，比前面已经排好序的元素的值要小：交换位置</span></span><br><span class="line">            <span class="variable">$change</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//说明当前待插入元素，比前面的元素要大：说明位置正确</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断位置需要变动</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$change</span>)&#123;</span><br><span class="line">        <span class="comment">//有数据移动：占错位置了</span></span><br><span class="line">        <span class="variable">$arr</span>[<span class="variable">$j</span>+<span class="number">1</span>] = <span class="variable">$temp</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$arr</span>);		<span class="comment">//Array ( [0] =&gt; 2 [1] =&gt; 4 [2] =&gt; 5 [3] =&gt; 6 [4] =&gt; 8 [5] =&gt; 9 )</span></span><br></pre></td></tr></table></figure>


<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序（quick sort）是对冒泡排序的一种改进。通过一趟排序将要排序的数据分隔成独立的两部分，其中一部分的所有数据都比另一部分的所有数据都要小，然后再按次方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。（递归）</p>
<p>设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数据都放到它前面，所有比它大的数据都放到它后面，这个过程称为一趟快速排序。值得注意的是，快速排序不是一种稳定的排序算法，也就是说，多个相同的值的相对位置也许会再算法结束时产生变动。</p>
<p>快速排序的算法是：</p>
<p>​    1、从数组中选出一个元素（通常第一个），作为参照对象。</p>
<p>​    2、定义两个数组，将目标数组中剩余的元素与参照元素挨个比较：小的放到一个数组，大的放到另外一个数组。</p>
<p>​    3、第二步执行完之后，前后的数组顺序不确定，但是确定了自己的位置。</p>
<p>​    4、将得到的小数组按照第1到第3步重复操作（子问题）。</p>
<p>​    5、回溯最小数组（一个元素）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组排序：快速排序</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="variable">$len</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="comment">//取出某个元素，然后将剩余的数组元素，分散到两个不同的数组中</span></span><br><span class="line">    <span class="variable">$left</span> = <span class="variable">$right</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">1</span>;<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="comment">//第一个元素作为比较元素</span></span><br><span class="line">        <span class="comment">//比较：小的放left中，大的放right中</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$i</span>] &lt; <span class="variable">$arr</span>[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="variable">$left</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$right</span>[] = <span class="variable">$arr</span>[<span class="variable">$i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//$left和$right数组元素没有排好序：递归点</span></span><br><span class="line">    <span class="variable">$left</span> = quick_sort(<span class="variable">$left</span>);</span><br><span class="line">    <span class="variable">$right</span> = quick_sort(<span class="variable">$right</span>);</span><br><span class="line">    <span class="comment">//合并三个“数”组</span></span><br><span class="line">    <span class="keyword">return</span> array_merge(<span class="variable">$left</span>,(<span class="keyword">array</span>)<span class="variable">$arr</span>[<span class="number">0</span>],<span class="variable">$right</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">print_r(quick_sort(<span class="variable">$arr</span>));		<span class="comment">//Array ( [0] =&gt; 2 [1] =&gt; 3 [2] =&gt; 4 [3] =&gt; 5 [4] =&gt; 6 [5] =&gt; 7 [6] =&gt; 8 [7] =&gt; 9 )</span></span><br></pre></td></tr></table></figure>


<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序（merge sort）是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二路归并</span></span><br><span class="line"><span class="variable">$arr1</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line"><span class="variable">$arr2</span> = <span class="keyword">array</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//取出一个空数组用于归并空间</span></span><br><span class="line"><span class="variable">$arr3</span> = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$arr1</span>) &amp;&amp; count(<span class="variable">$arr2</span>))&#123;</span><br><span class="line">    <span class="comment">//只要$arr1和$arr2里面还有元素，就进行循环</span></span><br><span class="line">    <span class="comment">//取出每个数组的第一个元素：进行比较</span></span><br><span class="line">    <span class="variable">$arr3</span>[] = <span class="variable">$arr1</span>[<span class="number">0</span>] &lt; <span class="variable">$arr2</span>[<span class="number">0</span>] ? array_shift(<span class="variable">$arr1</span>) :array_shift(<span class="variable">$arr2</span>);    &#125;</span><br><span class="line"><span class="comment">//合并结果</span></span><br><span class="line">print_r(array_merge(<span class="variable">$arr3</span>,<span class="variable">$arr1</span>,<span class="variable">$arr2</span>));</span><br></pre></td></tr></table></figure>
<p>归并排序的算法是：</p>
<p>​    1、将数组拆分成两个数组</p>
<p>​    2、重复步骤1将数组拆分成最小单元</p>
<p>​    3、申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列。</p>
<p>​    4、设定两个指针，最初位置分别为两个已经排序序列的起始位置。</p>
<p>​    5、比较两个指针所所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p>
<p>​    6、重复步骤3直到某一指针超出序列尾</p>
<p>​    7、将另一序列所剩下的所有元素直接赋值到合并序列尾</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//数组排序：归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge_sort</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//递归出口</span></span><br><span class="line">    <span class="variable">$len</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$len</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="comment">//拆分</span></span><br><span class="line">    <span class="variable">$middle</span> = floor(<span class="variable">$len</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="variable">$left</span> = array_slice(<span class="variable">$arr</span>,<span class="number">0</span>,<span class="variable">$middle</span>);</span><br><span class="line">	<span class="variable">$right</span> = array_slice(<span class="variable">$arr</span>,<span class="variable">$middle</span>);</span><br><span class="line">    <span class="comment">//递归点：$left和$right都没有排好序：而且可能是多个元素的数组</span></span><br><span class="line">    <span class="variable">$left</span> = merge_sort(<span class="variable">$left</span>);</span><br><span class="line">    <span class="variable">$right</span> = merge_sort(<span class="variable">$right</span>);</span><br><span class="line">    <span class="comment">//假设左边和右边都已经排好序：二路归并</span></span><br><span class="line">    <span class="variable">$m</span> = <span class="keyword">array</span>();</span><br><span class="line">	<span class="keyword">while</span>(count(<span class="variable">$left</span>) &amp;&amp; count(<span class="variable">$right</span>))&#123;</span><br><span class="line">    	<span class="comment">//只要$arr1和$arr2里面还有元素，就进行循环</span></span><br><span class="line">    	<span class="comment">//取出每个数组的第一个元素：进行比较</span></span><br><span class="line">    	<span class="variable">$m</span>[] = <span class="variable">$left</span>[<span class="number">0</span>] &lt; <span class="variable">$right</span>[<span class="number">0</span>] ? array_shift(<span class="variable">$left</span>) :array_shift(<span class="variable">$right</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回结果</span></span><br><span class="line">    <span class="keyword">return</span> array_merge(<span class="variable">$m</span>,<span class="variable">$left</span>,<span class="variable">$right</span>);		<span class="comment">//Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 4 [4] =&gt; 5 [5] =&gt; 7 [6] =&gt; 9 )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><h4 id="查找算法含义"><a href="#查找算法含义" class="headerlink" title="查找算法含义"></a>查找算法含义</h4><p>查找实在大量的信息中寻找一个特定的信息元素，再计算机应用中，查找是基本运算。查找算法是指实现查找过程对应的代码结。就是在大型数组中取快速定位到想要的元素。</p>
<h4 id="顺序查找算法"><a href="#顺序查找算法" class="headerlink" title="顺序查找算法"></a>顺序查找算法</h4><p>顺序查找也称为线形查找，从数据结构线形表的一端开始，顺序扫描，一次将扫描到的结点关键字与给定值k相比较，若相等则表示查找成功，若扫描结束仍然没有找到关键字等于k的结点，表示查找失败。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找算法：顺序查找</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">68</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//顺序查找：从数组第一个元素开始，挨个匹配</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_order</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$num</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//全部匹配</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>,<span class="variable">$len</span> = count(<span class="variable">$arr</span>);<span class="variable">$i</span> &lt; <span class="variable">$len</span>;<span class="variable">$i</span>++)&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$i</span>] == <span class="variable">$num</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$i</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(check_order(<span class="variable">$arr</span>,<span class="number">5</span>));		<span class="comment">//bool(false)</span></span><br></pre></td></tr></table></figure>


<h4 id="二分查找算法"><a href="#二分查找算法" class="headerlink" title="二分查找算法"></a>二分查找算法</h4><p>二分查找算法要求线形表中的结点按关键字值升序或者降序排列，用给定值k与中间结点的关键字比较，中间结点把线形表分成两个子表，若相等则查找成功；若不相等，再根据k与该中间结点关键字的比较结果确定下一步查找哪个子表，这样递归进行，直到查找到或查找结束。</p>
<p>折半算法思路：</p>
<p>​    1、计算数组长度</p>
<p>​    2、确定左右两边的指针位置</p>
<p>​    3、找到中间位置</p>
<p>​    4、匹配</p>
<p>​    5、然后根据大小重定边界</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找算法：二分查找算法</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">23</span>,<span class="number">68</span>,<span class="number">100</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check_break</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$res</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//1、得到数组的边界</span></span><br><span class="line">    <span class="variable">$right</span> = count(<span class="variable">$arr</span>);</span><br><span class="line">    <span class="variable">$left</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//循环匹配</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$left</span> &lt;= <span class="variable">$right</span>)&#123;</span><br><span class="line">        <span class="comment">//3、得到中间位置</span></span><br><span class="line">        <span class="variable">$middle</span> = floor((<span class="variable">$left</span> + <span class="variable">$right</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//4、匹配数据</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$middle</span>] == <span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$middle</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5、没有找到</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="variable">$middle</span>] &lt;= <span class="variable">$res</span>)&#123;</span><br><span class="line">            <span class="comment">//值在右边</span></span><br><span class="line">            <span class="variable">$left</span> = <span class="variable">$middle</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//值在左边</span></span><br><span class="line">            <span class="variable">$right</span> = <span class="variable">$middle</span> - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(check_break(<span class="variable">$arr</span>,<span class="number">100</span>));		<span class="comment">//float(6)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
</search>
